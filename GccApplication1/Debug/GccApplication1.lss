
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000f66  00000ffa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f66  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  00800102  00800102  00000ffc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ffc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000102c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00001068  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c91  00000000  00000000  00001268  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ea2  00000000  00000000  00002ef9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001033  00000000  00000000  00003d9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000051c  00000000  00000000  00004dd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000859  00000000  00000000  000052ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000acb  00000000  00000000  00005b45  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  00006610  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	86 c0       	rjmp	.+268    	; 0x10e <__ctors_end>
   2:	00 00       	nop
   4:	12 c2       	rjmp	.+1060   	; 0x42a <__vector_1>
   6:	00 00       	nop
   8:	e8 c1       	rjmp	.+976    	; 0x3da <__vector_2>
   a:	00 00       	nop
   c:	9d c0       	rjmp	.+314    	; 0x148 <__bad_interrupt>
   e:	00 00       	nop
  10:	9b c0       	rjmp	.+310    	; 0x148 <__bad_interrupt>
  12:	00 00       	nop
  14:	99 c0       	rjmp	.+306    	; 0x148 <__bad_interrupt>
  16:	00 00       	nop
  18:	97 c0       	rjmp	.+302    	; 0x148 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	95 c0       	rjmp	.+298    	; 0x148 <__bad_interrupt>
  1e:	00 00       	nop
  20:	93 c0       	rjmp	.+294    	; 0x148 <__bad_interrupt>
  22:	00 00       	nop
  24:	91 c0       	rjmp	.+290    	; 0x148 <__bad_interrupt>
  26:	00 00       	nop
  28:	8f c0       	rjmp	.+286    	; 0x148 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	8d c0       	rjmp	.+282    	; 0x148 <__bad_interrupt>
  2e:	00 00       	nop
  30:	8b c0       	rjmp	.+278    	; 0x148 <__bad_interrupt>
  32:	00 00       	nop
  34:	89 c0       	rjmp	.+274    	; 0x148 <__bad_interrupt>
  36:	00 00       	nop
  38:	87 c0       	rjmp	.+270    	; 0x148 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	85 c0       	rjmp	.+266    	; 0x148 <__bad_interrupt>
  3e:	00 00       	nop
  40:	98 c2       	rjmp	.+1328   	; 0x572 <__vector_16>
  42:	00 00       	nop
  44:	81 c0       	rjmp	.+258    	; 0x148 <__bad_interrupt>
  46:	00 00       	nop
  48:	7f c0       	rjmp	.+254    	; 0x148 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	7d c0       	rjmp	.+250    	; 0x148 <__bad_interrupt>
  4e:	00 00       	nop
  50:	04 c4       	rjmp	.+2056   	; 0x85a <__vector_20>
  52:	00 00       	nop
  54:	79 c0       	rjmp	.+242    	; 0x148 <__bad_interrupt>
  56:	00 00       	nop
  58:	77 c0       	rjmp	.+238    	; 0x148 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	75 c0       	rjmp	.+234    	; 0x148 <__bad_interrupt>
  5e:	00 00       	nop
  60:	73 c0       	rjmp	.+230    	; 0x148 <__bad_interrupt>
  62:	00 00       	nop
  64:	71 c0       	rjmp	.+226    	; 0x148 <__bad_interrupt>
  66:	00 00       	nop
  68:	6f c0       	rjmp	.+222    	; 0x148 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	6d c0       	rjmp	.+218    	; 0x148 <__bad_interrupt>
  6e:	00 00       	nop
  70:	6b c0       	rjmp	.+214    	; 0x148 <__bad_interrupt>
  72:	00 00       	nop
  74:	69 c0       	rjmp	.+210    	; 0x148 <__bad_interrupt>
  76:	00 00       	nop
  78:	67 c0       	rjmp	.+206    	; 0x148 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	65 c0       	rjmp	.+202    	; 0x148 <__bad_interrupt>
  7e:	00 00       	nop
  80:	63 c0       	rjmp	.+198    	; 0x148 <__bad_interrupt>
  82:	00 00       	nop
  84:	61 c0       	rjmp	.+194    	; 0x148 <__bad_interrupt>
  86:	00 00       	nop
  88:	5f c0       	rjmp	.+190    	; 0x148 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	08 00       	.word	0x0008	; ????
  8e:	00 00       	nop
  90:	be 92       	st	-X, r11
  92:	24 49       	sbci	r18, 0x94	; 148
  94:	12 3e       	cpi	r17, 0xE2	; 226
  96:	ab aa       	std	Y+51, r10	; 0x33
  98:	aa 2a       	or	r10, r26
  9a:	be cd       	rjmp	.-1156   	; 0xfffffc18 <__eeprom_end+0xff7efc18>
  9c:	cc cc       	rjmp	.-1640   	; 0xfffffa36 <__eeprom_end+0xff7efa36>
  9e:	4c 3e       	cpi	r20, 0xEC	; 236
  a0:	00 00       	nop
  a2:	00 80       	ld	r0, Z
  a4:	be ab       	std	Y+54, r27	; 0x36
  a6:	aa aa       	std	Y+50, r10	; 0x32
  a8:	aa 3e       	cpi	r26, 0xEA	; 234
  aa:	00 00       	nop
  ac:	00 00       	nop
  ae:	bf 00       	.word	0x00bf	; ????
  b0:	00 00       	nop
  b2:	80 3f       	cpi	r24, 0xF0	; 240
  b4:	00 00       	nop
  b6:	00 00       	nop
  b8:	00 08       	sbc	r0, r0
  ba:	41 78       	andi	r20, 0x81	; 129
  bc:	d3 bb       	out	0x13, r29	; 19
  be:	43 87       	std	Z+11, r20	; 0x0b
  c0:	d1 13       	cpse	r29, r17
  c2:	3d 19       	sub	r19, r13
  c4:	0e 3c       	cpi	r16, 0xCE	; 206
  c6:	c3 bd       	out	0x23, r28	; 35
  c8:	42 82       	std	Z+2, r4	; 0x02
  ca:	ad 2b       	or	r26, r29
  cc:	3e 68       	ori	r19, 0x8E	; 142
  ce:	ec 82       	std	Y+4, r14	; 0x04
  d0:	76 be       	out	0x36, r7	; 54
  d2:	d9 8f       	std	Y+25, r29	; 0x19
  d4:	e1 a9       	ldd	r30, Z+49	; 0x31
  d6:	3e 4c       	sbci	r19, 0xCE	; 206
  d8:	80 ef       	ldi	r24, 0xF0	; 240
  da:	ff be       	out	0x3f, r15	; 63
  dc:	01 c4       	rjmp	.+2050   	; 0x8e0 <__addsf3x+0x5a>
  de:	ff 7f       	andi	r31, 0xFF	; 255
  e0:	3f 00       	.word	0x003f	; ????
  e2:	00 00       	nop
  e4:	00 00       	nop
  e6:	07 63       	ori	r16, 0x37	; 55
  e8:	42 36       	cpi	r20, 0x62	; 98
  ea:	b7 9b       	sbis	0x16, 7	; 22
  ec:	d8 a7       	std	Y+40, r29	; 0x28
  ee:	1a 39       	cpi	r17, 0x9A	; 154
  f0:	68 56       	subi	r22, 0x68	; 104
  f2:	18 ae       	std	Y+56, r1	; 0x38
  f4:	ba ab       	std	Y+50, r27	; 0x32
  f6:	55 8c       	ldd	r5, Z+29	; 0x1d
  f8:	1d 3c       	cpi	r17, 0xCD	; 205
  fa:	b7 cc       	rjmp	.-1682   	; 0xfffffa6a <__eeprom_end+0xff7efa6a>
  fc:	57 63       	ori	r21, 0x37	; 55
  fe:	bd 6d       	ori	r27, 0xDD	; 221
 100:	ed fd       	.word	0xfded	; ????
 102:	75 3e       	cpi	r23, 0xE5	; 229
 104:	f6 17       	cp	r31, r22
 106:	72 31       	cpi	r23, 0x12	; 18
 108:	bf 00       	.word	0x00bf	; ????
 10a:	00 00       	nop
 10c:	80 3f       	cpi	r24, 0xF0	; 240

0000010e <__ctors_end>:
 10e:	11 24       	eor	r1, r1
 110:	1f be       	out	0x3f, r1	; 63
 112:	cf ef       	ldi	r28, 0xFF	; 255
 114:	d0 e1       	ldi	r29, 0x10	; 16
 116:	de bf       	out	0x3e, r29	; 62
 118:	cd bf       	out	0x3d, r28	; 61

0000011a <__do_copy_data>:
 11a:	11 e0       	ldi	r17, 0x01	; 1
 11c:	a0 e0       	ldi	r26, 0x00	; 0
 11e:	b1 e0       	ldi	r27, 0x01	; 1
 120:	e6 e6       	ldi	r30, 0x66	; 102
 122:	ff e0       	ldi	r31, 0x0F	; 15
 124:	00 e0       	ldi	r16, 0x00	; 0
 126:	0b bf       	out	0x3b, r16	; 59
 128:	02 c0       	rjmp	.+4      	; 0x12e <__do_copy_data+0x14>
 12a:	07 90       	elpm	r0, Z+
 12c:	0d 92       	st	X+, r0
 12e:	a2 30       	cpi	r26, 0x02	; 2
 130:	b1 07       	cpc	r27, r17
 132:	d9 f7       	brne	.-10     	; 0x12a <__do_copy_data+0x10>

00000134 <__do_clear_bss>:
 134:	21 e0       	ldi	r18, 0x01	; 1
 136:	a2 e0       	ldi	r26, 0x02	; 2
 138:	b1 e0       	ldi	r27, 0x01	; 1
 13a:	01 c0       	rjmp	.+2      	; 0x13e <.do_clear_bss_start>

0000013c <.do_clear_bss_loop>:
 13c:	1d 92       	st	X+, r1

0000013e <.do_clear_bss_start>:
 13e:	a0 32       	cpi	r26, 0x20	; 32
 140:	b2 07       	cpc	r27, r18
 142:	e1 f7       	brne	.-8      	; 0x13c <.do_clear_bss_loop>
 144:	c1 d1       	rcall	.+898    	; 0x4c8 <main>
 146:	0d c7       	rjmp	.+3610   	; 0xf62 <_exit>

00000148 <__bad_interrupt>:
 148:	5b cf       	rjmp	.-330    	; 0x0 <__vectors>

0000014a <init_BT>:
#include "Bluetooth.h"
#include "Marble.h"
#include <avr/io.h>

void init_BT(){
	UCSR1A = 0x00;
 14a:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
	UCSR1B = 0x18;
 14e:	88 e1       	ldi	r24, 0x18	; 24
 150:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	UCSR1C = 0x06;
 154:	86 e0       	ldi	r24, 0x06	; 6
 156:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
	
	UBRR1H = 0x00;
 15a:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 103;
 15e:	87 e6       	ldi	r24, 0x67	; 103
 160:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 164:	08 95       	ret

00000166 <Select_Item>:
	Select_Item(ITEM_NONE);
}

int calc_hz(){
	return (fire_sensor_val > Fire_MAX)?Buzzer_MAX:(fire_sensor_val<Fire_MAX)?Buzzer_MIN:(Buzzer_MAX-Buzzer_MIN)/(Fire_MAX-Fire_MIN)*(fire_sensor_val-Fire_MIN)+Buzzer_MIN;
}
 166:	95 b3       	in	r25, 0x15	; 21
 168:	90 7f       	andi	r25, 0xF0	; 240
 16a:	89 2b       	or	r24, r25
 16c:	85 bb       	out	0x15, r24	; 21
 16e:	2f ef       	ldi	r18, 0xFF	; 255
 170:	81 ee       	ldi	r24, 0xE1	; 225
 172:	94 e0       	ldi	r25, 0x04	; 4
 174:	21 50       	subi	r18, 0x01	; 1
 176:	80 40       	sbci	r24, 0x00	; 0
 178:	90 40       	sbci	r25, 0x00	; 0
 17a:	e1 f7       	brne	.-8      	; 0x174 <Select_Item+0xe>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <Select_Item+0x18>
 17e:	00 00       	nop
 180:	08 95       	ret

00000182 <Servo_Act>:
 182:	40 e0       	ldi	r20, 0x00	; 0
 184:	50 e0       	ldi	r21, 0x00	; 0
 186:	21 c0       	rjmp	.+66     	; 0x1ca <Servo_Act+0x48>
 188:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <Servo_Allowed>
 18c:	22 23       	and	r18, r18
 18e:	b9 f0       	breq	.+46     	; 0x1be <Servo_Act+0x3c>
 190:	4f 5f       	subi	r20, 0xFF	; 255
 192:	5f 4f       	sbci	r21, 0xFF	; 255
 194:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <Servo_increment_threshold>
 198:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <Servo_increment_threshold+0x1>
 19c:	42 17       	cp	r20, r18
 19e:	53 07       	cpc	r21, r19
 1a0:	70 f0       	brcs	.+28     	; 0x1be <Servo_Act+0x3c>
 1a2:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <Servo_step>
 1a6:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <Servo_step+0x1>
 1aa:	82 0f       	add	r24, r18
 1ac:	93 1f       	adc	r25, r19
 1ae:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <Servo_pos+0x1>
 1b2:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <Servo_pos>
 1b6:	9b bd       	out	0x2b, r25	; 43
 1b8:	8a bd       	out	0x2a, r24	; 42
 1ba:	40 e0       	ldi	r20, 0x00	; 0
 1bc:	50 e0       	ldi	r21, 0x00	; 0
 1be:	8f e8       	ldi	r24, 0x8F	; 143
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <Servo_Act+0x40>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <Servo_Act+0x46>
 1c8:	00 00       	nop
 1ca:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <Servo_pos>
 1ce:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <Servo_pos+0x1>
 1d2:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <Servo_target>
 1d6:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <Servo_target+0x1>
 1da:	82 17       	cp	r24, r18
 1dc:	93 07       	cpc	r25, r19
 1de:	a1 f6       	brne	.-88     	; 0x188 <Servo_Act+0x6>
 1e0:	08 95       	ret

000001e2 <Servo_Goto>:
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	ec 01       	movw	r28, r24
 1e8:	83 e0       	ldi	r24, 0x03	; 3
 1ea:	bd df       	rcall	.-134    	; 0x166 <Select_Item>
 1ec:	87 e8       	ldi	r24, 0x87	; 135
 1ee:	93 e1       	ldi	r25, 0x13	; 19
 1f0:	97 bd       	out	0x27, r25	; 39
 1f2:	86 bd       	out	0x26, r24	; 38
 1f4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <Servo_pos>
 1f8:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <Servo_pos+0x1>
 1fc:	9b bd       	out	0x2b, r25	; 43
 1fe:	8a bd       	out	0x2a, r24	; 42
 200:	d0 93 09 01 	sts	0x0109, r29	; 0x800109 <Servo_target+0x1>
 204:	c0 93 08 01 	sts	0x0108, r28	; 0x800108 <Servo_target>
 208:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <Servo_pos>
 20c:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <Servo_pos+0x1>
 210:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <Servo_target>
 214:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <Servo_target+0x1>
 218:	28 17       	cp	r18, r24
 21a:	39 07       	cpc	r19, r25
 21c:	38 f0       	brcs	.+14     	; 0x22c <Servo_Goto+0x4a>
 21e:	8f ef       	ldi	r24, 0xFF	; 255
 220:	9f ef       	ldi	r25, 0xFF	; 255
 222:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <Servo_step+0x1>
 226:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <Servo_step>
 22a:	06 c0       	rjmp	.+12     	; 0x238 <Servo_Goto+0x56>
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <Servo_step+0x1>
 234:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <Servo_step>
 238:	82 e0       	ldi	r24, 0x02	; 2
 23a:	95 df       	rcall	.-214    	; 0x166 <Select_Item>
 23c:	a2 df       	rcall	.-188    	; 0x182 <Servo_Act>
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	08 95       	ret

00000244 <Servo_Set_Speed>:
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <Servo_increment_threshold+0x1>
 24a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <Servo_increment_threshold>
 24e:	08 95       	ret

00000250 <calc_speed>:
 250:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <temp_sensor_val>
 254:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <temp_sensor_val+0x1>
 258:	6d 32       	cpi	r22, 0x2D	; 45
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	78 07       	cpc	r23, r24
 25e:	80 f4       	brcc	.+32     	; 0x280 <calc_speed+0x30>
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	00 d4       	rcall	.+2048   	; 0xa66 <__floatunsisf>
 266:	29 e8       	ldi	r18, 0x89	; 137
 268:	38 e8       	ldi	r19, 0x88	; 136
 26a:	48 e8       	ldi	r20, 0x88	; 136
 26c:	5e eb       	ldi	r21, 0xBE	; 190
 26e:	f6 d4       	rcall	.+2540   	; 0xc5c <__mulsf3>
 270:	20 e0       	ldi	r18, 0x00	; 0
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	48 ec       	ldi	r20, 0xC8	; 200
 276:	52 e4       	ldi	r21, 0x42	; 66
 278:	f5 d2       	rcall	.+1514   	; 0x864 <__addsf3>
 27a:	c9 d3       	rcall	.+1938   	; 0xa0e <__fixunssfsi>
 27c:	86 2f       	mov	r24, r22
 27e:	08 95       	ret
 280:	84 e1       	ldi	r24, 0x14	; 20
 282:	08 95       	ret

00000284 <RED_LED_On>:
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
 288:	ec 01       	movw	r28, r24
 28a:	83 e0       	ldi	r24, 0x03	; 3
 28c:	6c df       	rcall	.-296    	; 0x166 <Select_Item>
 28e:	87 e8       	ldi	r24, 0x87	; 135
 290:	93 e1       	ldi	r25, 0x13	; 19
 292:	97 bd       	out	0x27, r25	; 39
 294:	86 bd       	out	0x26, r24	; 38
 296:	db bd       	out	0x2b, r29	; 43
 298:	ca bd       	out	0x2a, r28	; 42
 29a:	85 e0       	ldi	r24, 0x05	; 5
 29c:	64 df       	rcall	.-312    	; 0x166 <Select_Item>
 29e:	df 91       	pop	r29
 2a0:	cf 91       	pop	r28
 2a2:	08 95       	ret

000002a4 <GREEN_LED_On>:
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
 2a8:	ec 01       	movw	r28, r24
 2aa:	83 e0       	ldi	r24, 0x03	; 3
 2ac:	5c df       	rcall	.-328    	; 0x166 <Select_Item>
 2ae:	87 e8       	ldi	r24, 0x87	; 135
 2b0:	93 e1       	ldi	r25, 0x13	; 19
 2b2:	97 bd       	out	0x27, r25	; 39
 2b4:	86 bd       	out	0x26, r24	; 38
 2b6:	db bd       	out	0x2b, r29	; 43
 2b8:	ca bd       	out	0x2a, r28	; 42
 2ba:	8d e0       	ldi	r24, 0x0D	; 13
 2bc:	54 df       	rcall	.-344    	; 0x166 <Select_Item>
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	08 95       	ret

000002c4 <calc_led>:
 2c4:	cf 92       	push	r12
 2c6:	df 92       	push	r13
 2c8:	ef 92       	push	r14
 2ca:	ff 92       	push	r15
 2cc:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <cds_sensor_val>
 2d0:	70 91 0e 01 	lds	r23, 0x010E	; 0x80010e <cds_sensor_val+0x1>
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	c6 d3       	rcall	.+1932   	; 0xa66 <__floatunsisf>
 2da:	9b 01       	movw	r18, r22
 2dc:	ac 01       	movw	r20, r24
 2de:	68 e4       	ldi	r22, 0x48	; 72
 2e0:	7b eb       	ldi	r23, 0xBB	; 187
 2e2:	82 e9       	ldi	r24, 0x92	; 146
 2e4:	9a e4       	ldi	r25, 0x4A	; 74
 2e6:	26 d3       	rcall	.+1612   	; 0x934 <__divsf3>
 2e8:	20 e0       	ldi	r18, 0x00	; 0
 2ea:	30 ee       	ldi	r19, 0xE0	; 224
 2ec:	42 e9       	ldi	r20, 0x92	; 146
 2ee:	55 e4       	ldi	r21, 0x45	; 69
 2f0:	b8 d2       	rcall	.+1392   	; 0x862 <__subsf3>
 2f2:	74 d4       	rcall	.+2280   	; 0xbdc <log>
 2f4:	21 ed       	ldi	r18, 0xD1	; 209
 2f6:	3b e8       	ldi	r19, 0x8B	; 139
 2f8:	49 e2       	ldi	r20, 0x29	; 41
 2fa:	51 e4       	ldi	r21, 0x41	; 65
 2fc:	b2 d2       	rcall	.+1380   	; 0x862 <__subsf3>
 2fe:	2d ec       	ldi	r18, 0xCD	; 205
 300:	3c ec       	ldi	r19, 0xCC	; 204
 302:	4c e4       	ldi	r20, 0x4C	; 76
 304:	5f e3       	ldi	r21, 0x3F	; 63
 306:	16 d3       	rcall	.+1580   	; 0x934 <__divsf3>
 308:	9b 01       	movw	r18, r22
 30a:	ac 01       	movw	r20, r24
 30c:	60 e0       	ldi	r22, 0x00	; 0
 30e:	70 e0       	ldi	r23, 0x00	; 0
 310:	80 e8       	ldi	r24, 0x80	; 128
 312:	9f e3       	ldi	r25, 0x3F	; 63
 314:	a6 d2       	rcall	.+1356   	; 0x862 <__subsf3>
 316:	9b 01       	movw	r18, r22
 318:	ac 01       	movw	r20, r24
 31a:	60 e0       	ldi	r22, 0x00	; 0
 31c:	70 e0       	ldi	r23, 0x00	; 0
 31e:	80 e2       	ldi	r24, 0x20	; 32
 320:	91 e4       	ldi	r25, 0x41	; 65
 322:	ff d4       	rcall	.+2558   	; 0xd22 <pow>
 324:	6b 01       	movw	r12, r22
 326:	7c 01       	movw	r14, r24
 328:	20 e0       	ldi	r18, 0x00	; 0
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	4a ef       	ldi	r20, 0xFA	; 250
 32e:	54 e4       	ldi	r21, 0x44	; 68
 330:	4c d4       	rcall	.+2200   	; 0xbca <__gesf2>
 332:	18 16       	cp	r1, r24
 334:	ec f0       	brlt	.+58     	; 0x370 <calc_led+0xac>
 336:	20 e0       	ldi	r18, 0x00	; 0
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	48 ec       	ldi	r20, 0xC8	; 200
 33c:	52 e4       	ldi	r21, 0x42	; 66
 33e:	c7 01       	movw	r24, r14
 340:	b6 01       	movw	r22, r12
 342:	f4 d2       	rcall	.+1512   	; 0x92c <__cmpsf2>
 344:	88 23       	and	r24, r24
 346:	bc f0       	brlt	.+46     	; 0x376 <calc_led+0xb2>
 348:	20 e0       	ldi	r18, 0x00	; 0
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	48 e4       	ldi	r20, 0x48	; 72
 34e:	53 e4       	ldi	r21, 0x43	; 67
 350:	c7 01       	movw	r24, r14
 352:	b6 01       	movw	r22, r12
 354:	86 d2       	rcall	.+1292   	; 0x862 <__subsf3>
 356:	2f ea       	ldi	r18, 0xAF	; 175
 358:	31 ea       	ldi	r19, 0xA1	; 161
 35a:	4c eb       	ldi	r20, 0xBC	; 188
 35c:	5f e3       	ldi	r21, 0x3F	; 63
 35e:	7e d4       	rcall	.+2300   	; 0xc5c <__mulsf3>
 360:	20 e0       	ldi	r18, 0x00	; 0
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	48 ec       	ldi	r20, 0xC8	; 200
 366:	52 e4       	ldi	r21, 0x42	; 66
 368:	7d d2       	rcall	.+1274   	; 0x864 <__addsf3>
 36a:	4c d3       	rcall	.+1688   	; 0xa04 <__fixsfsi>
 36c:	cb 01       	movw	r24, r22
 36e:	05 c0       	rjmp	.+10     	; 0x37a <calc_led+0xb6>
 370:	88 eb       	ldi	r24, 0xB8	; 184
 372:	9b e0       	ldi	r25, 0x0B	; 11
 374:	02 c0       	rjmp	.+4      	; 0x37a <calc_led+0xb6>
 376:	88 ec       	ldi	r24, 0xC8	; 200
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	ff 90       	pop	r15
 37c:	ef 90       	pop	r14
 37e:	df 90       	pop	r13
 380:	cf 90       	pop	r12
 382:	08 95       	ret

00000384 <calc_force>:

//=========== pressuer =======//
int calc_force(){
	if(pressure_sensor_val <= 10)
 384:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <pressure_sensor_val>
 388:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <pressure_sensor_val+0x1>
 38c:	6b 30       	cpi	r22, 0x0B	; 11
 38e:	71 05       	cpc	r23, r1
 390:	08 f1       	brcs	.+66     	; 0x3d4 <calc_force+0x50>
		return 0;
	else
		return pow(2.718, (pressure_sensor_val*5.0/1024.0-0.3456)/0.6935);
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	67 d3       	rcall	.+1742   	; 0xa66 <__floatunsisf>
 398:	20 e0       	ldi	r18, 0x00	; 0
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	40 ea       	ldi	r20, 0xA0	; 160
 39e:	50 e4       	ldi	r21, 0x40	; 64
 3a0:	5d d4       	rcall	.+2234   	; 0xc5c <__mulsf3>
 3a2:	20 e0       	ldi	r18, 0x00	; 0
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	40 e8       	ldi	r20, 0x80	; 128
 3a8:	5a e3       	ldi	r21, 0x3A	; 58
 3aa:	58 d4       	rcall	.+2224   	; 0xc5c <__mulsf3>
 3ac:	2c e7       	ldi	r18, 0x7C	; 124
 3ae:	32 ef       	ldi	r19, 0xF2	; 242
 3b0:	40 eb       	ldi	r20, 0xB0	; 176
 3b2:	5e e3       	ldi	r21, 0x3E	; 62
 3b4:	56 d2       	rcall	.+1196   	; 0x862 <__subsf3>
 3b6:	27 e3       	ldi	r18, 0x37	; 55
 3b8:	39 e8       	ldi	r19, 0x89	; 137
 3ba:	41 e3       	ldi	r20, 0x31	; 49
 3bc:	5f e3       	ldi	r21, 0x3F	; 63
 3be:	ba d2       	rcall	.+1396   	; 0x934 <__divsf3>
 3c0:	9b 01       	movw	r18, r22
 3c2:	ac 01       	movw	r20, r24
 3c4:	66 eb       	ldi	r22, 0xB6	; 182
 3c6:	73 ef       	ldi	r23, 0xF3	; 243
 3c8:	8d e2       	ldi	r24, 0x2D	; 45
 3ca:	90 e4       	ldi	r25, 0x40	; 64
 3cc:	aa d4       	rcall	.+2388   	; 0xd22 <pow>
 3ce:	1a d3       	rcall	.+1588   	; 0xa04 <__fixsfsi>
 3d0:	cb 01       	movw	r24, r22
 3d2:	08 95       	ret
}

//=========== pressuer =======//
int calc_force(){
	if(pressure_sensor_val <= 10)
		return 0;
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	90 e0       	ldi	r25, 0x00	; 0
	else
		return pow(2.718, (pressure_sensor_val*5.0/1024.0-0.3456)/0.6935);
 3d8:	08 95       	ret

000003da <__vector_2>:
	}
	
}

ISR(INT1_vect)
{
 3da:	1f 92       	push	r1
 3dc:	0f 92       	push	r0
 3de:	0f b6       	in	r0, 0x3f	; 63
 3e0:	0f 92       	push	r0
 3e2:	11 24       	eor	r1, r1
 3e4:	0b b6       	in	r0, 0x3b	; 59
 3e6:	0f 92       	push	r0
 3e8:	2f 93       	push	r18
 3ea:	3f 93       	push	r19
 3ec:	4f 93       	push	r20
 3ee:	5f 93       	push	r21
 3f0:	6f 93       	push	r22
 3f2:	7f 93       	push	r23
 3f4:	8f 93       	push	r24
 3f6:	9f 93       	push	r25
 3f8:	af 93       	push	r26
 3fa:	bf 93       	push	r27
 3fc:	ef 93       	push	r30
 3fe:	ff 93       	push	r31
	GREEN_LED_On(calc_led());
 400:	61 df       	rcall	.-318    	; 0x2c4 <calc_led>
 402:	50 df       	rcall	.-352    	; 0x2a4 <GREEN_LED_On>
}
 404:	ff 91       	pop	r31
 406:	ef 91       	pop	r30
 408:	bf 91       	pop	r27
 40a:	af 91       	pop	r26
 40c:	9f 91       	pop	r25
 40e:	8f 91       	pop	r24
 410:	7f 91       	pop	r23
 412:	6f 91       	pop	r22
 414:	5f 91       	pop	r21
 416:	4f 91       	pop	r20
 418:	3f 91       	pop	r19
 41a:	2f 91       	pop	r18
 41c:	0f 90       	pop	r0
 41e:	0b be       	out	0x3b, r0	; 59
 420:	0f 90       	pop	r0
 422:	0f be       	out	0x3f, r0	; 63
 424:	0f 90       	pop	r0
 426:	1f 90       	pop	r1
 428:	18 95       	reti

0000042a <__vector_1>:

ISR(INT0_vect)
{
 42a:	1f 92       	push	r1
 42c:	0f 92       	push	r0
 42e:	0f b6       	in	r0, 0x3f	; 63
 430:	0f 92       	push	r0
 432:	11 24       	eor	r1, r1
 434:	0b b6       	in	r0, 0x3b	; 59
 436:	0f 92       	push	r0
 438:	2f 93       	push	r18
 43a:	3f 93       	push	r19
 43c:	4f 93       	push	r20
 43e:	5f 93       	push	r21
 440:	6f 93       	push	r22
 442:	7f 93       	push	r23
 444:	8f 93       	push	r24
 446:	9f 93       	push	r25
 448:	af 93       	push	r26
 44a:	bf 93       	push	r27
 44c:	ef 93       	push	r30
 44e:	ff 93       	push	r31
	RED_LED_On(calc_led());
 450:	39 df       	rcall	.-398    	; 0x2c4 <calc_led>
 452:	18 df       	rcall	.-464    	; 0x284 <RED_LED_On>
	//BT_send('0');
	//GREEN_LED_On(500);
}
 454:	ff 91       	pop	r31
 456:	ef 91       	pop	r30
 458:	bf 91       	pop	r27
 45a:	af 91       	pop	r26
 45c:	9f 91       	pop	r25
 45e:	8f 91       	pop	r24
 460:	7f 91       	pop	r23
 462:	6f 91       	pop	r22
 464:	5f 91       	pop	r21
 466:	4f 91       	pop	r20
 468:	3f 91       	pop	r19
 46a:	2f 91       	pop	r18
 46c:	0f 90       	pop	r0
 46e:	0b be       	out	0x3b, r0	; 59
 470:	0f 90       	pop	r0
 472:	0f be       	out	0x3f, r0	; 63
 474:	0f 90       	pop	r0
 476:	1f 90       	pop	r1
 478:	18 95       	reti

0000047a <timer0_init>:
//************************************************************************************************************************************************************//

void timer0_init(void) {
	//TCCR0 |= (1 << CS02) |(1<<CS01)| (1 << CS00); // 분주비 1024
	
	TCCR0 |= (1<<CS01) | (1 << CS00);
 47a:	83 b7       	in	r24, 0x33	; 51
 47c:	83 60       	ori	r24, 0x03	; 3
 47e:	83 bf       	out	0x33, r24	; 51
	
	TIMSK |= (1 << TOIE0); // 타이머0 오버플로우 인터럽트 허용
 480:	87 b7       	in	r24, 0x37	; 55
 482:	81 60       	ori	r24, 0x01	; 1
 484:	87 bf       	out	0x37, r24	; 55
	TCNT0 = 0; // 타이머 카운터 초기화
 486:	12 be       	out	0x32, r1	; 50
 488:	08 95       	ret

0000048a <timer1_init>:
}

void timer1_init(){
	TCCR1A=0x82;
 48a:	82 e8       	ldi	r24, 0x82	; 130
 48c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B=0x1b;
 48e:	8b e1       	ldi	r24, 0x1B	; 27
 490:	8e bd       	out	0x2e, r24	; 46

	ICR1=4999;     //TOP
 492:	87 e8       	ldi	r24, 0x87	; 135
 494:	93 e1       	ldi	r25, 0x13	; 19
 496:	97 bd       	out	0x27, r25	; 39
 498:	86 bd       	out	0x26, r24	; 38
 49a:	08 95       	ret

0000049c <port_setup>:
}

void port_setup(){
	DDRA = 0xFF;
 49c:	8f ef       	ldi	r24, 0xFF	; 255
 49e:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0x00;
 4a0:	11 ba       	out	0x11, r1	; 17
	DDRB = 0xFF;
 4a2:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xFF;
 4a4:	84 bb       	out	0x14, r24	; 20
	DDRF = 0x00;
 4a6:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRE = 0x00;
 4aa:	12 b8       	out	0x02, r1	; 2
 4ac:	08 95       	ret

000004ae <adc_init>:
}

//ADC 입력
//ADC 초기화
void adc_init(void){
	ADMUX=(1<<REFS0); //외부 레퍼런스 접압을 기준 전압으로 선택, 우측정렬, 초기 입력핀은 0번
 4ae:	80 e4       	ldi	r24, 0x40	; 64
 4b0:	87 b9       	out	0x07, r24	; 7
	ADCSRA=(1<<ADEN)|(0<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //ADC enable, ADC interrupt enable 분주비 128
 4b2:	87 e8       	ldi	r24, 0x87	; 135
 4b4:	86 b9       	out	0x06, r24	; 6
 4b6:	08 95       	ret

000004b8 <ElectroMagnet_On>:
	Sensor_show(); //LED A
}

void ElectroMagnet_On(){
	//PORTC &= (0 << ElectroMagnet);
	PORTC = (PORTC & ~(1<<ElectroMagnet)) | (1<<ElectroMagnet);
 4b8:	85 b3       	in	r24, 0x15	; 21
 4ba:	80 68       	ori	r24, 0x80	; 128
 4bc:	85 bb       	out	0x15, r24	; 21
 4be:	08 95       	ret

000004c0 <ElectroMagnet_Off>:
	//PORTC = 0x7F;
}

void ElectroMagnet_Off(){
	//PORTC |=  (1 << ElectroMagnet);
	PORTC = (PORTC & ~(1<<ElectroMagnet)) | (0<<ElectroMagnet);
 4c0:	85 b3       	in	r24, 0x15	; 21
 4c2:	8f 77       	andi	r24, 0x7F	; 127
 4c4:	85 bb       	out	0x15, r24	; 21
 4c6:	08 95       	ret

000004c8 <main>:
//기정이 일하는 곳
int main(void){
	//debug
	char iter = 0;
	
	cli();
 4c8:	f8 94       	cli
	port_setup();
 4ca:	e8 df       	rcall	.-48     	; 0x49c <port_setup>
	adc_init();
 4cc:	f0 df       	rcall	.-32     	; 0x4ae <adc_init>
	timer0_init();
 4ce:	d5 df       	rcall	.-86     	; 0x47a <timer0_init>
	timer1_init();
 4d0:	dc df       	rcall	.-72     	; 0x48a <timer1_init>
	
	init_BT();
 4d2:	3b de       	rcall	.-906    	; 0x14a <init_BT>
 4d4:	b7 d1       	rcall	.+878    	; 0x844 <UART_init>
	UART_init();
 4d6:	95 d1       	rcall	.+810    	; 0x802 <Reset_sensor_val>
 4d8:	83 e0       	ldi	r24, 0x03	; 3
	
	Reset_sensor_val();
 4da:	89 bf       	out	0x39, r24	; 57
 4dc:	8f e0       	ldi	r24, 0x0F	; 15
	
	//Reset_sensor_val(); //센서 변수 초기화
	
	//EIMSK = 0x03; //External Interrupt Enable Mask
	EIMSK = 0x03;
 4de:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EICRA = 0x0F; //External Interrupt Control Register(Edge)
 4e2:	78 94       	sei
 4e4:	8f ef       	ldi	r24, 0xFF	; 255
 4e6:	84 bb       	out	0x14, r24	; 20

	sei();
	
	DDRC = 0xFF;
 4e8:	15 ba       	out	0x15, r1	; 21
 4ea:	8b bb       	out	0x1b, r24	; 27
	PORTC = 0x00;
 4ec:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <shk_detected>
	PORTA = 0xFF;
	
	shk_detected = 0x00;
 4f0:	e7 df       	rcall	.-50     	; 0x4c0 <ElectroMagnet_Off>
 4f2:	84 e1       	ldi	r24, 0x14	; 20
	
	ElectroMagnet_Off();
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <Servo_increment_threshold+0x1>
	
	Servo_increment_threshold = 20;
 4fa:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <Servo_increment_threshold>
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <Servo_Allowed>
	Servo_Allowed = 0x01;
 504:	8c e6       	ldi	r24, 0x6C	; 108
 506:	92 e0       	ldi	r25, 0x02	; 2
	
	//Servo_Quick_Move(375);
	Servo_pos = SERVO_HOME;
 508:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <Servo_pos+0x1>
 50c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <Servo_pos>
 510:	82 e3       	ldi	r24, 0x32	; 50
	Servo_Set_Speed(50);
 512:	98 de       	rcall	.-720    	; 0x244 <Servo_Set_Speed>
 514:	87 e7       	ldi	r24, 0x77	; 119
 516:	91 e0       	ldi	r25, 0x01	; 1
	Servo_Goto(375);
 518:	64 de       	rcall	.-824    	; 0x1e2 <Servo_Goto>
 51a:	c0 e0       	ldi	r28, 0x00	; 0
 51c:	8f e3       	ldi	r24, 0x3F	; 63
	//PORTC &= 0xFB; //0x1111 1110
	//PORTC &= 0xF3; //0b1111 0010
	
	//0x1111 0011: mask, 
	
	char temp = 0x00;
 51e:	9f e1       	ldi	r25, 0x1F	; 31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 520:	01 97       	sbiw	r24, 0x01	; 1
 522:	f1 f7       	brne	.-4      	; 0x520 <main+0x58>
 524:	00 c0       	rjmp	.+0      	; 0x526 <main+0x5e>
 526:	00 00       	nop
 528:	2d df       	rcall	.-422    	; 0x384 <calc_force>
	int pressure_F = 0;
	while(1){
		_delay_ms(2);

		pressure_F = calc_force();
 52a:	8d 32       	cpi	r24, 0x2D	; 45
 52c:	91 40       	sbci	r25, 0x01	; 1
		//USART0_NUM(pressure_F);
		if(pressure_F > 300){ //pressure
 52e:	2c f0       	brlt	.+10     	; 0x53a <main+0x72>
 530:	c3 df       	rcall	.-122    	; 0x4b8 <ElectroMagnet_On>
			ElectroMagnet_On();
 532:	8b b3       	in	r24, 0x1b	; 27
 534:	8f 77       	andi	r24, 0x7F	; 127
			PORTA &= 0x7F;
 536:	8b bb       	out	0x1b, r24	; 27
 538:	04 c0       	rjmp	.+8      	; 0x542 <main+0x7a>
 53a:	8b b3       	in	r24, 0x1b	; 27
		}
		else{
			PORTA |= 0x80;
 53c:	80 68       	ori	r24, 0x80	; 128
 53e:	8b bb       	out	0x1b, r24	; 27
			ElectroMagnet_Off();
 540:	bf df       	rcall	.-130    	; 0x4c0 <ElectroMagnet_Off>
 542:	c1 11       	cpse	r28, r1
		}
		
		if(temp == 0x00){
 544:	05 c0       	rjmp	.+10     	; 0x550 <main+0x88>
 546:	84 e4       	ldi	r24, 0x44	; 68
			temp=0x01;
			Servo_Goto(SERVO_MAX_POS);
 548:	92 e0       	ldi	r25, 0x02	; 2
 54a:	4b de       	rcall	.-874    	; 0x1e2 <Servo_Goto>
 54c:	c1 e0       	ldi	r28, 0x01	; 1
 54e:	04 c0       	rjmp	.+8      	; 0x558 <main+0x90>
			PORTA |= 0x80;
			ElectroMagnet_Off();
		}
		
		if(temp == 0x00){
			temp=0x01;
 550:	82 e2       	ldi	r24, 0x22	; 34
 552:	91 e0       	ldi	r25, 0x01	; 1
			Servo_Goto(SERVO_MAX_POS);
		}else{
			temp=0x00;
			Servo_Goto(SERVO_MIN_POS);
 554:	46 de       	rcall	.-884    	; 0x1e2 <Servo_Goto>
 556:	c0 e0       	ldi	r28, 0x00	; 0
 558:	80 b3       	in	r24, 0x10	; 16
 55a:	e0 cf       	rjmp	.-64     	; 0x51c <main+0x54>

0000055c <If_Shock_Detected>:
		
		if(temp == 0x00){
			temp=0x01;
			Servo_Goto(SERVO_MAX_POS);
		}else{
			temp=0x00;
 55c:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <shk_sensor_val>
			Servo_Goto(SERVO_MIN_POS);
		}
		
		switch(PIND & 0x03){
 560:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <shk_sensor_val+0x1>
	PORTC = (PORTC & ~(1<<ElectroMagnet)) | (0<<ElectroMagnet);
	//PORTC = 0xFF;
}

void If_Shock_Detected(){
	if(shk_sensor_val <= 900)
 564:	85 38       	cpi	r24, 0x85	; 133
 566:	93 40       	sbci	r25, 0x03	; 3
 568:	18 f4       	brcc	.+6      	; 0x570 <If_Shock_Detected+0x14>
		shk_detected = 0x01;
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <shk_detected>
 570:	08 95       	ret

00000572 <__vector_16>:
	else {
		PORTA |= ~0xBF;
	}
}

ISR(TIMER0_OVF_vect){ //Use Timer0 for collecting sensor value
 572:	1f 92       	push	r1
 574:	0f 92       	push	r0
 576:	0f b6       	in	r0, 0x3f	; 63
 578:	0f 92       	push	r0
 57a:	11 24       	eor	r1, r1
 57c:	0b b6       	in	r0, 0x3b	; 59
 57e:	0f 92       	push	r0
 580:	2f 93       	push	r18
 582:	3f 93       	push	r19
 584:	4f 93       	push	r20
 586:	5f 93       	push	r21
 588:	6f 93       	push	r22
 58a:	7f 93       	push	r23
 58c:	8f 93       	push	r24
 58e:	9f 93       	push	r25
 590:	af 93       	push	r26
 592:	bf 93       	push	r27
 594:	ef 93       	push	r30
 596:	ff 93       	push	r31
	static char idx = 0x01;
	
	switch(idx){
 598:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 59c:	84 30       	cpi	r24, 0x04	; 4
 59e:	c1 f0       	breq	.+48     	; 0x5d0 <__vector_16+0x5e>
 5a0:	28 f4       	brcc	.+10     	; 0x5ac <__vector_16+0x3a>
 5a2:	81 30       	cpi	r24, 0x01	; 1
 5a4:	49 f0       	breq	.+18     	; 0x5b8 <__vector_16+0x46>
 5a6:	82 30       	cpi	r24, 0x02	; 2
 5a8:	61 f0       	breq	.+24     	; 0x5c2 <__vector_16+0x50>
 5aa:	26 c0       	rjmp	.+76     	; 0x5f8 <__vector_16+0x86>
 5ac:	86 30       	cpi	r24, 0x06	; 6
 5ae:	d9 f0       	breq	.+54     	; 0x5e6 <__vector_16+0x74>
 5b0:	a0 f0       	brcs	.+40     	; 0x5da <__vector_16+0x68>
 5b2:	87 30       	cpi	r24, 0x07	; 7
 5b4:	e9 f0       	breq	.+58     	; 0x5f0 <__vector_16+0x7e>
 5b6:	20 c0       	rjmp	.+64     	; 0x5f8 <__vector_16+0x86>
		case 0x01:
			Read_CDS();	
 5b8:	c1 d0       	rcall	.+386    	; 0x73c <Read_CDS>
			//USART0_NUM(cds_sensor_val);
			idx=0x02;
 5ba:	82 e0       	ldi	r24, 0x02	; 2
 5bc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
		
		case 0x02:
			Read_Thermister();
 5c0:	1b c0       	rjmp	.+54     	; 0x5f8 <__vector_16+0x86>
			//USART0_NUM(temp_sensor_val);
			Servo_Set_Speed(calc_speed());
 5c2:	01 d1       	rcall	.+514    	; 0x7c6 <Read_Thermister>
 5c4:	45 de       	rcall	.-886    	; 0x250 <calc_speed>
 5c6:	3e de       	rcall	.-900    	; 0x244 <Servo_Set_Speed>
 5c8:	84 e0       	ldi	r24, 0x04	; 4
			idx=0x04;
 5ca:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
 5ce:	14 c0       	rjmp	.+40     	; 0x5f8 <__vector_16+0x86>
		
		case 0x04:
			Read_Pressure();
 5d0:	eb d0       	rcall	.+470    	; 0x7a8 <Read_Pressure>
			//USART0_NUM(pressure_sensor_val);
			idx=0x05;
 5d2:	85 e0       	ldi	r24, 0x05	; 5
 5d4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
		
		case 0x05:
		
			Read_Shock();
 5d8:	0f c0       	rjmp	.+30     	; 0x5f8 <__vector_16+0x86>
			//if(shk_sensor_val <= 890)
			//	USART0_NUM(shk_sensor_val);
			If_Shock_Detected();
 5da:	04 d1       	rcall	.+520    	; 0x7e4 <Read_Shock>
 5dc:	bf df       	rcall	.-130    	; 0x55c <If_Shock_Detected>
			idx=0x06;
 5de:	86 e0       	ldi	r24, 0x06	; 6
 5e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		break;
		
		case 0x06:
		
			Read_Fire();
 5e4:	09 c0       	rjmp	.+18     	; 0x5f8 <__vector_16+0x86>
 5e6:	b9 d0       	rcall	.+370    	; 0x75a <Read_Fire>
			//If_Fire_Detected();
			//USART0_NUM(fire_sensor_val);
			idx = 0x07;
 5e8:	87 e0       	ldi	r24, 0x07	; 7
 5ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
 5ee:	04 c0       	rjmp	.+8      	; 0x5f8 <__vector_16+0x86>
		
		case 0x07:
		
			Read_PSD();
 5f0:	c3 d0       	rcall	.+390    	; 0x778 <Read_PSD>
 5f2:	81 e0       	ldi	r24, 0x01	; 1
			//USART0_NUM(psd_sensor_val);
			//If_PSD_Detected();

			idx = 0x01;
 5f4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 5f8:	87 b1       	in	r24, 0x07	; 7
		break;
		
	}
	
	//ADC Mux 선택, ADC 시작 시키고 ISR 종료
	ADMUX = (ADMUX & 0x40) | (idx & 0x0F); //다음 센서 선택
 5fa:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 5fe:	9f 70       	andi	r25, 0x0F	; 15
 600:	80 74       	andi	r24, 0x40	; 64
 602:	89 2b       	or	r24, r25
 604:	87 b9       	out	0x07, r24	; 7
 606:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <cds_sensor_val>
	ADMUX=(1<<REFS0); //외부 레퍼런스 접압을 기준 전압으로 선택, 우측정렬, 초기 입력핀은 0번
	ADCSRA=(1<<ADEN)|(0<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //ADC enable, ADC interrupt enable 분주비 128
}

inline void Sensor_show(){
	if (cds_sensor_val > 100) { //CDS
 60a:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <cds_sensor_val+0x1>
 60e:	85 36       	cpi	r24, 0x65	; 101
 610:	91 05       	cpc	r25, r1
 612:	20 f0       	brcs	.+8      	; 0x61c <__vector_16+0xaa>
 614:	8b b3       	in	r24, 0x1b	; 27
		PORTA &= 0xFE; //CDS에 해당하는 LED만 켜기 //1111 1110
 616:	8e 7f       	andi	r24, 0xFE	; 254
 618:	8b bb       	out	0x1b, r24	; 27
 61a:	03 c0       	rjmp	.+6      	; 0x622 <__vector_16+0xb0>
 61c:	8b b3       	in	r24, 0x1b	; 27
	}
	else {
		PORTA |= ~0xFE; //CDS에 해단하는 LED만 끄기
 61e:	81 60       	ori	r24, 0x01	; 1
 620:	8b bb       	out	0x1b, r24	; 27
 622:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <temp_sensor_val>
	}
	
	if (temp_sensor_val > 200) {
 626:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <temp_sensor_val+0x1>
 62a:	89 3c       	cpi	r24, 0xC9	; 201
 62c:	91 05       	cpc	r25, r1
 62e:	20 f0       	brcs	.+8      	; 0x638 <__vector_16+0xc6>
 630:	8b b3       	in	r24, 0x1b	; 27
		PORTA &= 0xFD; // 1111 1101
 632:	8d 7f       	andi	r24, 0xFD	; 253
 634:	8b bb       	out	0x1b, r24	; 27
 636:	03 c0       	rjmp	.+6      	; 0x63e <__vector_16+0xcc>
 638:	8b b3       	in	r24, 0x1b	; 27
	}
	else {
		PORTA |= ~0xFD;
 63a:	82 60       	ori	r24, 0x02	; 2
 63c:	8b bb       	out	0x1b, r24	; 27
 63e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <pressure_sensor_val>
	}
	
	
	
	if (pressure_sensor_val > 900) {//보류 -
 642:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <pressure_sensor_val+0x1>
 646:	85 38       	cpi	r24, 0x85	; 133
 648:	93 40       	sbci	r25, 0x03	; 3
 64a:	20 f0       	brcs	.+8      	; 0x654 <__vector_16+0xe2>
 64c:	8b b3       	in	r24, 0x1b	; 27
		PORTA &= 0xFB; //1111 1011
 64e:	8b 7f       	andi	r24, 0xFB	; 251
 650:	8b bb       	out	0x1b, r24	; 27
 652:	03 c0       	rjmp	.+6      	; 0x65a <__vector_16+0xe8>
 654:	8b b3       	in	r24, 0x1b	; 27
	}
	else {
		PORTA |= ~0xFB;
 656:	84 60       	ori	r24, 0x04	; 4
 658:	8b bb       	out	0x1b, r24	; 27
 65a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <shk_detected>
	}
	
	if ( shk_detected) {
 65e:	88 23       	and	r24, r24
 660:	21 f0       	breq	.+8      	; 0x66a <__vector_16+0xf8>
 662:	8b b3       	in	r24, 0x1b	; 27
		PORTA &= 0xF7;
 664:	87 7f       	andi	r24, 0xF7	; 247
 666:	8b bb       	out	0x1b, r24	; 27
 668:	03 c0       	rjmp	.+6      	; 0x670 <__vector_16+0xfe>
 66a:	8b b3       	in	r24, 0x1b	; 27
		//shk_detected = 0x00;
	}
	else {
		PORTA |= ~0xF7;
 66c:	88 60       	ori	r24, 0x08	; 8
 66e:	8b bb       	out	0x1b, r24	; 27
 670:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <fire_sensor_val>
	}
	
	if (fire_sensor_val > 100) {//-
 674:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <fire_sensor_val+0x1>
 678:	85 36       	cpi	r24, 0x65	; 101
 67a:	91 05       	cpc	r25, r1
 67c:	20 f0       	brcs	.+8      	; 0x686 <__vector_16+0x114>
 67e:	8b b3       	in	r24, 0x1b	; 27
		PORTA &= 0xEF;
 680:	8f 7e       	andi	r24, 0xEF	; 239
 682:	8b bb       	out	0x1b, r24	; 27
 684:	03 c0       	rjmp	.+6      	; 0x68c <__vector_16+0x11a>
 686:	8b b3       	in	r24, 0x1b	; 27
	}
	else {
		PORTA |= ~0xEF;
 688:	80 61       	ori	r24, 0x10	; 16
 68a:	8b bb       	out	0x1b, r24	; 27
 68c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <psd_sensor_val>
	}
	
	
	if ( (psd_sensor_val> 520)) {
 690:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <psd_sensor_val+0x1>
 694:	89 30       	cpi	r24, 0x09	; 9
 696:	92 40       	sbci	r25, 0x02	; 2
 698:	20 f0       	brcs	.+8      	; 0x6a2 <__vector_16+0x130>
 69a:	8b b3       	in	r24, 0x1b	; 27
		
		PORTA &= 0xBF;
 69c:	8f 7b       	andi	r24, 0xBF	; 191
 69e:	8b bb       	out	0x1b, r24	; 27
 6a0:	03 c0       	rjmp	.+6      	; 0x6a8 <__vector_16+0x136>
 6a2:	8b b3       	in	r24, 0x1b	; 27
	}
	else {
		PORTA |= ~0xBF;
 6a4:	80 64       	ori	r24, 0x40	; 64
 6a6:	8b bb       	out	0x1b, r24	; 27
 6a8:	ff 91       	pop	r31
	//ADC Mux 선택, ADC 시작 시키고 ISR 종료
	ADMUX = (ADMUX & 0x40) | (idx & 0x0F); //다음 센서 선택
	//ADCSRA |= (1 << ADSC); // ADC 변환 시작
	
	Sensor_show(); //LED A
}
 6aa:	ef 91       	pop	r30
 6ac:	bf 91       	pop	r27
 6ae:	af 91       	pop	r26
 6b0:	9f 91       	pop	r25
 6b2:	8f 91       	pop	r24
 6b4:	7f 91       	pop	r23
 6b6:	6f 91       	pop	r22
 6b8:	5f 91       	pop	r21
 6ba:	4f 91       	pop	r20
 6bc:	3f 91       	pop	r19
 6be:	2f 91       	pop	r18
 6c0:	0f 90       	pop	r0
 6c2:	0b be       	out	0x3b, r0	; 59
 6c4:	0f 90       	pop	r0
 6c6:	0f be       	out	0x3f, r0	; 63
 6c8:	0f 90       	pop	r0
 6ca:	1f 90       	pop	r1
 6cc:	18 95       	reti

000006ce <lpf>:
 6ce:	8f 92       	push	r8
	return (unsigned short)(alpha * new_value + (1 - alpha) * current_value);
}

unsigned short hpf(unsigned short previous_value, unsigned short new_value, float alpha) {
	return (unsigned short)(alpha * (previous_value + new_value) - previous_value);
}
 6d0:	9f 92       	push	r9
 6d2:	af 92       	push	r10
 6d4:	bf 92       	push	r11
 6d6:	cf 92       	push	r12
 6d8:	df 92       	push	r13
 6da:	ef 92       	push	r14
 6dc:	ff 92       	push	r15
 6de:	cf 93       	push	r28
 6e0:	df 93       	push	r29
 6e2:	ec 01       	movw	r28, r24
 6e4:	69 01       	movw	r12, r18
 6e6:	7a 01       	movw	r14, r20
 6e8:	80 e0       	ldi	r24, 0x00	; 0
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	bc d1       	rcall	.+888    	; 0xa66 <__floatunsisf>
 6ee:	a7 01       	movw	r20, r14
 6f0:	96 01       	movw	r18, r12
 6f2:	b4 d2       	rcall	.+1384   	; 0xc5c <__mulsf3>
 6f4:	4b 01       	movw	r8, r22
 6f6:	5c 01       	movw	r10, r24
 6f8:	a7 01       	movw	r20, r14
 6fa:	96 01       	movw	r18, r12
 6fc:	60 e0       	ldi	r22, 0x00	; 0
 6fe:	70 e0       	ldi	r23, 0x00	; 0
 700:	80 e8       	ldi	r24, 0x80	; 128
 702:	9f e3       	ldi	r25, 0x3F	; 63
 704:	ae d0       	rcall	.+348    	; 0x862 <__subsf3>
 706:	6b 01       	movw	r12, r22
 708:	7c 01       	movw	r14, r24
 70a:	be 01       	movw	r22, r28
 70c:	80 e0       	ldi	r24, 0x00	; 0
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	aa d1       	rcall	.+852    	; 0xa66 <__floatunsisf>
 712:	a7 01       	movw	r20, r14
 714:	96 01       	movw	r18, r12
 716:	a2 d2       	rcall	.+1348   	; 0xc5c <__mulsf3>
 718:	9b 01       	movw	r18, r22
 71a:	ac 01       	movw	r20, r24
 71c:	c5 01       	movw	r24, r10
 71e:	b4 01       	movw	r22, r8
 720:	a1 d0       	rcall	.+322    	; 0x864 <__addsf3>
 722:	75 d1       	rcall	.+746    	; 0xa0e <__fixunssfsi>
 724:	cb 01       	movw	r24, r22
 726:	df 91       	pop	r29
 728:	cf 91       	pop	r28
 72a:	ff 90       	pop	r15
 72c:	ef 90       	pop	r14
 72e:	df 90       	pop	r13
 730:	cf 90       	pop	r12
 732:	bf 90       	pop	r11
 734:	af 90       	pop	r10
 736:	9f 90       	pop	r9
 738:	8f 90       	pop	r8
 73a:	08 95       	ret

0000073c <Read_CDS>:

inline void Read_CDS(){
	ADCSRA |= (1 << ADSC); // ADC 변환 시작
 73c:	86 b1       	in	r24, 0x06	; 6
 73e:	80 64       	ori	r24, 0x40	; 64
 740:	86 b9       	out	0x06, r24	; 6
	while(!(ADCSRA & (1 << ADIF))); // ADC 변환 완료 플래그가 설정될 때까지 기다림
 742:	34 9b       	sbis	0x06, 4	; 6
 744:	fe cf       	rjmp	.-4      	; 0x742 <Read_CDS+0x6>
	ADCSRA |= (1<< ADIF); // ADC 변환 완료 플래그 클리어
 746:	86 b1       	in	r24, 0x06	; 6
 748:	80 61       	ori	r24, 0x10	; 16
 74a:	86 b9       	out	0x06, r24	; 6
	/*static unsigned short previous_value = 0;
	cds_sensor_val = lpf(previous_value, ADC, 0.1);
	previous_value = cds_sensor_val;*/
	cds_sensor_val=ADC;
 74c:	84 b1       	in	r24, 0x04	; 4
 74e:	95 b1       	in	r25, 0x05	; 5
 750:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <cds_sensor_val+0x1>
 754:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <cds_sensor_val>
 758:	08 95       	ret

0000075a <Read_Fire>:

	//필터링 해야됨
}

inline void Read_Fire(){
	ADCSRA |= (1 << ADSC); // ADC 변환 시작
 75a:	86 b1       	in	r24, 0x06	; 6
 75c:	80 64       	ori	r24, 0x40	; 64
 75e:	86 b9       	out	0x06, r24	; 6
	while(!(ADCSRA & (1 << ADIF))); // ADC 변환 완료 플래그가 설정될 때까지 기다림
 760:	34 9b       	sbis	0x06, 4	; 6
 762:	fe cf       	rjmp	.-4      	; 0x760 <Read_Fire+0x6>
	ADCSRA |= (1 << ADIF); // ADC 변환 완료 플래그 클리어
 764:	86 b1       	in	r24, 0x06	; 6
 766:	80 61       	ori	r24, 0x10	; 16
 768:	86 b9       	out	0x06, r24	; 6
	//static unsigned short previous_value = 0;
	fire_sensor_val = ADC;//lpf(previous_value, ADC, 0.1);
 76a:	84 b1       	in	r24, 0x04	; 4
 76c:	95 b1       	in	r25, 0x05	; 5
 76e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <fire_sensor_val+0x1>
 772:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <fire_sensor_val>
 776:	08 95       	ret

00000778 <Read_PSD>:
	//previous_value = fire_sensor_val;
	//필터링 해야됨
}
inline void Read_PSD(){
	ADCSRA |= (1 << ADSC); // ADC 변환 시작
 778:	86 b1       	in	r24, 0x06	; 6
 77a:	80 64       	ori	r24, 0x40	; 64
 77c:	86 b9       	out	0x06, r24	; 6
	while(!(ADCSRA & (1 << ADIF))); // ADC 변환 완료 플래그가 설정될 때까지 기다림
 77e:	34 9b       	sbis	0x06, 4	; 6
 780:	fe cf       	rjmp	.-4      	; 0x77e <Read_PSD+0x6>
	ADCSRA |= (1 << ADIF); // ADC 변환 완료 플래그 클리어
 782:	86 b1       	in	r24, 0x06	; 6
 784:	80 61       	ori	r24, 0x10	; 16
 786:	86 b9       	out	0x06, r24	; 6
	static unsigned short previous_value = 0;
	//psd_sensor_val = ADC;
	psd_sensor_val = lpf(psd_sensor_val, ADC, 0.2);
 788:	64 b1       	in	r22, 0x04	; 4
 78a:	75 b1       	in	r23, 0x05	; 5
 78c:	2d ec       	ldi	r18, 0xCD	; 205
 78e:	3c ec       	ldi	r19, 0xCC	; 204
 790:	4c e4       	ldi	r20, 0x4C	; 76
 792:	5e e3       	ldi	r21, 0x3E	; 62
 794:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <psd_sensor_val>
 798:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <psd_sensor_val+0x1>
 79c:	98 df       	rcall	.-208    	; 0x6ce <lpf>
 79e:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <psd_sensor_val+0x1>
 7a2:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <psd_sensor_val>
 7a6:	08 95       	ret

000007a8 <Read_Pressure>:
	//psd_sensor_val = previous_value;
	//필터링 해야됨
}

inline void Read_Pressure(){
	ADCSRA |= (1 << ADSC); // ADC 변환 시작
 7a8:	86 b1       	in	r24, 0x06	; 6
 7aa:	80 64       	ori	r24, 0x40	; 64
 7ac:	86 b9       	out	0x06, r24	; 6
	while(!(ADCSRA & (1 << ADIF))); // ADC 변환 완료 플래그가 설정될 때까지 기다림
 7ae:	34 9b       	sbis	0x06, 4	; 6
 7b0:	fe cf       	rjmp	.-4      	; 0x7ae <Read_Pressure+0x6>
	ADCSRA |= (1 << ADIF); // ADC 변환 완료 플래그 클리어
 7b2:	86 b1       	in	r24, 0x06	; 6
 7b4:	80 61       	ori	r24, 0x10	; 16
 7b6:	86 b9       	out	0x06, r24	; 6
	//static uint16_t previous_value = 0;
	pressure_sensor_val = ADC;//lpf(previous_value, ADC, 1);
 7b8:	84 b1       	in	r24, 0x04	; 4
 7ba:	95 b1       	in	r25, 0x05	; 5
 7bc:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <pressure_sensor_val+0x1>
 7c0:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <pressure_sensor_val>
 7c4:	08 95       	ret

000007c6 <Read_Thermister>:
	//previous_value = pressure_sensor_val;
	//필터링 해야됨
}

inline void Read_Thermister(){
	ADCSRA |= (1 << ADSC); // ADC 변환 시작
 7c6:	86 b1       	in	r24, 0x06	; 6
 7c8:	80 64       	ori	r24, 0x40	; 64
 7ca:	86 b9       	out	0x06, r24	; 6
	while(!(ADCSRA & (1 << ADIF))); // ADC 변환 완료 플래그가 설정될 때까지 기다림
 7cc:	34 9b       	sbis	0x06, 4	; 6
 7ce:	fe cf       	rjmp	.-4      	; 0x7cc <Read_Thermister+0x6>
	ADCSRA |= (1 << ADIF); // ADC 변환 완료 플래그 클리어
 7d0:	86 b1       	in	r24, 0x06	; 6
 7d2:	80 61       	ori	r24, 0x10	; 16
 7d4:	86 b9       	out	0x06, r24	; 6
	//static unsigned short previous_value = 0;
	temp_sensor_val = ADC;//lpf(previous_value, ADC, 1);
 7d6:	84 b1       	in	r24, 0x04	; 4
 7d8:	95 b1       	in	r25, 0x05	; 5
 7da:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <temp_sensor_val+0x1>
 7de:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <temp_sensor_val>
 7e2:	08 95       	ret

000007e4 <Read_Shock>:
	//previous_value = temp_sensor_val;
	//필터링 해야됨
}

inline void Read_Shock(){
	ADCSRA |= (1 << ADSC); // ADC 변환 시작
 7e4:	86 b1       	in	r24, 0x06	; 6
 7e6:	80 64       	ori	r24, 0x40	; 64
 7e8:	86 b9       	out	0x06, r24	; 6
	while(!(ADCSRA & (1 << ADIF))); // ADC 변환 완료 플래그가 설정될 때까지 기다림
 7ea:	34 9b       	sbis	0x06, 4	; 6
 7ec:	fe cf       	rjmp	.-4      	; 0x7ea <Read_Shock+0x6>
	ADCSRA |= (1 << ADIF); // ADC 변환 완료 플래그 클리어
 7ee:	86 b1       	in	r24, 0x06	; 6
 7f0:	80 61       	ori	r24, 0x10	; 16
 7f2:	86 b9       	out	0x06, r24	; 6
	//static unsigned short previous_value = 0;
	shk_sensor_val = ADC;//hpf(previous_value, ADC, 1);
 7f4:	84 b1       	in	r24, 0x04	; 4
 7f6:	95 b1       	in	r25, 0x05	; 5
 7f8:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <shk_sensor_val+0x1>
 7fc:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <shk_sensor_val>
 800:	08 95       	ret

00000802 <Reset_sensor_val>:
	//previous_value = shk_sensor_val;
	//필터링 해야됨
}

inline void Reset_sensor_val(){
	pressure_sensor_val = 0;
 802:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <pressure_sensor_val+0x1>
 806:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <pressure_sensor_val>
	cds_sensor_val	= 0;
 80a:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <cds_sensor_val+0x1>
 80e:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <cds_sensor_val>
	temp_sensor_val = 0;	temp_en = 0;
 812:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <temp_sensor_val+0x1>
 816:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <temp_sensor_val>
 81a:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <temp_en+0x1>
 81e:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <temp_en>
	shk_sensor_val	= 0;	shk_detected = 0;
 822:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <shk_sensor_val+0x1>
 826:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <shk_sensor_val>
 82a:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <shk_detected>
	psd_sensor_val	= 0;
 82e:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <psd_sensor_val+0x1>
 832:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <psd_sensor_val>
	fire_sensor_val	= 0;	Fire_Detected = 0;
 836:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <fire_sensor_val+0x1>
 83a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <fire_sensor_val>
 83e:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <Fire_Detected>
 842:	08 95       	ret

00000844 <UART_init>:
#include "uart.h"

#define UBRR 103

void UART_init(){
	UBRR0L = (unsigned char)UBRR;
 844:	87 e6       	ldi	r24, 0x67	; 103
 846:	89 b9       	out	0x09, r24	; 9
	UBRR0H = (unsigned char)(UBRR >> 8);
 848:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>

	
	UCSR0A = 0x00; //비동기 1배속
 84c:	1b b8       	out	0x0b, r1	; 11
	UCSR0B = 0x18; //송수신 허가
 84e:	88 e1       	ldi	r24, 0x18	; 24
 850:	8a b9       	out	0x0a, r24	; 10
	//UCSR0B = (1<<RXCIE0)|(1<<TXCIE0)|(1<<RXEN0)|(1<<TXEN0); //recv complete interrupt enable
	UCSR0C = 0x87; //비동기, non-parity mode, stop bit:1 bit, data: 8bit
 852:	87 e8       	ldi	r24, 0x87	; 135
 854:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 858:	08 95       	ret

0000085a <__vector_20>:
}

void USART0_TX_vect(unsigned char data){
	while(!(UCSR0A & (1<<UDRE0)));
 85a:	5d 9b       	sbis	0x0b, 5	; 11
 85c:	fe cf       	rjmp	.-4      	; 0x85a <__vector_20>
	UDR0 = data;
 85e:	8c b9       	out	0x0c, r24	; 12
 860:	08 95       	ret

00000862 <__subsf3>:
 862:	50 58       	subi	r21, 0x80	; 128

00000864 <__addsf3>:
 864:	bb 27       	eor	r27, r27
 866:	aa 27       	eor	r26, r26
 868:	0e d0       	rcall	.+28     	; 0x886 <__addsf3x>
 86a:	75 c1       	rjmp	.+746    	; 0xb56 <__fp_round>
 86c:	66 d1       	rcall	.+716    	; 0xb3a <__fp_pscA>
 86e:	30 f0       	brcs	.+12     	; 0x87c <__addsf3+0x18>
 870:	6b d1       	rcall	.+726    	; 0xb48 <__fp_pscB>
 872:	20 f0       	brcs	.+8      	; 0x87c <__addsf3+0x18>
 874:	31 f4       	brne	.+12     	; 0x882 <__addsf3+0x1e>
 876:	9f 3f       	cpi	r25, 0xFF	; 255
 878:	11 f4       	brne	.+4      	; 0x87e <__addsf3+0x1a>
 87a:	1e f4       	brtc	.+6      	; 0x882 <__addsf3+0x1e>
 87c:	5b c1       	rjmp	.+694    	; 0xb34 <__fp_nan>
 87e:	0e f4       	brtc	.+2      	; 0x882 <__addsf3+0x1e>
 880:	e0 95       	com	r30
 882:	e7 fb       	bst	r30, 7
 884:	51 c1       	rjmp	.+674    	; 0xb28 <__fp_inf>

00000886 <__addsf3x>:
 886:	e9 2f       	mov	r30, r25
 888:	77 d1       	rcall	.+750    	; 0xb78 <__fp_split3>
 88a:	80 f3       	brcs	.-32     	; 0x86c <__addsf3+0x8>
 88c:	ba 17       	cp	r27, r26
 88e:	62 07       	cpc	r22, r18
 890:	73 07       	cpc	r23, r19
 892:	84 07       	cpc	r24, r20
 894:	95 07       	cpc	r25, r21
 896:	18 f0       	brcs	.+6      	; 0x89e <__addsf3x+0x18>
 898:	71 f4       	brne	.+28     	; 0x8b6 <__addsf3x+0x30>
 89a:	9e f5       	brtc	.+102    	; 0x902 <__addsf3x+0x7c>
 89c:	8f c1       	rjmp	.+798    	; 0xbbc <__fp_zero>
 89e:	0e f4       	brtc	.+2      	; 0x8a2 <__addsf3x+0x1c>
 8a0:	e0 95       	com	r30
 8a2:	0b 2e       	mov	r0, r27
 8a4:	ba 2f       	mov	r27, r26
 8a6:	a0 2d       	mov	r26, r0
 8a8:	0b 01       	movw	r0, r22
 8aa:	b9 01       	movw	r22, r18
 8ac:	90 01       	movw	r18, r0
 8ae:	0c 01       	movw	r0, r24
 8b0:	ca 01       	movw	r24, r20
 8b2:	a0 01       	movw	r20, r0
 8b4:	11 24       	eor	r1, r1
 8b6:	ff 27       	eor	r31, r31
 8b8:	59 1b       	sub	r21, r25
 8ba:	99 f0       	breq	.+38     	; 0x8e2 <__addsf3x+0x5c>
 8bc:	59 3f       	cpi	r21, 0xF9	; 249
 8be:	50 f4       	brcc	.+20     	; 0x8d4 <__addsf3x+0x4e>
 8c0:	50 3e       	cpi	r21, 0xE0	; 224
 8c2:	68 f1       	brcs	.+90     	; 0x91e <__addsf3x+0x98>
 8c4:	1a 16       	cp	r1, r26
 8c6:	f0 40       	sbci	r31, 0x00	; 0
 8c8:	a2 2f       	mov	r26, r18
 8ca:	23 2f       	mov	r18, r19
 8cc:	34 2f       	mov	r19, r20
 8ce:	44 27       	eor	r20, r20
 8d0:	58 5f       	subi	r21, 0xF8	; 248
 8d2:	f3 cf       	rjmp	.-26     	; 0x8ba <__addsf3x+0x34>
 8d4:	46 95       	lsr	r20
 8d6:	37 95       	ror	r19
 8d8:	27 95       	ror	r18
 8da:	a7 95       	ror	r26
 8dc:	f0 40       	sbci	r31, 0x00	; 0
 8de:	53 95       	inc	r21
 8e0:	c9 f7       	brne	.-14     	; 0x8d4 <__addsf3x+0x4e>
 8e2:	7e f4       	brtc	.+30     	; 0x902 <__addsf3x+0x7c>
 8e4:	1f 16       	cp	r1, r31
 8e6:	ba 0b       	sbc	r27, r26
 8e8:	62 0b       	sbc	r22, r18
 8ea:	73 0b       	sbc	r23, r19
 8ec:	84 0b       	sbc	r24, r20
 8ee:	ba f0       	brmi	.+46     	; 0x91e <__addsf3x+0x98>
 8f0:	91 50       	subi	r25, 0x01	; 1
 8f2:	a1 f0       	breq	.+40     	; 0x91c <__addsf3x+0x96>
 8f4:	ff 0f       	add	r31, r31
 8f6:	bb 1f       	adc	r27, r27
 8f8:	66 1f       	adc	r22, r22
 8fa:	77 1f       	adc	r23, r23
 8fc:	88 1f       	adc	r24, r24
 8fe:	c2 f7       	brpl	.-16     	; 0x8f0 <__addsf3x+0x6a>
 900:	0e c0       	rjmp	.+28     	; 0x91e <__addsf3x+0x98>
 902:	ba 0f       	add	r27, r26
 904:	62 1f       	adc	r22, r18
 906:	73 1f       	adc	r23, r19
 908:	84 1f       	adc	r24, r20
 90a:	48 f4       	brcc	.+18     	; 0x91e <__addsf3x+0x98>
 90c:	87 95       	ror	r24
 90e:	77 95       	ror	r23
 910:	67 95       	ror	r22
 912:	b7 95       	ror	r27
 914:	f7 95       	ror	r31
 916:	9e 3f       	cpi	r25, 0xFE	; 254
 918:	08 f0       	brcs	.+2      	; 0x91c <__addsf3x+0x96>
 91a:	b3 cf       	rjmp	.-154    	; 0x882 <__addsf3+0x1e>
 91c:	93 95       	inc	r25
 91e:	88 0f       	add	r24, r24
 920:	08 f0       	brcs	.+2      	; 0x924 <__addsf3x+0x9e>
 922:	99 27       	eor	r25, r25
 924:	ee 0f       	add	r30, r30
 926:	97 95       	ror	r25
 928:	87 95       	ror	r24
 92a:	08 95       	ret

0000092c <__cmpsf2>:
 92c:	d9 d0       	rcall	.+434    	; 0xae0 <__fp_cmp>
 92e:	08 f4       	brcc	.+2      	; 0x932 <__cmpsf2+0x6>
 930:	81 e0       	ldi	r24, 0x01	; 1
 932:	08 95       	ret

00000934 <__divsf3>:
 934:	0c d0       	rcall	.+24     	; 0x94e <__divsf3x>
 936:	0f c1       	rjmp	.+542    	; 0xb56 <__fp_round>
 938:	07 d1       	rcall	.+526    	; 0xb48 <__fp_pscB>
 93a:	40 f0       	brcs	.+16     	; 0x94c <__divsf3+0x18>
 93c:	fe d0       	rcall	.+508    	; 0xb3a <__fp_pscA>
 93e:	30 f0       	brcs	.+12     	; 0x94c <__divsf3+0x18>
 940:	21 f4       	brne	.+8      	; 0x94a <__divsf3+0x16>
 942:	5f 3f       	cpi	r21, 0xFF	; 255
 944:	19 f0       	breq	.+6      	; 0x94c <__divsf3+0x18>
 946:	f0 c0       	rjmp	.+480    	; 0xb28 <__fp_inf>
 948:	51 11       	cpse	r21, r1
 94a:	39 c1       	rjmp	.+626    	; 0xbbe <__fp_szero>
 94c:	f3 c0       	rjmp	.+486    	; 0xb34 <__fp_nan>

0000094e <__divsf3x>:
 94e:	14 d1       	rcall	.+552    	; 0xb78 <__fp_split3>
 950:	98 f3       	brcs	.-26     	; 0x938 <__divsf3+0x4>

00000952 <__divsf3_pse>:
 952:	99 23       	and	r25, r25
 954:	c9 f3       	breq	.-14     	; 0x948 <__divsf3+0x14>
 956:	55 23       	and	r21, r21
 958:	b1 f3       	breq	.-20     	; 0x946 <__divsf3+0x12>
 95a:	95 1b       	sub	r25, r21
 95c:	55 0b       	sbc	r21, r21
 95e:	bb 27       	eor	r27, r27
 960:	aa 27       	eor	r26, r26
 962:	62 17       	cp	r22, r18
 964:	73 07       	cpc	r23, r19
 966:	84 07       	cpc	r24, r20
 968:	38 f0       	brcs	.+14     	; 0x978 <__divsf3_pse+0x26>
 96a:	9f 5f       	subi	r25, 0xFF	; 255
 96c:	5f 4f       	sbci	r21, 0xFF	; 255
 96e:	22 0f       	add	r18, r18
 970:	33 1f       	adc	r19, r19
 972:	44 1f       	adc	r20, r20
 974:	aa 1f       	adc	r26, r26
 976:	a9 f3       	breq	.-22     	; 0x962 <__divsf3_pse+0x10>
 978:	33 d0       	rcall	.+102    	; 0x9e0 <__divsf3_pse+0x8e>
 97a:	0e 2e       	mov	r0, r30
 97c:	3a f0       	brmi	.+14     	; 0x98c <__divsf3_pse+0x3a>
 97e:	e0 e8       	ldi	r30, 0x80	; 128
 980:	30 d0       	rcall	.+96     	; 0x9e2 <__divsf3_pse+0x90>
 982:	91 50       	subi	r25, 0x01	; 1
 984:	50 40       	sbci	r21, 0x00	; 0
 986:	e6 95       	lsr	r30
 988:	00 1c       	adc	r0, r0
 98a:	ca f7       	brpl	.-14     	; 0x97e <__divsf3_pse+0x2c>
 98c:	29 d0       	rcall	.+82     	; 0x9e0 <__divsf3_pse+0x8e>
 98e:	fe 2f       	mov	r31, r30
 990:	27 d0       	rcall	.+78     	; 0x9e0 <__divsf3_pse+0x8e>
 992:	66 0f       	add	r22, r22
 994:	77 1f       	adc	r23, r23
 996:	88 1f       	adc	r24, r24
 998:	bb 1f       	adc	r27, r27
 99a:	26 17       	cp	r18, r22
 99c:	37 07       	cpc	r19, r23
 99e:	48 07       	cpc	r20, r24
 9a0:	ab 07       	cpc	r26, r27
 9a2:	b0 e8       	ldi	r27, 0x80	; 128
 9a4:	09 f0       	breq	.+2      	; 0x9a8 <__divsf3_pse+0x56>
 9a6:	bb 0b       	sbc	r27, r27
 9a8:	80 2d       	mov	r24, r0
 9aa:	bf 01       	movw	r22, r30
 9ac:	ff 27       	eor	r31, r31
 9ae:	93 58       	subi	r25, 0x83	; 131
 9b0:	5f 4f       	sbci	r21, 0xFF	; 255
 9b2:	2a f0       	brmi	.+10     	; 0x9be <__divsf3_pse+0x6c>
 9b4:	9e 3f       	cpi	r25, 0xFE	; 254
 9b6:	51 05       	cpc	r21, r1
 9b8:	68 f0       	brcs	.+26     	; 0x9d4 <__divsf3_pse+0x82>
 9ba:	b6 c0       	rjmp	.+364    	; 0xb28 <__fp_inf>
 9bc:	00 c1       	rjmp	.+512    	; 0xbbe <__fp_szero>
 9be:	5f 3f       	cpi	r21, 0xFF	; 255
 9c0:	ec f3       	brlt	.-6      	; 0x9bc <__divsf3_pse+0x6a>
 9c2:	98 3e       	cpi	r25, 0xE8	; 232
 9c4:	dc f3       	brlt	.-10     	; 0x9bc <__divsf3_pse+0x6a>
 9c6:	86 95       	lsr	r24
 9c8:	77 95       	ror	r23
 9ca:	67 95       	ror	r22
 9cc:	b7 95       	ror	r27
 9ce:	f7 95       	ror	r31
 9d0:	9f 5f       	subi	r25, 0xFF	; 255
 9d2:	c9 f7       	brne	.-14     	; 0x9c6 <__divsf3_pse+0x74>
 9d4:	88 0f       	add	r24, r24
 9d6:	91 1d       	adc	r25, r1
 9d8:	96 95       	lsr	r25
 9da:	87 95       	ror	r24
 9dc:	97 f9       	bld	r25, 7
 9de:	08 95       	ret
 9e0:	e1 e0       	ldi	r30, 0x01	; 1
 9e2:	66 0f       	add	r22, r22
 9e4:	77 1f       	adc	r23, r23
 9e6:	88 1f       	adc	r24, r24
 9e8:	bb 1f       	adc	r27, r27
 9ea:	62 17       	cp	r22, r18
 9ec:	73 07       	cpc	r23, r19
 9ee:	84 07       	cpc	r24, r20
 9f0:	ba 07       	cpc	r27, r26
 9f2:	20 f0       	brcs	.+8      	; 0x9fc <__divsf3_pse+0xaa>
 9f4:	62 1b       	sub	r22, r18
 9f6:	73 0b       	sbc	r23, r19
 9f8:	84 0b       	sbc	r24, r20
 9fa:	ba 0b       	sbc	r27, r26
 9fc:	ee 1f       	adc	r30, r30
 9fe:	88 f7       	brcc	.-30     	; 0x9e2 <__divsf3_pse+0x90>
 a00:	e0 95       	com	r30
 a02:	08 95       	ret

00000a04 <__fixsfsi>:
 a04:	04 d0       	rcall	.+8      	; 0xa0e <__fixunssfsi>
 a06:	68 94       	set
 a08:	b1 11       	cpse	r27, r1
 a0a:	d9 c0       	rjmp	.+434    	; 0xbbe <__fp_szero>
 a0c:	08 95       	ret

00000a0e <__fixunssfsi>:
 a0e:	bc d0       	rcall	.+376    	; 0xb88 <__fp_splitA>
 a10:	88 f0       	brcs	.+34     	; 0xa34 <__fixunssfsi+0x26>
 a12:	9f 57       	subi	r25, 0x7F	; 127
 a14:	90 f0       	brcs	.+36     	; 0xa3a <__fixunssfsi+0x2c>
 a16:	b9 2f       	mov	r27, r25
 a18:	99 27       	eor	r25, r25
 a1a:	b7 51       	subi	r27, 0x17	; 23
 a1c:	a0 f0       	brcs	.+40     	; 0xa46 <__fixunssfsi+0x38>
 a1e:	d1 f0       	breq	.+52     	; 0xa54 <__fixunssfsi+0x46>
 a20:	66 0f       	add	r22, r22
 a22:	77 1f       	adc	r23, r23
 a24:	88 1f       	adc	r24, r24
 a26:	99 1f       	adc	r25, r25
 a28:	1a f0       	brmi	.+6      	; 0xa30 <__fixunssfsi+0x22>
 a2a:	ba 95       	dec	r27
 a2c:	c9 f7       	brne	.-14     	; 0xa20 <__fixunssfsi+0x12>
 a2e:	12 c0       	rjmp	.+36     	; 0xa54 <__fixunssfsi+0x46>
 a30:	b1 30       	cpi	r27, 0x01	; 1
 a32:	81 f0       	breq	.+32     	; 0xa54 <__fixunssfsi+0x46>
 a34:	c3 d0       	rcall	.+390    	; 0xbbc <__fp_zero>
 a36:	b1 e0       	ldi	r27, 0x01	; 1
 a38:	08 95       	ret
 a3a:	c0 c0       	rjmp	.+384    	; 0xbbc <__fp_zero>
 a3c:	67 2f       	mov	r22, r23
 a3e:	78 2f       	mov	r23, r24
 a40:	88 27       	eor	r24, r24
 a42:	b8 5f       	subi	r27, 0xF8	; 248
 a44:	39 f0       	breq	.+14     	; 0xa54 <__fixunssfsi+0x46>
 a46:	b9 3f       	cpi	r27, 0xF9	; 249
 a48:	cc f3       	brlt	.-14     	; 0xa3c <__fixunssfsi+0x2e>
 a4a:	86 95       	lsr	r24
 a4c:	77 95       	ror	r23
 a4e:	67 95       	ror	r22
 a50:	b3 95       	inc	r27
 a52:	d9 f7       	brne	.-10     	; 0xa4a <__fixunssfsi+0x3c>
 a54:	3e f4       	brtc	.+14     	; 0xa64 <__fixunssfsi+0x56>
 a56:	90 95       	com	r25
 a58:	80 95       	com	r24
 a5a:	70 95       	com	r23
 a5c:	61 95       	neg	r22
 a5e:	7f 4f       	sbci	r23, 0xFF	; 255
 a60:	8f 4f       	sbci	r24, 0xFF	; 255
 a62:	9f 4f       	sbci	r25, 0xFF	; 255
 a64:	08 95       	ret

00000a66 <__floatunsisf>:
 a66:	e8 94       	clt
 a68:	09 c0       	rjmp	.+18     	; 0xa7c <__floatsisf+0x12>

00000a6a <__floatsisf>:
 a6a:	97 fb       	bst	r25, 7
 a6c:	3e f4       	brtc	.+14     	; 0xa7c <__floatsisf+0x12>
 a6e:	90 95       	com	r25
 a70:	80 95       	com	r24
 a72:	70 95       	com	r23
 a74:	61 95       	neg	r22
 a76:	7f 4f       	sbci	r23, 0xFF	; 255
 a78:	8f 4f       	sbci	r24, 0xFF	; 255
 a7a:	9f 4f       	sbci	r25, 0xFF	; 255
 a7c:	99 23       	and	r25, r25
 a7e:	a9 f0       	breq	.+42     	; 0xaaa <__floatsisf+0x40>
 a80:	f9 2f       	mov	r31, r25
 a82:	96 e9       	ldi	r25, 0x96	; 150
 a84:	bb 27       	eor	r27, r27
 a86:	93 95       	inc	r25
 a88:	f6 95       	lsr	r31
 a8a:	87 95       	ror	r24
 a8c:	77 95       	ror	r23
 a8e:	67 95       	ror	r22
 a90:	b7 95       	ror	r27
 a92:	f1 11       	cpse	r31, r1
 a94:	f8 cf       	rjmp	.-16     	; 0xa86 <__floatsisf+0x1c>
 a96:	fa f4       	brpl	.+62     	; 0xad6 <__floatsisf+0x6c>
 a98:	bb 0f       	add	r27, r27
 a9a:	11 f4       	brne	.+4      	; 0xaa0 <__floatsisf+0x36>
 a9c:	60 ff       	sbrs	r22, 0
 a9e:	1b c0       	rjmp	.+54     	; 0xad6 <__floatsisf+0x6c>
 aa0:	6f 5f       	subi	r22, 0xFF	; 255
 aa2:	7f 4f       	sbci	r23, 0xFF	; 255
 aa4:	8f 4f       	sbci	r24, 0xFF	; 255
 aa6:	9f 4f       	sbci	r25, 0xFF	; 255
 aa8:	16 c0       	rjmp	.+44     	; 0xad6 <__floatsisf+0x6c>
 aaa:	88 23       	and	r24, r24
 aac:	11 f0       	breq	.+4      	; 0xab2 <__floatsisf+0x48>
 aae:	96 e9       	ldi	r25, 0x96	; 150
 ab0:	11 c0       	rjmp	.+34     	; 0xad4 <__floatsisf+0x6a>
 ab2:	77 23       	and	r23, r23
 ab4:	21 f0       	breq	.+8      	; 0xabe <__floatsisf+0x54>
 ab6:	9e e8       	ldi	r25, 0x8E	; 142
 ab8:	87 2f       	mov	r24, r23
 aba:	76 2f       	mov	r23, r22
 abc:	05 c0       	rjmp	.+10     	; 0xac8 <__floatsisf+0x5e>
 abe:	66 23       	and	r22, r22
 ac0:	71 f0       	breq	.+28     	; 0xade <__floatsisf+0x74>
 ac2:	96 e8       	ldi	r25, 0x86	; 134
 ac4:	86 2f       	mov	r24, r22
 ac6:	70 e0       	ldi	r23, 0x00	; 0
 ac8:	60 e0       	ldi	r22, 0x00	; 0
 aca:	2a f0       	brmi	.+10     	; 0xad6 <__floatsisf+0x6c>
 acc:	9a 95       	dec	r25
 ace:	66 0f       	add	r22, r22
 ad0:	77 1f       	adc	r23, r23
 ad2:	88 1f       	adc	r24, r24
 ad4:	da f7       	brpl	.-10     	; 0xacc <__floatsisf+0x62>
 ad6:	88 0f       	add	r24, r24
 ad8:	96 95       	lsr	r25
 ada:	87 95       	ror	r24
 adc:	97 f9       	bld	r25, 7
 ade:	08 95       	ret

00000ae0 <__fp_cmp>:
 ae0:	99 0f       	add	r25, r25
 ae2:	00 08       	sbc	r0, r0
 ae4:	55 0f       	add	r21, r21
 ae6:	aa 0b       	sbc	r26, r26
 ae8:	e0 e8       	ldi	r30, 0x80	; 128
 aea:	fe ef       	ldi	r31, 0xFE	; 254
 aec:	16 16       	cp	r1, r22
 aee:	17 06       	cpc	r1, r23
 af0:	e8 07       	cpc	r30, r24
 af2:	f9 07       	cpc	r31, r25
 af4:	c0 f0       	brcs	.+48     	; 0xb26 <__fp_cmp+0x46>
 af6:	12 16       	cp	r1, r18
 af8:	13 06       	cpc	r1, r19
 afa:	e4 07       	cpc	r30, r20
 afc:	f5 07       	cpc	r31, r21
 afe:	98 f0       	brcs	.+38     	; 0xb26 <__fp_cmp+0x46>
 b00:	62 1b       	sub	r22, r18
 b02:	73 0b       	sbc	r23, r19
 b04:	84 0b       	sbc	r24, r20
 b06:	95 0b       	sbc	r25, r21
 b08:	39 f4       	brne	.+14     	; 0xb18 <__fp_cmp+0x38>
 b0a:	0a 26       	eor	r0, r26
 b0c:	61 f0       	breq	.+24     	; 0xb26 <__fp_cmp+0x46>
 b0e:	23 2b       	or	r18, r19
 b10:	24 2b       	or	r18, r20
 b12:	25 2b       	or	r18, r21
 b14:	21 f4       	brne	.+8      	; 0xb1e <__fp_cmp+0x3e>
 b16:	08 95       	ret
 b18:	0a 26       	eor	r0, r26
 b1a:	09 f4       	brne	.+2      	; 0xb1e <__fp_cmp+0x3e>
 b1c:	a1 40       	sbci	r26, 0x01	; 1
 b1e:	a6 95       	lsr	r26
 b20:	8f ef       	ldi	r24, 0xFF	; 255
 b22:	81 1d       	adc	r24, r1
 b24:	81 1d       	adc	r24, r1
 b26:	08 95       	ret

00000b28 <__fp_inf>:
 b28:	97 f9       	bld	r25, 7
 b2a:	9f 67       	ori	r25, 0x7F	; 127
 b2c:	80 e8       	ldi	r24, 0x80	; 128
 b2e:	70 e0       	ldi	r23, 0x00	; 0
 b30:	60 e0       	ldi	r22, 0x00	; 0
 b32:	08 95       	ret

00000b34 <__fp_nan>:
 b34:	9f ef       	ldi	r25, 0xFF	; 255
 b36:	80 ec       	ldi	r24, 0xC0	; 192
 b38:	08 95       	ret

00000b3a <__fp_pscA>:
 b3a:	00 24       	eor	r0, r0
 b3c:	0a 94       	dec	r0
 b3e:	16 16       	cp	r1, r22
 b40:	17 06       	cpc	r1, r23
 b42:	18 06       	cpc	r1, r24
 b44:	09 06       	cpc	r0, r25
 b46:	08 95       	ret

00000b48 <__fp_pscB>:
 b48:	00 24       	eor	r0, r0
 b4a:	0a 94       	dec	r0
 b4c:	12 16       	cp	r1, r18
 b4e:	13 06       	cpc	r1, r19
 b50:	14 06       	cpc	r1, r20
 b52:	05 06       	cpc	r0, r21
 b54:	08 95       	ret

00000b56 <__fp_round>:
 b56:	09 2e       	mov	r0, r25
 b58:	03 94       	inc	r0
 b5a:	00 0c       	add	r0, r0
 b5c:	11 f4       	brne	.+4      	; 0xb62 <__fp_round+0xc>
 b5e:	88 23       	and	r24, r24
 b60:	52 f0       	brmi	.+20     	; 0xb76 <__fp_round+0x20>
 b62:	bb 0f       	add	r27, r27
 b64:	40 f4       	brcc	.+16     	; 0xb76 <__fp_round+0x20>
 b66:	bf 2b       	or	r27, r31
 b68:	11 f4       	brne	.+4      	; 0xb6e <__fp_round+0x18>
 b6a:	60 ff       	sbrs	r22, 0
 b6c:	04 c0       	rjmp	.+8      	; 0xb76 <__fp_round+0x20>
 b6e:	6f 5f       	subi	r22, 0xFF	; 255
 b70:	7f 4f       	sbci	r23, 0xFF	; 255
 b72:	8f 4f       	sbci	r24, 0xFF	; 255
 b74:	9f 4f       	sbci	r25, 0xFF	; 255
 b76:	08 95       	ret

00000b78 <__fp_split3>:
 b78:	57 fd       	sbrc	r21, 7
 b7a:	90 58       	subi	r25, 0x80	; 128
 b7c:	44 0f       	add	r20, r20
 b7e:	55 1f       	adc	r21, r21
 b80:	59 f0       	breq	.+22     	; 0xb98 <__fp_splitA+0x10>
 b82:	5f 3f       	cpi	r21, 0xFF	; 255
 b84:	71 f0       	breq	.+28     	; 0xba2 <__fp_splitA+0x1a>
 b86:	47 95       	ror	r20

00000b88 <__fp_splitA>:
 b88:	88 0f       	add	r24, r24
 b8a:	97 fb       	bst	r25, 7
 b8c:	99 1f       	adc	r25, r25
 b8e:	61 f0       	breq	.+24     	; 0xba8 <__fp_splitA+0x20>
 b90:	9f 3f       	cpi	r25, 0xFF	; 255
 b92:	79 f0       	breq	.+30     	; 0xbb2 <__fp_splitA+0x2a>
 b94:	87 95       	ror	r24
 b96:	08 95       	ret
 b98:	12 16       	cp	r1, r18
 b9a:	13 06       	cpc	r1, r19
 b9c:	14 06       	cpc	r1, r20
 b9e:	55 1f       	adc	r21, r21
 ba0:	f2 cf       	rjmp	.-28     	; 0xb86 <__fp_split3+0xe>
 ba2:	46 95       	lsr	r20
 ba4:	f1 df       	rcall	.-30     	; 0xb88 <__fp_splitA>
 ba6:	08 c0       	rjmp	.+16     	; 0xbb8 <__fp_splitA+0x30>
 ba8:	16 16       	cp	r1, r22
 baa:	17 06       	cpc	r1, r23
 bac:	18 06       	cpc	r1, r24
 bae:	99 1f       	adc	r25, r25
 bb0:	f1 cf       	rjmp	.-30     	; 0xb94 <__fp_splitA+0xc>
 bb2:	86 95       	lsr	r24
 bb4:	71 05       	cpc	r23, r1
 bb6:	61 05       	cpc	r22, r1
 bb8:	08 94       	sec
 bba:	08 95       	ret

00000bbc <__fp_zero>:
 bbc:	e8 94       	clt

00000bbe <__fp_szero>:
 bbe:	bb 27       	eor	r27, r27
 bc0:	66 27       	eor	r22, r22
 bc2:	77 27       	eor	r23, r23
 bc4:	cb 01       	movw	r24, r22
 bc6:	97 f9       	bld	r25, 7
 bc8:	08 95       	ret

00000bca <__gesf2>:
 bca:	8a df       	rcall	.-236    	; 0xae0 <__fp_cmp>
 bcc:	08 f4       	brcc	.+2      	; 0xbd0 <__gesf2+0x6>
 bce:	8f ef       	ldi	r24, 0xFF	; 255
 bd0:	08 95       	ret
 bd2:	0e f0       	brts	.+2      	; 0xbd6 <__gesf2+0xc>
 bd4:	23 c1       	rjmp	.+582    	; 0xe1c <__fp_mpack>
 bd6:	ae cf       	rjmp	.-164    	; 0xb34 <__fp_nan>
 bd8:	68 94       	set
 bda:	a6 cf       	rjmp	.-180    	; 0xb28 <__fp_inf>

00000bdc <log>:
 bdc:	d5 df       	rcall	.-86     	; 0xb88 <__fp_splitA>
 bde:	c8 f3       	brcs	.-14     	; 0xbd2 <__gesf2+0x8>
 be0:	99 23       	and	r25, r25
 be2:	d1 f3       	breq	.-12     	; 0xbd8 <__gesf2+0xe>
 be4:	c6 f3       	brts	.-16     	; 0xbd6 <__gesf2+0xc>
 be6:	df 93       	push	r29
 be8:	cf 93       	push	r28
 bea:	1f 93       	push	r17
 bec:	0f 93       	push	r16
 bee:	ff 92       	push	r15
 bf0:	c9 2f       	mov	r28, r25
 bf2:	dd 27       	eor	r29, r29
 bf4:	88 23       	and	r24, r24
 bf6:	2a f0       	brmi	.+10     	; 0xc02 <log+0x26>
 bf8:	21 97       	sbiw	r28, 0x01	; 1
 bfa:	66 0f       	add	r22, r22
 bfc:	77 1f       	adc	r23, r23
 bfe:	88 1f       	adc	r24, r24
 c00:	da f7       	brpl	.-10     	; 0xbf8 <log+0x1c>
 c02:	20 e0       	ldi	r18, 0x00	; 0
 c04:	30 e0       	ldi	r19, 0x00	; 0
 c06:	40 e8       	ldi	r20, 0x80	; 128
 c08:	5f eb       	ldi	r21, 0xBF	; 191
 c0a:	9f e3       	ldi	r25, 0x3F	; 63
 c0c:	88 39       	cpi	r24, 0x98	; 152
 c0e:	20 f0       	brcs	.+8      	; 0xc18 <log+0x3c>
 c10:	80 3e       	cpi	r24, 0xE0	; 224
 c12:	30 f0       	brcs	.+12     	; 0xc20 <log+0x44>
 c14:	21 96       	adiw	r28, 0x01	; 1
 c16:	8f 77       	andi	r24, 0x7F	; 127
 c18:	25 de       	rcall	.-950    	; 0x864 <__addsf3>
 c1a:	ec e8       	ldi	r30, 0x8C	; 140
 c1c:	f0 e0       	ldi	r31, 0x00	; 0
 c1e:	03 c0       	rjmp	.+6      	; 0xc26 <log+0x4a>
 c20:	21 de       	rcall	.-958    	; 0x864 <__addsf3>
 c22:	e9 eb       	ldi	r30, 0xB9	; 185
 c24:	f0 e0       	ldi	r31, 0x00	; 0
 c26:	08 d1       	rcall	.+528    	; 0xe38 <__fp_powser>
 c28:	8b 01       	movw	r16, r22
 c2a:	be 01       	movw	r22, r28
 c2c:	ec 01       	movw	r28, r24
 c2e:	fb 2e       	mov	r15, r27
 c30:	6f 57       	subi	r22, 0x7F	; 127
 c32:	71 09       	sbc	r23, r1
 c34:	75 95       	asr	r23
 c36:	77 1f       	adc	r23, r23
 c38:	88 0b       	sbc	r24, r24
 c3a:	99 0b       	sbc	r25, r25
 c3c:	16 df       	rcall	.-468    	; 0xa6a <__floatsisf>
 c3e:	28 e1       	ldi	r18, 0x18	; 24
 c40:	32 e7       	ldi	r19, 0x72	; 114
 c42:	41 e3       	ldi	r20, 0x31	; 49
 c44:	5f e3       	ldi	r21, 0x3F	; 63
 c46:	16 d0       	rcall	.+44     	; 0xc74 <__mulsf3x>
 c48:	af 2d       	mov	r26, r15
 c4a:	98 01       	movw	r18, r16
 c4c:	ae 01       	movw	r20, r28
 c4e:	ff 90       	pop	r15
 c50:	0f 91       	pop	r16
 c52:	1f 91       	pop	r17
 c54:	cf 91       	pop	r28
 c56:	df 91       	pop	r29
 c58:	16 de       	rcall	.-980    	; 0x886 <__addsf3x>
 c5a:	7d cf       	rjmp	.-262    	; 0xb56 <__fp_round>

00000c5c <__mulsf3>:
 c5c:	0b d0       	rcall	.+22     	; 0xc74 <__mulsf3x>
 c5e:	7b cf       	rjmp	.-266    	; 0xb56 <__fp_round>
 c60:	6c df       	rcall	.-296    	; 0xb3a <__fp_pscA>
 c62:	28 f0       	brcs	.+10     	; 0xc6e <__mulsf3+0x12>
 c64:	71 df       	rcall	.-286    	; 0xb48 <__fp_pscB>
 c66:	18 f0       	brcs	.+6      	; 0xc6e <__mulsf3+0x12>
 c68:	95 23       	and	r25, r21
 c6a:	09 f0       	breq	.+2      	; 0xc6e <__mulsf3+0x12>
 c6c:	5d cf       	rjmp	.-326    	; 0xb28 <__fp_inf>
 c6e:	62 cf       	rjmp	.-316    	; 0xb34 <__fp_nan>
 c70:	11 24       	eor	r1, r1
 c72:	a5 cf       	rjmp	.-182    	; 0xbbe <__fp_szero>

00000c74 <__mulsf3x>:
 c74:	81 df       	rcall	.-254    	; 0xb78 <__fp_split3>
 c76:	a0 f3       	brcs	.-24     	; 0xc60 <__mulsf3+0x4>

00000c78 <__mulsf3_pse>:
 c78:	95 9f       	mul	r25, r21
 c7a:	d1 f3       	breq	.-12     	; 0xc70 <__mulsf3+0x14>
 c7c:	95 0f       	add	r25, r21
 c7e:	50 e0       	ldi	r21, 0x00	; 0
 c80:	55 1f       	adc	r21, r21
 c82:	62 9f       	mul	r22, r18
 c84:	f0 01       	movw	r30, r0
 c86:	72 9f       	mul	r23, r18
 c88:	bb 27       	eor	r27, r27
 c8a:	f0 0d       	add	r31, r0
 c8c:	b1 1d       	adc	r27, r1
 c8e:	63 9f       	mul	r22, r19
 c90:	aa 27       	eor	r26, r26
 c92:	f0 0d       	add	r31, r0
 c94:	b1 1d       	adc	r27, r1
 c96:	aa 1f       	adc	r26, r26
 c98:	64 9f       	mul	r22, r20
 c9a:	66 27       	eor	r22, r22
 c9c:	b0 0d       	add	r27, r0
 c9e:	a1 1d       	adc	r26, r1
 ca0:	66 1f       	adc	r22, r22
 ca2:	82 9f       	mul	r24, r18
 ca4:	22 27       	eor	r18, r18
 ca6:	b0 0d       	add	r27, r0
 ca8:	a1 1d       	adc	r26, r1
 caa:	62 1f       	adc	r22, r18
 cac:	73 9f       	mul	r23, r19
 cae:	b0 0d       	add	r27, r0
 cb0:	a1 1d       	adc	r26, r1
 cb2:	62 1f       	adc	r22, r18
 cb4:	83 9f       	mul	r24, r19
 cb6:	a0 0d       	add	r26, r0
 cb8:	61 1d       	adc	r22, r1
 cba:	22 1f       	adc	r18, r18
 cbc:	74 9f       	mul	r23, r20
 cbe:	33 27       	eor	r19, r19
 cc0:	a0 0d       	add	r26, r0
 cc2:	61 1d       	adc	r22, r1
 cc4:	23 1f       	adc	r18, r19
 cc6:	84 9f       	mul	r24, r20
 cc8:	60 0d       	add	r22, r0
 cca:	21 1d       	adc	r18, r1
 ccc:	82 2f       	mov	r24, r18
 cce:	76 2f       	mov	r23, r22
 cd0:	6a 2f       	mov	r22, r26
 cd2:	11 24       	eor	r1, r1
 cd4:	9f 57       	subi	r25, 0x7F	; 127
 cd6:	50 40       	sbci	r21, 0x00	; 0
 cd8:	8a f0       	brmi	.+34     	; 0xcfc <__mulsf3_pse+0x84>
 cda:	e1 f0       	breq	.+56     	; 0xd14 <__mulsf3_pse+0x9c>
 cdc:	88 23       	and	r24, r24
 cde:	4a f0       	brmi	.+18     	; 0xcf2 <__mulsf3_pse+0x7a>
 ce0:	ee 0f       	add	r30, r30
 ce2:	ff 1f       	adc	r31, r31
 ce4:	bb 1f       	adc	r27, r27
 ce6:	66 1f       	adc	r22, r22
 ce8:	77 1f       	adc	r23, r23
 cea:	88 1f       	adc	r24, r24
 cec:	91 50       	subi	r25, 0x01	; 1
 cee:	50 40       	sbci	r21, 0x00	; 0
 cf0:	a9 f7       	brne	.-22     	; 0xcdc <__mulsf3_pse+0x64>
 cf2:	9e 3f       	cpi	r25, 0xFE	; 254
 cf4:	51 05       	cpc	r21, r1
 cf6:	70 f0       	brcs	.+28     	; 0xd14 <__mulsf3_pse+0x9c>
 cf8:	17 cf       	rjmp	.-466    	; 0xb28 <__fp_inf>
 cfa:	61 cf       	rjmp	.-318    	; 0xbbe <__fp_szero>
 cfc:	5f 3f       	cpi	r21, 0xFF	; 255
 cfe:	ec f3       	brlt	.-6      	; 0xcfa <__mulsf3_pse+0x82>
 d00:	98 3e       	cpi	r25, 0xE8	; 232
 d02:	dc f3       	brlt	.-10     	; 0xcfa <__mulsf3_pse+0x82>
 d04:	86 95       	lsr	r24
 d06:	77 95       	ror	r23
 d08:	67 95       	ror	r22
 d0a:	b7 95       	ror	r27
 d0c:	f7 95       	ror	r31
 d0e:	e7 95       	ror	r30
 d10:	9f 5f       	subi	r25, 0xFF	; 255
 d12:	c1 f7       	brne	.-16     	; 0xd04 <__mulsf3_pse+0x8c>
 d14:	fe 2b       	or	r31, r30
 d16:	88 0f       	add	r24, r24
 d18:	91 1d       	adc	r25, r1
 d1a:	96 95       	lsr	r25
 d1c:	87 95       	ror	r24
 d1e:	97 f9       	bld	r25, 7
 d20:	08 95       	ret

00000d22 <pow>:
 d22:	fa 01       	movw	r30, r20
 d24:	ee 0f       	add	r30, r30
 d26:	ff 1f       	adc	r31, r31
 d28:	30 96       	adiw	r30, 0x00	; 0
 d2a:	21 05       	cpc	r18, r1
 d2c:	31 05       	cpc	r19, r1
 d2e:	99 f1       	breq	.+102    	; 0xd96 <pow+0x74>
 d30:	61 15       	cp	r22, r1
 d32:	71 05       	cpc	r23, r1
 d34:	61 f4       	brne	.+24     	; 0xd4e <pow+0x2c>
 d36:	80 38       	cpi	r24, 0x80	; 128
 d38:	bf e3       	ldi	r27, 0x3F	; 63
 d3a:	9b 07       	cpc	r25, r27
 d3c:	49 f1       	breq	.+82     	; 0xd90 <pow+0x6e>
 d3e:	68 94       	set
 d40:	90 38       	cpi	r25, 0x80	; 128
 d42:	81 05       	cpc	r24, r1
 d44:	61 f0       	breq	.+24     	; 0xd5e <pow+0x3c>
 d46:	80 38       	cpi	r24, 0x80	; 128
 d48:	bf ef       	ldi	r27, 0xFF	; 255
 d4a:	9b 07       	cpc	r25, r27
 d4c:	41 f0       	breq	.+16     	; 0xd5e <pow+0x3c>
 d4e:	99 23       	and	r25, r25
 d50:	42 f5       	brpl	.+80     	; 0xda2 <pow+0x80>
 d52:	ff 3f       	cpi	r31, 0xFF	; 255
 d54:	e1 05       	cpc	r30, r1
 d56:	31 05       	cpc	r19, r1
 d58:	21 05       	cpc	r18, r1
 d5a:	11 f1       	breq	.+68     	; 0xda0 <pow+0x7e>
 d5c:	e8 94       	clt
 d5e:	08 94       	sec
 d60:	e7 95       	ror	r30
 d62:	d9 01       	movw	r26, r18
 d64:	aa 23       	and	r26, r26
 d66:	29 f4       	brne	.+10     	; 0xd72 <pow+0x50>
 d68:	ab 2f       	mov	r26, r27
 d6a:	be 2f       	mov	r27, r30
 d6c:	f8 5f       	subi	r31, 0xF8	; 248
 d6e:	d0 f3       	brcs	.-12     	; 0xd64 <pow+0x42>
 d70:	10 c0       	rjmp	.+32     	; 0xd92 <pow+0x70>
 d72:	ff 5f       	subi	r31, 0xFF	; 255
 d74:	70 f4       	brcc	.+28     	; 0xd92 <pow+0x70>
 d76:	a6 95       	lsr	r26
 d78:	e0 f7       	brcc	.-8      	; 0xd72 <pow+0x50>
 d7a:	f7 39       	cpi	r31, 0x97	; 151
 d7c:	50 f0       	brcs	.+20     	; 0xd92 <pow+0x70>
 d7e:	19 f0       	breq	.+6      	; 0xd86 <pow+0x64>
 d80:	ff 3a       	cpi	r31, 0xAF	; 175
 d82:	38 f4       	brcc	.+14     	; 0xd92 <pow+0x70>
 d84:	9f 77       	andi	r25, 0x7F	; 127
 d86:	9f 93       	push	r25
 d88:	0c d0       	rcall	.+24     	; 0xda2 <pow+0x80>
 d8a:	0f 90       	pop	r0
 d8c:	07 fc       	sbrc	r0, 7
 d8e:	90 58       	subi	r25, 0x80	; 128
 d90:	08 95       	ret
 d92:	3e f0       	brts	.+14     	; 0xda2 <pow+0x80>
 d94:	cf ce       	rjmp	.-610    	; 0xb34 <__fp_nan>
 d96:	60 e0       	ldi	r22, 0x00	; 0
 d98:	70 e0       	ldi	r23, 0x00	; 0
 d9a:	80 e8       	ldi	r24, 0x80	; 128
 d9c:	9f e3       	ldi	r25, 0x3F	; 63
 d9e:	08 95       	ret
 da0:	4f e7       	ldi	r20, 0x7F	; 127
 da2:	9f 77       	andi	r25, 0x7F	; 127
 da4:	5f 93       	push	r21
 da6:	4f 93       	push	r20
 da8:	3f 93       	push	r19
 daa:	2f 93       	push	r18
 dac:	17 df       	rcall	.-466    	; 0xbdc <log>
 dae:	2f 91       	pop	r18
 db0:	3f 91       	pop	r19
 db2:	4f 91       	pop	r20
 db4:	5f 91       	pop	r21
 db6:	52 df       	rcall	.-348    	; 0xc5c <__mulsf3>
 db8:	05 c0       	rjmp	.+10     	; 0xdc4 <exp>
 dba:	19 f4       	brne	.+6      	; 0xdc2 <pow+0xa0>
 dbc:	0e f0       	brts	.+2      	; 0xdc0 <pow+0x9e>
 dbe:	b4 ce       	rjmp	.-664    	; 0xb28 <__fp_inf>
 dc0:	fd ce       	rjmp	.-518    	; 0xbbc <__fp_zero>
 dc2:	b8 ce       	rjmp	.-656    	; 0xb34 <__fp_nan>

00000dc4 <exp>:
 dc4:	e1 de       	rcall	.-574    	; 0xb88 <__fp_splitA>
 dc6:	c8 f3       	brcs	.-14     	; 0xdba <pow+0x98>
 dc8:	96 38       	cpi	r25, 0x86	; 134
 dca:	c0 f7       	brcc	.-16     	; 0xdbc <pow+0x9a>
 dcc:	07 f8       	bld	r0, 7
 dce:	0f 92       	push	r0
 dd0:	e8 94       	clt
 dd2:	2b e3       	ldi	r18, 0x3B	; 59
 dd4:	3a ea       	ldi	r19, 0xAA	; 170
 dd6:	48 eb       	ldi	r20, 0xB8	; 184
 dd8:	5f e7       	ldi	r21, 0x7F	; 127
 dda:	4e df       	rcall	.-356    	; 0xc78 <__mulsf3_pse>
 ddc:	0f 92       	push	r0
 dde:	0f 92       	push	r0
 de0:	0f 92       	push	r0
 de2:	4d b7       	in	r20, 0x3d	; 61
 de4:	5e b7       	in	r21, 0x3e	; 62
 de6:	0f 92       	push	r0
 de8:	89 d0       	rcall	.+274    	; 0xefc <modf>
 dea:	e6 ee       	ldi	r30, 0xE6	; 230
 dec:	f0 e0       	ldi	r31, 0x00	; 0
 dee:	24 d0       	rcall	.+72     	; 0xe38 <__fp_powser>
 df0:	4f 91       	pop	r20
 df2:	5f 91       	pop	r21
 df4:	ef 91       	pop	r30
 df6:	ff 91       	pop	r31
 df8:	e5 95       	asr	r30
 dfa:	ee 1f       	adc	r30, r30
 dfc:	ff 1f       	adc	r31, r31
 dfe:	49 f0       	breq	.+18     	; 0xe12 <exp+0x4e>
 e00:	fe 57       	subi	r31, 0x7E	; 126
 e02:	e0 68       	ori	r30, 0x80	; 128
 e04:	44 27       	eor	r20, r20
 e06:	ee 0f       	add	r30, r30
 e08:	44 1f       	adc	r20, r20
 e0a:	fa 95       	dec	r31
 e0c:	e1 f7       	brne	.-8      	; 0xe06 <exp+0x42>
 e0e:	41 95       	neg	r20
 e10:	55 0b       	sbc	r21, r21
 e12:	40 d0       	rcall	.+128    	; 0xe94 <ldexp>
 e14:	0f 90       	pop	r0
 e16:	07 fe       	sbrs	r0, 7
 e18:	34 c0       	rjmp	.+104    	; 0xe82 <inverse>
 e1a:	08 95       	ret

00000e1c <__fp_mpack>:
 e1c:	9f 3f       	cpi	r25, 0xFF	; 255
 e1e:	31 f0       	breq	.+12     	; 0xe2c <__fp_mpack_finite+0xc>

00000e20 <__fp_mpack_finite>:
 e20:	91 50       	subi	r25, 0x01	; 1
 e22:	20 f4       	brcc	.+8      	; 0xe2c <__fp_mpack_finite+0xc>
 e24:	87 95       	ror	r24
 e26:	77 95       	ror	r23
 e28:	67 95       	ror	r22
 e2a:	b7 95       	ror	r27
 e2c:	88 0f       	add	r24, r24
 e2e:	91 1d       	adc	r25, r1
 e30:	96 95       	lsr	r25
 e32:	87 95       	ror	r24
 e34:	97 f9       	bld	r25, 7
 e36:	08 95       	ret

00000e38 <__fp_powser>:
 e38:	df 93       	push	r29
 e3a:	cf 93       	push	r28
 e3c:	1f 93       	push	r17
 e3e:	0f 93       	push	r16
 e40:	ff 92       	push	r15
 e42:	ef 92       	push	r14
 e44:	df 92       	push	r13
 e46:	7b 01       	movw	r14, r22
 e48:	8c 01       	movw	r16, r24
 e4a:	68 94       	set
 e4c:	05 c0       	rjmp	.+10     	; 0xe58 <__fp_powser+0x20>
 e4e:	da 2e       	mov	r13, r26
 e50:	ef 01       	movw	r28, r30
 e52:	10 df       	rcall	.-480    	; 0xc74 <__mulsf3x>
 e54:	fe 01       	movw	r30, r28
 e56:	e8 94       	clt
 e58:	a5 91       	lpm	r26, Z+
 e5a:	25 91       	lpm	r18, Z+
 e5c:	35 91       	lpm	r19, Z+
 e5e:	45 91       	lpm	r20, Z+
 e60:	55 91       	lpm	r21, Z+
 e62:	ae f3       	brts	.-22     	; 0xe4e <__fp_powser+0x16>
 e64:	ef 01       	movw	r28, r30
 e66:	0f dd       	rcall	.-1506   	; 0x886 <__addsf3x>
 e68:	fe 01       	movw	r30, r28
 e6a:	97 01       	movw	r18, r14
 e6c:	a8 01       	movw	r20, r16
 e6e:	da 94       	dec	r13
 e70:	79 f7       	brne	.-34     	; 0xe50 <__fp_powser+0x18>
 e72:	df 90       	pop	r13
 e74:	ef 90       	pop	r14
 e76:	ff 90       	pop	r15
 e78:	0f 91       	pop	r16
 e7a:	1f 91       	pop	r17
 e7c:	cf 91       	pop	r28
 e7e:	df 91       	pop	r29
 e80:	08 95       	ret

00000e82 <inverse>:
 e82:	9b 01       	movw	r18, r22
 e84:	ac 01       	movw	r20, r24
 e86:	60 e0       	ldi	r22, 0x00	; 0
 e88:	70 e0       	ldi	r23, 0x00	; 0
 e8a:	80 e8       	ldi	r24, 0x80	; 128
 e8c:	9f e3       	ldi	r25, 0x3F	; 63
 e8e:	52 cd       	rjmp	.-1372   	; 0x934 <__divsf3>
 e90:	4b ce       	rjmp	.-874    	; 0xb28 <__fp_inf>
 e92:	c4 cf       	rjmp	.-120    	; 0xe1c <__fp_mpack>

00000e94 <ldexp>:
 e94:	79 de       	rcall	.-782    	; 0xb88 <__fp_splitA>
 e96:	e8 f3       	brcs	.-6      	; 0xe92 <inverse+0x10>
 e98:	99 23       	and	r25, r25
 e9a:	d9 f3       	breq	.-10     	; 0xe92 <inverse+0x10>
 e9c:	94 0f       	add	r25, r20
 e9e:	51 1d       	adc	r21, r1
 ea0:	bb f3       	brvs	.-18     	; 0xe90 <inverse+0xe>
 ea2:	91 50       	subi	r25, 0x01	; 1
 ea4:	50 40       	sbci	r21, 0x00	; 0
 ea6:	94 f0       	brlt	.+36     	; 0xecc <ldexp+0x38>
 ea8:	59 f0       	breq	.+22     	; 0xec0 <ldexp+0x2c>
 eaa:	88 23       	and	r24, r24
 eac:	32 f0       	brmi	.+12     	; 0xeba <ldexp+0x26>
 eae:	66 0f       	add	r22, r22
 eb0:	77 1f       	adc	r23, r23
 eb2:	88 1f       	adc	r24, r24
 eb4:	91 50       	subi	r25, 0x01	; 1
 eb6:	50 40       	sbci	r21, 0x00	; 0
 eb8:	c1 f7       	brne	.-16     	; 0xeaa <ldexp+0x16>
 eba:	9e 3f       	cpi	r25, 0xFE	; 254
 ebc:	51 05       	cpc	r21, r1
 ebe:	44 f7       	brge	.-48     	; 0xe90 <inverse+0xe>
 ec0:	88 0f       	add	r24, r24
 ec2:	91 1d       	adc	r25, r1
 ec4:	96 95       	lsr	r25
 ec6:	87 95       	ror	r24
 ec8:	97 f9       	bld	r25, 7
 eca:	08 95       	ret
 ecc:	5f 3f       	cpi	r21, 0xFF	; 255
 ece:	ac f0       	brlt	.+42     	; 0xefa <ldexp+0x66>
 ed0:	98 3e       	cpi	r25, 0xE8	; 232
 ed2:	9c f0       	brlt	.+38     	; 0xefa <ldexp+0x66>
 ed4:	bb 27       	eor	r27, r27
 ed6:	86 95       	lsr	r24
 ed8:	77 95       	ror	r23
 eda:	67 95       	ror	r22
 edc:	b7 95       	ror	r27
 ede:	08 f4       	brcc	.+2      	; 0xee2 <ldexp+0x4e>
 ee0:	b1 60       	ori	r27, 0x01	; 1
 ee2:	93 95       	inc	r25
 ee4:	c1 f7       	brne	.-16     	; 0xed6 <ldexp+0x42>
 ee6:	bb 0f       	add	r27, r27
 ee8:	58 f7       	brcc	.-42     	; 0xec0 <ldexp+0x2c>
 eea:	11 f4       	brne	.+4      	; 0xef0 <ldexp+0x5c>
 eec:	60 ff       	sbrs	r22, 0
 eee:	e8 cf       	rjmp	.-48     	; 0xec0 <ldexp+0x2c>
 ef0:	6f 5f       	subi	r22, 0xFF	; 255
 ef2:	7f 4f       	sbci	r23, 0xFF	; 255
 ef4:	8f 4f       	sbci	r24, 0xFF	; 255
 ef6:	9f 4f       	sbci	r25, 0xFF	; 255
 ef8:	e3 cf       	rjmp	.-58     	; 0xec0 <ldexp+0x2c>
 efa:	61 ce       	rjmp	.-830    	; 0xbbe <__fp_szero>

00000efc <modf>:
 efc:	fa 01       	movw	r30, r20
 efe:	dc 01       	movw	r26, r24
 f00:	aa 0f       	add	r26, r26
 f02:	bb 1f       	adc	r27, r27
 f04:	9b 01       	movw	r18, r22
 f06:	ac 01       	movw	r20, r24
 f08:	bf 57       	subi	r27, 0x7F	; 127
 f0a:	28 f4       	brcc	.+10     	; 0xf16 <modf+0x1a>
 f0c:	22 27       	eor	r18, r18
 f0e:	33 27       	eor	r19, r19
 f10:	44 27       	eor	r20, r20
 f12:	50 78       	andi	r21, 0x80	; 128
 f14:	1f c0       	rjmp	.+62     	; 0xf54 <modf+0x58>
 f16:	b7 51       	subi	r27, 0x17	; 23
 f18:	88 f4       	brcc	.+34     	; 0xf3c <modf+0x40>
 f1a:	ab 2f       	mov	r26, r27
 f1c:	00 24       	eor	r0, r0
 f1e:	46 95       	lsr	r20
 f20:	37 95       	ror	r19
 f22:	27 95       	ror	r18
 f24:	01 1c       	adc	r0, r1
 f26:	a3 95       	inc	r26
 f28:	d2 f3       	brmi	.-12     	; 0xf1e <modf+0x22>
 f2a:	00 20       	and	r0, r0
 f2c:	69 f0       	breq	.+26     	; 0xf48 <modf+0x4c>
 f2e:	22 0f       	add	r18, r18
 f30:	33 1f       	adc	r19, r19
 f32:	44 1f       	adc	r20, r20
 f34:	b3 95       	inc	r27
 f36:	da f3       	brmi	.-10     	; 0xf2e <modf+0x32>
 f38:	0d d0       	rcall	.+26     	; 0xf54 <modf+0x58>
 f3a:	93 cc       	rjmp	.-1754   	; 0x862 <__subsf3>
 f3c:	61 30       	cpi	r22, 0x01	; 1
 f3e:	71 05       	cpc	r23, r1
 f40:	a0 e8       	ldi	r26, 0x80	; 128
 f42:	8a 07       	cpc	r24, r26
 f44:	b9 46       	sbci	r27, 0x69	; 105
 f46:	30 f4       	brcc	.+12     	; 0xf54 <modf+0x58>
 f48:	9b 01       	movw	r18, r22
 f4a:	ac 01       	movw	r20, r24
 f4c:	66 27       	eor	r22, r22
 f4e:	77 27       	eor	r23, r23
 f50:	88 27       	eor	r24, r24
 f52:	90 78       	andi	r25, 0x80	; 128
 f54:	30 96       	adiw	r30, 0x00	; 0
 f56:	21 f0       	breq	.+8      	; 0xf60 <modf+0x64>
 f58:	20 83       	st	Z, r18
 f5a:	31 83       	std	Z+1, r19	; 0x01
 f5c:	42 83       	std	Z+2, r20	; 0x02
 f5e:	53 83       	std	Z+3, r21	; 0x03
 f60:	08 95       	ret

00000f62 <_exit>:
 f62:	f8 94       	cli

00000f64 <__stop_program>:
 f64:	ff cf       	rjmp	.-2      	; 0xf64 <__stop_program>
