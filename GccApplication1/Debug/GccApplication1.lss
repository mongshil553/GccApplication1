
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000007da  0000086e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000031  00800102  00800102  00000870  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000870  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  000008dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000187a  00000000  00000000  00000a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d48  00000000  00000000  000022fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000eb7  00000000  00000000  00003046  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c0  00000000  00000000  00003f00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000804  00000000  00000000  000042c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000074c  00000000  00000000  00004ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00005210  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	04 c1       	rjmp	.+520    	; 0x22a <__vector_8>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	ff c1       	rjmp	.+1022   	; 0x440 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ed       	ldi	r30, 0xDA	; 218
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 33       	cpi	r26, 0x33	; 51
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d1       	rcall	.+516    	; 0x2c8 <main>
  c4:	88 c3       	rjmp	.+1808   	; 0x7d6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <init_BT>:
  c8:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
  cc:	88 e1       	ldi	r24, 0x18	; 24
  ce:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
  d2:	86 e0       	ldi	r24, 0x06	; 6
  d4:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
  d8:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
  dc:	87 e6       	ldi	r24, 0x67	; 103
  de:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
  e2:	08 95       	ret

000000e4 <BT_send>:
  e4:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
  e8:	95 ff       	sbrs	r25, 5
  ea:	fc cf       	rjmp	.-8      	; 0xe4 <BT_send>
  ec:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
  f0:	08 95       	ret

000000f2 <BT_Receive>:
  f2:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
  f6:	88 23       	and	r24, r24
  f8:	0c f0       	brlt	.+2      	; 0xfc <BT_Receive+0xa>
  fa:	87 c0       	rjmp	.+270    	; 0x20a <BT_Receive+0x118>
  fc:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 100:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <rdata>
 104:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 108:	82 30       	cpi	r24, 0x02	; 2
 10a:	b1 f0       	breq	.+44     	; 0x138 <BT_Receive+0x46>
 10c:	83 30       	cpi	r24, 0x03	; 3
 10e:	b1 f1       	breq	.+108    	; 0x17c <BT_Receive+0x8a>
 110:	81 30       	cpi	r24, 0x01	; 1
 112:	09 f0       	breq	.+2      	; 0x116 <BT_Receive+0x24>
 114:	54 c0       	rjmp	.+168    	; 0x1be <BT_Receive+0xcc>
 116:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rdata>
 11a:	8e 32       	cpi	r24, 0x2E	; 46
 11c:	39 f4       	brne	.+14     	; 0x12c <BT_Receive+0x3a>
 11e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
 122:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rdata>
 126:	de df       	rcall	.-68     	; 0xe4 <BT_send>
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	08 95       	ret
 12c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rdata>
 130:	80 53       	subi	r24, 0x30	; 48
 132:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <marble>
 136:	43 c0       	rjmp	.+134    	; 0x1be <BT_Receive+0xcc>
 138:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rdata>
 13c:	8e 32       	cpi	r24, 0x2E	; 46
 13e:	39 f4       	brne	.+14     	; 0x14e <BT_Receive+0x5c>
 140:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
 144:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rdata>
 148:	cd df       	rcall	.-102    	; 0xe4 <BT_send>
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	08 95       	ret
 14e:	e4 e0       	ldi	r30, 0x04	; 4
 150:	f1 e0       	ldi	r31, 0x01	; 1
 152:	81 81       	ldd	r24, Z+1	; 0x01
 154:	92 81       	ldd	r25, Z+2	; 0x02
 156:	9c 01       	movw	r18, r24
 158:	22 0f       	add	r18, r18
 15a:	33 1f       	adc	r19, r19
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	82 0f       	add	r24, r18
 16a:	93 1f       	adc	r25, r19
 16c:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <rdata>
 170:	82 0f       	add	r24, r18
 172:	91 1d       	adc	r25, r1
 174:	c0 97       	sbiw	r24, 0x30	; 48
 176:	92 83       	std	Z+2, r25	; 0x02
 178:	81 83       	std	Z+1, r24	; 0x01
 17a:	21 c0       	rjmp	.+66     	; 0x1be <BT_Receive+0xcc>
 17c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rdata>
 180:	8e 32       	cpi	r24, 0x2E	; 46
 182:	39 f4       	brne	.+14     	; 0x192 <BT_Receive+0xa0>
 184:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
 188:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rdata>
 18c:	ab df       	rcall	.-170    	; 0xe4 <BT_send>
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	08 95       	ret
 192:	e4 e0       	ldi	r30, 0x04	; 4
 194:	f1 e0       	ldi	r31, 0x01	; 1
 196:	83 81       	ldd	r24, Z+3	; 0x03
 198:	94 81       	ldd	r25, Z+4	; 0x04
 19a:	9c 01       	movw	r18, r24
 19c:	22 0f       	add	r18, r18
 19e:	33 1f       	adc	r19, r19
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	82 0f       	add	r24, r18
 1ae:	93 1f       	adc	r25, r19
 1b0:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <rdata>
 1b4:	82 0f       	add	r24, r18
 1b6:	91 1d       	adc	r25, r1
 1b8:	c0 97       	sbiw	r24, 0x30	; 48
 1ba:	94 83       	std	Z+4, r25	; 0x04
 1bc:	83 83       	std	Z+3, r24	; 0x03
 1be:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rdata>
 1c2:	83 32       	cpi	r24, 0x23	; 35
 1c4:	31 f4       	brne	.+12     	; 0x1d2 <BT_Receive+0xe0>
 1c6:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <marble>
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 1d0:	17 c0       	rjmp	.+46     	; 0x200 <BT_Receive+0x10e>
 1d2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rdata>
 1d6:	81 32       	cpi	r24, 0x21	; 33
 1d8:	41 f4       	brne	.+16     	; 0x1ea <BT_Receive+0xf8>
 1da:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <marble+0x2>
 1de:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <marble+0x1>
 1e2:	82 e0       	ldi	r24, 0x02	; 2
 1e4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 1e8:	0b c0       	rjmp	.+22     	; 0x200 <BT_Receive+0x10e>
 1ea:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rdata>
 1ee:	8a 32       	cpi	r24, 0x2A	; 42
 1f0:	39 f4       	brne	.+14     	; 0x200 <BT_Receive+0x10e>
 1f2:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <marble+0x4>
 1f6:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <marble+0x3>
 1fa:	83 e0       	ldi	r24, 0x03	; 3
 1fc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 200:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rdata>
 204:	6f df       	rcall	.-290    	; 0xe4 <BT_send>
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	08 95       	ret
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	08 95       	ret

0000020e <Select_Item>:
 20e:	95 b3       	in	r25, 0x15	; 21
 210:	90 7f       	andi	r25, 0xF0	; 240
 212:	89 2b       	or	r24, r25
 214:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 216:	2f ef       	ldi	r18, 0xFF	; 255
 218:	81 ee       	ldi	r24, 0xE1	; 225
 21a:	94 e0       	ldi	r25, 0x04	; 4
 21c:	21 50       	subi	r18, 0x01	; 1
 21e:	80 40       	sbci	r24, 0x00	; 0
 220:	90 40       	sbci	r25, 0x00	; 0
 222:	e1 f7       	brne	.-8      	; 0x21c <Select_Item+0xe>
 224:	00 c0       	rjmp	.+0      	; 0x226 <Select_Item+0x18>
 226:	00 00       	nop
 228:	08 95       	ret

0000022a <__vector_8>:
		case 0x04: //None <- LED Off
			led_select = 0x04;
		break;
	}
	
	OCR2 = led_pwm_value; //Set PWM Value
 22a:	1f 92       	push	r1
 22c:	0f 92       	push	r0
 22e:	0f b6       	in	r0, 0x3f	; 63
 230:	0f 92       	push	r0
 232:	11 24       	eor	r1, r1
 234:	0f 90       	pop	r0
 236:	0f be       	out	0x3f, r0	; 63
 238:	0f 90       	pop	r0
 23a:	1f 90       	pop	r1
 23c:	18 95       	reti

0000023e <timer0_init>:
 23e:	83 b7       	in	r24, 0x33	; 51
 240:	87 60       	ori	r24, 0x07	; 7
 242:	83 bf       	out	0x33, r24	; 51
 244:	87 b7       	in	r24, 0x37	; 55
 246:	81 60       	ori	r24, 0x01	; 1
 248:	87 bf       	out	0x37, r24	; 55
 24a:	12 be       	out	0x32, r1	; 50
 24c:	08 95       	ret

0000024e <timer1_init>:
 24e:	82 e8       	ldi	r24, 0x82	; 130
 250:	8f bd       	out	0x2f, r24	; 47
 252:	8b e1       	ldi	r24, 0x1B	; 27
 254:	8e bd       	out	0x2e, r24	; 46
 256:	87 e8       	ldi	r24, 0x87	; 135
 258:	93 e1       	ldi	r25, 0x13	; 19
 25a:	97 bd       	out	0x27, r25	; 39
 25c:	86 bd       	out	0x26, r24	; 38
 25e:	08 95       	ret

00000260 <port_setup>:
 260:	8f ef       	ldi	r24, 0xFF	; 255
 262:	8a bb       	out	0x1a, r24	; 26
 264:	11 ba       	out	0x11, r1	; 17
 266:	87 bb       	out	0x17, r24	; 23
 268:	84 bb       	out	0x14, r24	; 20
 26a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 26e:	12 b8       	out	0x02, r1	; 2
 270:	08 95       	ret

00000272 <adc_init>:
 272:	80 e4       	ldi	r24, 0x40	; 64
 274:	87 b9       	out	0x07, r24	; 7
 276:	87 e8       	ldi	r24, 0x87	; 135
 278:	86 b9       	out	0x06, r24	; 6
 27a:	08 95       	ret

0000027c <ElectroMagnet_On>:
 27c:	85 b3       	in	r24, 0x15	; 21
 27e:	8f 77       	andi	r24, 0x7F	; 127
 280:	85 bb       	out	0x15, r24	; 21
 282:	08 95       	ret

00000284 <ElectroMagnet_Off>:
 284:	85 b3       	in	r24, 0x15	; 21
 286:	80 68       	ori	r24, 0x80	; 128
 288:	85 bb       	out	0x15, r24	; 21
 28a:	08 95       	ret

0000028c <RED_LED_On>:
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
 290:	ec 01       	movw	r28, r24
 292:	89 e0       	ldi	r24, 0x09	; 9
 294:	bc df       	rcall	.-136    	; 0x20e <Select_Item>
 296:	db bd       	out	0x2b, r29	; 43
 298:	ca bd       	out	0x2a, r28	; 42
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	08 95       	ret

000002a0 <GREEN_LED_On>:
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
 2a4:	ec 01       	movw	r28, r24
 2a6:	8d e0       	ldi	r24, 0x0D	; 13
 2a8:	b2 df       	rcall	.-156    	; 0x20e <Select_Item>
 2aa:	db bd       	out	0x2b, r29	; 43
 2ac:	ca bd       	out	0x2a, r28	; 42
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	08 95       	ret

000002b4 <BLUE_LED_On>:
 2b4:	cf 93       	push	r28
 2b6:	df 93       	push	r29
 2b8:	ec 01       	movw	r28, r24
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	a8 df       	rcall	.-176    	; 0x20e <Select_Item>
 2be:	db bd       	out	0x2b, r29	; 43
 2c0:	ca bd       	out	0x2a, r28	; 42
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	08 95       	ret

000002c8 <main>:
 2c8:	cb df       	rcall	.-106    	; 0x260 <port_setup>
 2ca:	d3 df       	rcall	.-90     	; 0x272 <adc_init>
 2cc:	b8 df       	rcall	.-144    	; 0x23e <timer0_init>
 2ce:	bf df       	rcall	.-130    	; 0x24e <timer1_init>
 2d0:	fb de       	rcall	.-522    	; 0xc8 <init_BT>
 2d2:	80 ec       	ldi	r24, 0xC0	; 192
 2d4:	89 bf       	out	0x39, r24	; 57
 2d6:	80 ef       	ldi	r24, 0xF0	; 240
 2d8:	8a bf       	out	0x3a, r24	; 58
 2da:	b9 d1       	rcall	.+882    	; 0x64e <Reset_sensor_val>
 2dc:	d3 df       	rcall	.-90     	; 0x284 <ElectroMagnet_Off>
 2de:	e4 e0       	ldi	r30, 0x04	; 4
 2e0:	f1 e0       	ldi	r31, 0x01	; 1
 2e2:	85 e0       	ldi	r24, 0x05	; 5
 2e4:	80 83       	st	Z, r24
 2e6:	8f ef       	ldi	r24, 0xFF	; 255
 2e8:	9f ef       	ldi	r25, 0xFF	; 255
 2ea:	92 83       	std	Z+2, r25	; 0x02
 2ec:	81 83       	std	Z+1, r24	; 0x01
 2ee:	94 83       	std	Z+4, r25	; 0x04
 2f0:	83 83       	std	Z+3, r24	; 0x03
 2f2:	78 94       	sei
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <Servo_Allowed>
 2fa:	84 e1       	ldi	r24, 0x14	; 20
 2fc:	66 d2       	rcall	.+1228   	; 0x7ca <Servo_Set_Speed>
 2fe:	87 e7       	ldi	r24, 0x77	; 119
 300:	91 e0       	ldi	r25, 0x01	; 1
 302:	3c d2       	rcall	.+1144   	; 0x77c <Servo_Goto>
 304:	f3 d1       	rcall	.+998    	; 0x6ec <Servo_Go_Home>
 306:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state>
 30a:	84 30       	cpi	r24, 0x04	; 4
 30c:	39 f1       	breq	.+78     	; 0x35c <main+0x94>
 30e:	28 f4       	brcc	.+10     	; 0x31a <main+0x52>
 310:	81 30       	cpi	r24, 0x01	; 1
 312:	49 f0       	breq	.+18     	; 0x326 <main+0x5e>
 314:	82 30       	cpi	r24, 0x02	; 2
 316:	c9 f0       	breq	.+50     	; 0x34a <main+0x82>
 318:	f6 cf       	rjmp	.-20     	; 0x306 <main+0x3e>
 31a:	88 30       	cpi	r24, 0x08	; 8
 31c:	b1 f1       	breq	.+108    	; 0x38a <main+0xc2>
 31e:	80 31       	cpi	r24, 0x10	; 16
 320:	09 f4       	brne	.+2      	; 0x324 <main+0x5c>
 322:	5b c0       	rjmp	.+182    	; 0x3da <main+0x112>
 324:	f0 cf       	rjmp	.-32     	; 0x306 <main+0x3e>
 326:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <pressure_sensor_val>
 32a:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <pressure_sensor_val+0x1>
 32e:	85 38       	cpi	r24, 0x85	; 133
 330:	93 40       	sbci	r25, 0x03	; 3
 332:	48 f3       	brcs	.-46     	; 0x306 <main+0x3e>
 334:	83 e0       	ldi	r24, 0x03	; 3
 336:	6b df       	rcall	.-298    	; 0x20e <Select_Item>
 338:	a1 df       	rcall	.-190    	; 0x27c <ElectroMagnet_On>
 33a:	80 e3       	ldi	r24, 0x30	; 48
 33c:	d3 de       	rcall	.-602    	; 0xe4 <BT_send>
 33e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state>
 342:	88 0f       	add	r24, r24
 344:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 348:	de cf       	rjmp	.-68     	; 0x306 <main+0x3e>
 34a:	d3 de       	rcall	.-602    	; 0xf2 <BT_Receive>
 34c:	88 23       	and	r24, r24
 34e:	d9 f2       	breq	.-74     	; 0x306 <main+0x3e>
 350:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state>
 354:	88 0f       	add	r24, r24
 356:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 35a:	d5 cf       	rjmp	.-86     	; 0x306 <main+0x3e>
 35c:	87 e7       	ldi	r24, 0x77	; 119
 35e:	91 e0       	ldi	r25, 0x01	; 1
 360:	0d d2       	rcall	.+1050   	; 0x77c <Servo_Goto>
 362:	8c df       	rcall	.-232    	; 0x27c <ElectroMagnet_On>
 364:	e7 d1       	rcall	.+974    	; 0x734 <Servo_Go_Box>
 366:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <shk_detected>
 36a:	8c df       	rcall	.-232    	; 0x284 <ElectroMagnet_Off>
 36c:	8f ef       	ldi	r24, 0xFF	; 255
 36e:	97 ea       	ldi	r25, 0xA7	; 167
 370:	21 e6       	ldi	r18, 0x61	; 97
 372:	81 50       	subi	r24, 0x01	; 1
 374:	90 40       	sbci	r25, 0x00	; 0
 376:	20 40       	sbci	r18, 0x00	; 0
 378:	e1 f7       	brne	.-8      	; 0x372 <main+0xaa>
 37a:	00 c0       	rjmp	.+0      	; 0x37c <main+0xb4>
 37c:	00 00       	nop
 37e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state>
 382:	88 0f       	add	r24, r24
 384:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 388:	be cf       	rjmp	.-132    	; 0x306 <main+0x3e>
 38a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <shk_detected>
 38e:	81 30       	cpi	r24, 0x01	; 1
 390:	49 f4       	brne	.+18     	; 0x3a4 <main+0xdc>
 392:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <shk_detected>
 396:	aa d1       	rcall	.+852    	; 0x6ec <Servo_Go_Home>
 398:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state>
 39c:	88 0f       	add	r24, r24
 39e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 3a2:	b1 cf       	rjmp	.-158    	; 0x306 <main+0x3e>
 3a4:	84 e1       	ldi	r24, 0x14	; 20
 3a6:	11 d2       	rcall	.+1058   	; 0x7ca <Servo_Set_Speed>
 3a8:	a1 d1       	rcall	.+834    	; 0x6ec <Servo_Go_Home>
 3aa:	68 df       	rcall	.-304    	; 0x27c <ElectroMagnet_On>
 3ac:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <temp_en+0x1>
 3b0:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <temp_en>
 3b4:	80 e5       	ldi	r24, 0x50	; 80
 3b6:	09 d2       	rcall	.+1042   	; 0x7ca <Servo_Set_Speed>
 3b8:	bd d1       	rcall	.+890    	; 0x734 <Servo_Go_Box>
 3ba:	64 df       	rcall	.-312    	; 0x284 <ElectroMagnet_Off>
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <temp_en+0x1>
 3c4:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <temp_en>
 3c8:	84 e1       	ldi	r24, 0x14	; 20
 3ca:	ff d1       	rcall	.+1022   	; 0x7ca <Servo_Set_Speed>
 3cc:	8f d1       	rcall	.+798    	; 0x6ec <Servo_Go_Home>
 3ce:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state>
 3d2:	88 0f       	add	r24, r24
 3d4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 3d8:	96 cf       	rjmp	.-212    	; 0x306 <main+0x3e>
 3da:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <marble>
 3de:	81 11       	cpse	r24, r1
 3e0:	04 c0       	rjmp	.+8      	; 0x3ea <main+0x122>
 3e2:	84 ef       	ldi	r24, 0xF4	; 244
 3e4:	91 e0       	ldi	r25, 0x01	; 1
 3e6:	52 df       	rcall	.-348    	; 0x28c <RED_LED_On>
 3e8:	0e c0       	rjmp	.+28     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3ea:	82 30       	cpi	r24, 0x02	; 2
 3ec:	21 f4       	brne	.+8      	; 0x3f6 <main+0x12e>
 3ee:	84 ef       	ldi	r24, 0xF4	; 244
 3f0:	91 e0       	ldi	r25, 0x01	; 1
 3f2:	56 df       	rcall	.-340    	; 0x2a0 <GREEN_LED_On>
 3f4:	08 c0       	rjmp	.+16     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3f6:	81 30       	cpi	r24, 0x01	; 1
 3f8:	21 f4       	brne	.+8      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3fa:	84 ef       	ldi	r24, 0xF4	; 244
 3fc:	91 e0       	ldi	r25, 0x01	; 1
 3fe:	5a df       	rcall	.-332    	; 0x2b4 <BLUE_LED_On>
 400:	02 c0       	rjmp	.+4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 402:	83 e0       	ldi	r24, 0x03	; 3
 404:	04 df       	rcall	.-504    	; 0x20e <Select_Item>
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 40c:	7c cf       	rjmp	.-264    	; 0x306 <main+0x3e>

0000040e <Is_Shock_Interrupt>:
}

void Is_Shock_Interrupt(){
	if(shk_sensor_val <= 900)
 40e:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <shk_sensor_val>
 412:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <shk_sensor_val+0x1>
 416:	85 38       	cpi	r24, 0x85	; 133
 418:	93 40       	sbci	r25, 0x03	; 3
 41a:	18 f4       	brcc	.+6      	; 0x422 <Is_Shock_Interrupt+0x14>
		shk_detected = 0x01;
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <shk_detected>
 422:	08 95       	ret

00000424 <Is_PSD_Interrupt>:
}

void Is_PSD_Interrupt(){
	if ( (psd_sensor_val> 520)) {
 424:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <psd_sensor_val>
 428:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <psd_sensor_val+0x1>
 42c:	89 30       	cpi	r24, 0x09	; 9
 42e:	92 40       	sbci	r25, 0x02	; 2
 430:	18 f0       	brcs	.+6      	; 0x438 <Is_PSD_Interrupt+0x14>
		//PORTC |= 0x20; //0010 0000
		//PORTA &= 0xBF;
		Servo_Allowed = 0x00;
 432:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <Servo_Allowed>
 436:	08 95       	ret
	}
	else {
		//PORTC &= ~(0x20); //0100 0000
		//PORTA |= ~0xBF;
		Servo_Allowed = 0x01;
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <Servo_Allowed>
 43e:	08 95       	ret

00000440 <__vector_16>:
void adc_init(void){
	ADMUX=(1<<REFS0); //외부 레퍼런스 접압을 기준 전압으로 선택, 우측정렬, 초기 입력핀은 0번
	ADCSRA=(1<<ADEN)|(0<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //ADC enable, ADC interrupt enable 분주비 128
}

ISR(TIMER0_OVF_vect){ //Use Timer0 for collecting sensor value
 440:	1f 92       	push	r1
 442:	0f 92       	push	r0
 444:	0f b6       	in	r0, 0x3f	; 63
 446:	0f 92       	push	r0
 448:	11 24       	eor	r1, r1
 44a:	0b b6       	in	r0, 0x3b	; 59
 44c:	0f 92       	push	r0
 44e:	2f 93       	push	r18
 450:	3f 93       	push	r19
 452:	4f 93       	push	r20
 454:	5f 93       	push	r21
 456:	6f 93       	push	r22
 458:	7f 93       	push	r23
 45a:	8f 93       	push	r24
 45c:	9f 93       	push	r25
 45e:	af 93       	push	r26
 460:	bf 93       	push	r27
 462:	ef 93       	push	r30
 464:	ff 93       	push	r31
	static char idx = 0x01;
	
	switch(idx){
 466:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 46a:	84 30       	cpi	r24, 0x04	; 4
 46c:	b1 f0       	breq	.+44     	; 0x49a <__vector_16+0x5a>
 46e:	28 f4       	brcc	.+10     	; 0x47a <__vector_16+0x3a>
 470:	81 30       	cpi	r24, 0x01	; 1
 472:	49 f0       	breq	.+18     	; 0x486 <__vector_16+0x46>
 474:	82 30       	cpi	r24, 0x02	; 2
 476:	61 f0       	breq	.+24     	; 0x490 <__vector_16+0x50>
 478:	25 c0       	rjmp	.+74     	; 0x4c4 <__vector_16+0x84>
 47a:	86 30       	cpi	r24, 0x06	; 6
 47c:	c9 f0       	breq	.+50     	; 0x4b0 <__vector_16+0x70>
 47e:	90 f0       	brcs	.+36     	; 0x4a4 <__vector_16+0x64>
 480:	87 30       	cpi	r24, 0x07	; 7
 482:	d9 f0       	breq	.+54     	; 0x4ba <__vector_16+0x7a>
 484:	1f c0       	rjmp	.+62     	; 0x4c4 <__vector_16+0x84>
		case 0x01:
		Read_CDS();
 486:	89 d0       	rcall	.+274    	; 0x59a <Read_CDS>
		idx=0x02;
 488:	82 e0       	ldi	r24, 0x02	; 2
 48a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
		
		case 0x02:
		
		Read_Thermister();
 48e:	1a c0       	rjmp	.+52     	; 0x4c4 <__vector_16+0x84>
 490:	c0 d0       	rcall	.+384    	; 0x612 <Read_Thermister>
		//Is_Fire_Interrupt(); //Fire Interrupt를 걸까말까
		idx=0x04;
 492:	84 e0       	ldi	r24, 0x04	; 4
 494:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
		
		case 0x04:
		
		Read_Pressure();
 498:	15 c0       	rjmp	.+42     	; 0x4c4 <__vector_16+0x84>
 49a:	ac d0       	rcall	.+344    	; 0x5f4 <Read_Pressure>
		idx=0x05;
 49c:	85 e0       	ldi	r24, 0x05	; 5
 49e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
		
		case 0x05:
		
		Read_Shock();
 4a2:	10 c0       	rjmp	.+32     	; 0x4c4 <__vector_16+0x84>
 4a4:	c5 d0       	rcall	.+394    	; 0x630 <Read_Shock>
		Is_Shock_Interrupt(); //Shock Interrupt를 걸까말까
 4a6:	b3 df       	rcall	.-154    	; 0x40e <Is_Shock_Interrupt>
		idx=0x06;
 4a8:	86 e0       	ldi	r24, 0x06	; 6
 4aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		break;
 4ae:	0a c0       	rjmp	.+20     	; 0x4c4 <__vector_16+0x84>
		
		case 0x06:
		
		Read_Fire();
 4b0:	83 d0       	rcall	.+262    	; 0x5b8 <Read_Fire>
		idx = 0x07;
 4b2:	87 e0       	ldi	r24, 0x07	; 7
 4b4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
 4b8:	05 c0       	rjmp	.+10     	; 0x4c4 <__vector_16+0x84>
		
		case 0x07:
		
		Read_PSD();
 4ba:	8d d0       	rcall	.+282    	; 0x5d6 <Read_PSD>
 4bc:	b3 df       	rcall	.-154    	; 0x424 <Is_PSD_Interrupt>
		Is_PSD_Interrupt();
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		idx = 0x01;
 4c4:	87 b1       	in	r24, 0x07	; 7
 4c6:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
	}
	
	//ADC Mux 선택, ADC 시작 시키고 ISR 종료
	ADMUX = (ADMUX & 0x40) | (idx & 0x0F); //다음 센서 선택
 4ca:	9f 70       	andi	r25, 0x0F	; 15
 4cc:	80 74       	andi	r24, 0x40	; 64
 4ce:	89 2b       	or	r24, r25
 4d0:	87 b9       	out	0x07, r24	; 7
 4d2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <cds_sensor_val>
	//ADCSRA |= (1 << ADSC); // ADC 변환 시작
	
	if (cds_sensor_val > 100) { //CDS
 4d6:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <cds_sensor_val+0x1>
 4da:	85 36       	cpi	r24, 0x65	; 101
 4dc:	91 05       	cpc	r25, r1
 4de:	20 f0       	brcs	.+8      	; 0x4e8 <__vector_16+0xa8>
 4e0:	8b b3       	in	r24, 0x1b	; 27
 4e2:	8e 7f       	andi	r24, 0xFE	; 254
		PORTA &= 0xFE; //CDS에 해당하는 LED만 켜기 //1111 1110
 4e4:	8b bb       	out	0x1b, r24	; 27
 4e6:	03 c0       	rjmp	.+6      	; 0x4ee <__vector_16+0xae>
 4e8:	8b b3       	in	r24, 0x1b	; 27
 4ea:	81 60       	ori	r24, 0x01	; 1
	}
	else {
		PORTA |= ~0xFE; //CDS에 해단하는 LED만 끄기
 4ec:	8b bb       	out	0x1b, r24	; 27
 4ee:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <temp_sensor_val>
	}
	
	if (temp_sensor_val > 200) {
 4f2:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <temp_sensor_val+0x1>
 4f6:	89 3c       	cpi	r24, 0xC9	; 201
 4f8:	91 05       	cpc	r25, r1
 4fa:	20 f0       	brcs	.+8      	; 0x504 <__vector_16+0xc4>
 4fc:	8b b3       	in	r24, 0x1b	; 27
 4fe:	8d 7f       	andi	r24, 0xFD	; 253
		PORTA &= 0xFD; // 1111 1101
 500:	8b bb       	out	0x1b, r24	; 27
 502:	03 c0       	rjmp	.+6      	; 0x50a <__vector_16+0xca>
 504:	8b b3       	in	r24, 0x1b	; 27
 506:	82 60       	ori	r24, 0x02	; 2
	}
	else {
		PORTA |= ~0xFD;
 508:	8b bb       	out	0x1b, r24	; 27
 50a:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <pressure_sensor_val>
	}
	
	
	
	if (pressure_sensor_val > 900) {//보류 -
 50e:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <pressure_sensor_val+0x1>
 512:	85 38       	cpi	r24, 0x85	; 133
 514:	93 40       	sbci	r25, 0x03	; 3
 516:	20 f0       	brcs	.+8      	; 0x520 <__vector_16+0xe0>
 518:	8b b3       	in	r24, 0x1b	; 27
 51a:	8b 7f       	andi	r24, 0xFB	; 251
		PORTA &= 0xFB; //1111 1011
 51c:	8b bb       	out	0x1b, r24	; 27
 51e:	03 c0       	rjmp	.+6      	; 0x526 <__vector_16+0xe6>
 520:	8b b3       	in	r24, 0x1b	; 27
 522:	84 60       	ori	r24, 0x04	; 4
	}
	else {
		PORTA |= ~0xFB;
 524:	8b bb       	out	0x1b, r24	; 27
 526:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <shk_detected>
	}
	
	if ( shk_detected) {
 52a:	88 23       	and	r24, r24
 52c:	21 f0       	breq	.+8      	; 0x536 <__vector_16+0xf6>
 52e:	8b b3       	in	r24, 0x1b	; 27
 530:	87 7f       	andi	r24, 0xF7	; 247
		PORTA &= 0xF7;
 532:	8b bb       	out	0x1b, r24	; 27
 534:	03 c0       	rjmp	.+6      	; 0x53c <__vector_16+0xfc>
 536:	8b b3       	in	r24, 0x1b	; 27
 538:	88 60       	ori	r24, 0x08	; 8
		//shk_detected = 0x00;
	}
	else {
		PORTA |= ~0xF7;
 53a:	8b bb       	out	0x1b, r24	; 27
 53c:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <fire_sensor_val>
	}
	
	if (fire_sensor_val > 100) {//-
 540:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <fire_sensor_val+0x1>
 544:	85 36       	cpi	r24, 0x65	; 101
 546:	91 05       	cpc	r25, r1
 548:	20 f0       	brcs	.+8      	; 0x552 <__vector_16+0x112>
 54a:	8b b3       	in	r24, 0x1b	; 27
 54c:	8f 7e       	andi	r24, 0xEF	; 239
		PORTA &= 0xEF;
 54e:	8b bb       	out	0x1b, r24	; 27
 550:	03 c0       	rjmp	.+6      	; 0x558 <__vector_16+0x118>
 552:	8b b3       	in	r24, 0x1b	; 27
 554:	80 61       	ori	r24, 0x10	; 16
	}
	else {
		PORTA |= ~0xEF;
 556:	8b bb       	out	0x1b, r24	; 27
 558:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <psd_sensor_val>
	}
	
	
	if ( (psd_sensor_val> 520)) {
 55c:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <psd_sensor_val+0x1>
 560:	89 30       	cpi	r24, 0x09	; 9
 562:	92 40       	sbci	r25, 0x02	; 2
 564:	20 f0       	brcs	.+8      	; 0x56e <__vector_16+0x12e>
 566:	8b b3       	in	r24, 0x1b	; 27
 568:	8f 7b       	andi	r24, 0xBF	; 191
		
		PORTA &= 0xBF;
 56a:	8b bb       	out	0x1b, r24	; 27
 56c:	03 c0       	rjmp	.+6      	; 0x574 <__vector_16+0x134>
 56e:	8b b3       	in	r24, 0x1b	; 27
 570:	80 64       	ori	r24, 0x40	; 64
	}
	else {
		PORTA |= ~0xBF;
 572:	8b bb       	out	0x1b, r24	; 27
 574:	ff 91       	pop	r31
 576:	ef 91       	pop	r30
	}
}
 578:	bf 91       	pop	r27
 57a:	af 91       	pop	r26
 57c:	9f 91       	pop	r25
 57e:	8f 91       	pop	r24
 580:	7f 91       	pop	r23
 582:	6f 91       	pop	r22
 584:	5f 91       	pop	r21
 586:	4f 91       	pop	r20
 588:	3f 91       	pop	r19
 58a:	2f 91       	pop	r18
 58c:	0f 90       	pop	r0
 58e:	0b be       	out	0x3b, r0	; 59
 590:	0f 90       	pop	r0
 592:	0f be       	out	0x3f, r0	; 63
 594:	0f 90       	pop	r0
 596:	1f 90       	pop	r1
 598:	18 95       	reti

0000059a <Read_CDS>:
 59a:	86 b1       	in	r24, 0x06	; 6
 59c:	80 64       	ori	r24, 0x40	; 64
unsigned short hpf(unsigned short previous_value, unsigned short new_value, float alpha) {
	return (unsigned short)(alpha * (previous_value + new_value) - previous_value);
}

inline void Read_CDS(){
	ADCSRA |= (1 << ADSC); // ADC 변환 시작
 59e:	86 b9       	out	0x06, r24	; 6
	while(!(ADCSRA & (1 << ADIF))); // ADC 변환 완료 플래그가 설정될 때까지 기다림
 5a0:	34 9b       	sbis	0x06, 4	; 6
 5a2:	fe cf       	rjmp	.-4      	; 0x5a0 <Read_CDS+0x6>
	ADCSRA |= (1<< ADIF); // ADC 변환 완료 플래그 클리어
 5a4:	86 b1       	in	r24, 0x06	; 6
 5a6:	80 61       	ori	r24, 0x10	; 16
 5a8:	86 b9       	out	0x06, r24	; 6
	/*static unsigned short previous_value = 0;
	cds_sensor_val = lpf(previous_value, ADC, 0.1);
	previous_value = cds_sensor_val;*/
	cds_sensor_val=ADC;
 5aa:	84 b1       	in	r24, 0x04	; 4
 5ac:	95 b1       	in	r25, 0x05	; 5
 5ae:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <cds_sensor_val+0x1>
 5b2:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <cds_sensor_val>
 5b6:	08 95       	ret

000005b8 <Read_Fire>:
	//필터링 해야됨
}

inline void Read_Fire(){
	ADCSRA |= (1 << ADSC); // ADC 변환 시작
 5b8:	86 b1       	in	r24, 0x06	; 6
 5ba:	80 64       	ori	r24, 0x40	; 64
 5bc:	86 b9       	out	0x06, r24	; 6
	while(!(ADCSRA & (1 << ADIF))); // ADC 변환 완료 플래그가 설정될 때까지 기다림
 5be:	34 9b       	sbis	0x06, 4	; 6
 5c0:	fe cf       	rjmp	.-4      	; 0x5be <Read_Fire+0x6>
	ADCSRA |= (1 << ADIF); // ADC 변환 완료 플래그 클리어
 5c2:	86 b1       	in	r24, 0x06	; 6
 5c4:	80 61       	ori	r24, 0x10	; 16
 5c6:	86 b9       	out	0x06, r24	; 6
	//static unsigned short previous_value = 0;
	fire_sensor_val = ADC;//lpf(previous_value, ADC, 0.1);
 5c8:	84 b1       	in	r24, 0x04	; 4
 5ca:	95 b1       	in	r25, 0x05	; 5
 5cc:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <fire_sensor_val+0x1>
 5d0:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <fire_sensor_val>
 5d4:	08 95       	ret

000005d6 <Read_PSD>:
	//previous_value = fire_sensor_val;
	//필터링 해야됨
}
inline void Read_PSD(){
	ADCSRA |= (1 << ADSC); // ADC 변환 시작
 5d6:	86 b1       	in	r24, 0x06	; 6
 5d8:	80 64       	ori	r24, 0x40	; 64
 5da:	86 b9       	out	0x06, r24	; 6
	while(!(ADCSRA & (1 << ADIF))); // ADC 변환 완료 플래그가 설정될 때까지 기다림
 5dc:	34 9b       	sbis	0x06, 4	; 6
 5de:	fe cf       	rjmp	.-4      	; 0x5dc <Read_PSD+0x6>
	ADCSRA |= (1 << ADIF); // ADC 변환 완료 플래그 클리어
 5e0:	86 b1       	in	r24, 0x06	; 6
 5e2:	80 61       	ori	r24, 0x10	; 16
 5e4:	86 b9       	out	0x06, r24	; 6
	//static unsigned short previous_value = 0;
	psd_sensor_val = ADC;//lpf(previous_value, ADC, 0.1);
 5e6:	84 b1       	in	r24, 0x04	; 4
 5e8:	95 b1       	in	r25, 0x05	; 5
 5ea:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <psd_sensor_val+0x1>
 5ee:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <psd_sensor_val>
 5f2:	08 95       	ret

000005f4 <Read_Pressure>:
	//previous_value = psd_sensor_val;
	//필터링 해야됨
}

inline void Read_Pressure(){
	ADCSRA |= (1 << ADSC); // ADC 변환 시작
 5f4:	86 b1       	in	r24, 0x06	; 6
 5f6:	80 64       	ori	r24, 0x40	; 64
 5f8:	86 b9       	out	0x06, r24	; 6
	while(!(ADCSRA & (1 << ADIF))); // ADC 변환 완료 플래그가 설정될 때까지 기다림
 5fa:	34 9b       	sbis	0x06, 4	; 6
 5fc:	fe cf       	rjmp	.-4      	; 0x5fa <Read_Pressure+0x6>
	ADCSRA |= (1 << ADIF); // ADC 변환 완료 플래그 클리어
 5fe:	86 b1       	in	r24, 0x06	; 6
 600:	80 61       	ori	r24, 0x10	; 16
 602:	86 b9       	out	0x06, r24	; 6
	//static uint16_t previous_value = 0;
	pressure_sensor_val = ADC;//lpf(previous_value, ADC, 1);
 604:	84 b1       	in	r24, 0x04	; 4
 606:	95 b1       	in	r25, 0x05	; 5
 608:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <pressure_sensor_val+0x1>
 60c:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <pressure_sensor_val>
 610:	08 95       	ret

00000612 <Read_Thermister>:
	//previous_value = pressure_sensor_val;
	//필터링 해야됨
}

inline void Read_Thermister(){
	ADCSRA |= (1 << ADSC); // ADC 변환 시작
 612:	86 b1       	in	r24, 0x06	; 6
 614:	80 64       	ori	r24, 0x40	; 64
 616:	86 b9       	out	0x06, r24	; 6
	while(!(ADCSRA & (1 << ADIF))); // ADC 변환 완료 플래그가 설정될 때까지 기다림
 618:	34 9b       	sbis	0x06, 4	; 6
 61a:	fe cf       	rjmp	.-4      	; 0x618 <Read_Thermister+0x6>
	ADCSRA |= (1 << ADIF); // ADC 변환 완료 플래그 클리어
 61c:	86 b1       	in	r24, 0x06	; 6
 61e:	80 61       	ori	r24, 0x10	; 16
 620:	86 b9       	out	0x06, r24	; 6
	//static unsigned short previous_value = 0;
	temp_sensor_val = ADC;//lpf(previous_value, ADC, 1);
 622:	84 b1       	in	r24, 0x04	; 4
 624:	95 b1       	in	r25, 0x05	; 5
 626:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <temp_sensor_val+0x1>
 62a:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <temp_sensor_val>
 62e:	08 95       	ret

00000630 <Read_Shock>:
	//previous_value = temp_sensor_val;
	//필터링 해야됨
}

inline void Read_Shock(){
	ADCSRA |= (1 << ADSC); // ADC 변환 시작
 630:	86 b1       	in	r24, 0x06	; 6
 632:	80 64       	ori	r24, 0x40	; 64
 634:	86 b9       	out	0x06, r24	; 6
	while(!(ADCSRA & (1 << ADIF))); // ADC 변환 완료 플래그가 설정될 때까지 기다림
 636:	34 9b       	sbis	0x06, 4	; 6
 638:	fe cf       	rjmp	.-4      	; 0x636 <Read_Shock+0x6>
	ADCSRA |= (1 << ADIF); // ADC 변환 완료 플래그 클리어
 63a:	86 b1       	in	r24, 0x06	; 6
 63c:	80 61       	ori	r24, 0x10	; 16
 63e:	86 b9       	out	0x06, r24	; 6
	//static unsigned short previous_value = 0;
	shk_sensor_val = ADC;//hpf(previous_value, ADC, 1);
 640:	84 b1       	in	r24, 0x04	; 4
 642:	95 b1       	in	r25, 0x05	; 5
 644:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <shk_sensor_val+0x1>
 648:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <shk_sensor_val>
 64c:	08 95       	ret

0000064e <Reset_sensor_val>:
	//previous_value = shk_sensor_val;
	//필터링 해야됨
}

inline void Reset_sensor_val(){
	pressure_sensor_val = 0;
 64e:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <pressure_sensor_val+0x1>
 652:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <pressure_sensor_val>
	cds_sensor_val	= 0;
 656:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <cds_sensor_val+0x1>
 65a:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <cds_sensor_val>
	temp_sensor_val = 0;	temp_en = 0;
 65e:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <temp_sensor_val+0x1>
 662:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <temp_sensor_val>
 666:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <temp_en+0x1>
 66a:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <temp_en>
	shk_sensor_val	= 0;	shk_detected = 0;
 66e:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <shk_sensor_val+0x1>
 672:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <shk_sensor_val>
 676:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <shk_detected>
	psd_sensor_val	= 0;
 67a:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <psd_sensor_val+0x1>
 67e:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <psd_sensor_val>
	fire_sensor_val	= 0;
 682:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <fire_sensor_val+0x1>
 686:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <fire_sensor_val>
 68a:	08 95       	ret

0000068c <Servo_Act>:
}
void Servo_Go_Marble(){
	Select_Item(ITEM_SERVO);
	Servo_Set_Target(Marble_pos);
	Servo_Act();
}
 68c:	40 e0       	ldi	r20, 0x00	; 0
 68e:	50 e0       	ldi	r21, 0x00	; 0
 690:	21 c0       	rjmp	.+66     	; 0x6d4 <Servo_Act+0x48>
 692:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <Servo_Allowed>
 696:	22 23       	and	r18, r18
 698:	b9 f0       	breq	.+46     	; 0x6c8 <Servo_Act+0x3c>
 69a:	4f 5f       	subi	r20, 0xFF	; 255
 69c:	5f 4f       	sbci	r21, 0xFF	; 255
 69e:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <Servo_increment_threshold>
 6a2:	30 91 2a 01 	lds	r19, 0x012A	; 0x80012a <Servo_increment_threshold+0x1>
 6a6:	42 17       	cp	r20, r18
 6a8:	53 07       	cpc	r21, r19
 6aa:	71 f4       	brne	.+28     	; 0x6c8 <Servo_Act+0x3c>
 6ac:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <Servo_step>
 6b0:	30 91 2e 01 	lds	r19, 0x012E	; 0x80012e <Servo_step+0x1>
 6b4:	82 0f       	add	r24, r18
 6b6:	93 1f       	adc	r25, r19
 6b8:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <Servo_pos+0x1>
 6bc:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <Servo_pos>
 6c0:	9b bd       	out	0x2b, r25	; 43
 6c2:	8a bd       	out	0x2a, r24	; 42
 6c4:	40 e0       	ldi	r20, 0x00	; 0
 6c6:	50 e0       	ldi	r21, 0x00	; 0
 6c8:	8f e8       	ldi	r24, 0x8F	; 143
 6ca:	91 e0       	ldi	r25, 0x01	; 1
 6cc:	01 97       	sbiw	r24, 0x01	; 1
 6ce:	f1 f7       	brne	.-4      	; 0x6cc <Servo_Act+0x40>
 6d0:	00 c0       	rjmp	.+0      	; 0x6d2 <Servo_Act+0x46>
 6d2:	00 00       	nop
 6d4:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <Servo_pos>
 6d8:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <Servo_pos+0x1>
 6dc:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <Servo_target>
 6e0:	30 91 1c 01 	lds	r19, 0x011C	; 0x80011c <Servo_target+0x1>
 6e4:	82 17       	cp	r24, r18
 6e6:	93 07       	cpc	r25, r19
 6e8:	a1 f6       	brne	.-88     	; 0x692 <Servo_Act+0x6>
 6ea:	08 95       	ret

000006ec <Servo_Go_Home>:
 6ec:	82 e0       	ldi	r24, 0x02	; 2
 6ee:	8f dd       	rcall	.-1250   	; 0x20e <Select_Item>
 6f0:	82 e0       	ldi	r24, 0x02	; 2
 6f2:	8d dd       	rcall	.-1254   	; 0x20e <Select_Item>
 6f4:	82 e8       	ldi	r24, 0x82	; 130
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <Servo_target+0x1>
 6fc:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <Servo_target>
 700:	20 91 25 01 	lds	r18, 0x0125	; 0x800125 <Servo_pos>
 704:	30 91 26 01 	lds	r19, 0x0126	; 0x800126 <Servo_pos+0x1>
 708:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <Servo_target>
 70c:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <Servo_target+0x1>
 710:	28 17       	cp	r18, r24
 712:	39 07       	cpc	r19, r25
 714:	38 f0       	brcs	.+14     	; 0x724 <Servo_Go_Home+0x38>
 716:	8f ef       	ldi	r24, 0xFF	; 255
 718:	9f ef       	ldi	r25, 0xFF	; 255
 71a:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <Servo_step+0x1>
 71e:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <Servo_step>
 722:	06 c0       	rjmp	.+12     	; 0x730 <Servo_Go_Home+0x44>
 724:	81 e0       	ldi	r24, 0x01	; 1
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <Servo_step+0x1>
 72c:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <Servo_step>
 730:	ad cf       	rjmp	.-166    	; 0x68c <Servo_Act>
 732:	08 95       	ret

00000734 <Servo_Go_Box>:
 734:	82 e0       	ldi	r24, 0x02	; 2
 736:	6b dd       	rcall	.-1322   	; 0x20e <Select_Item>
 738:	82 e0       	ldi	r24, 0x02	; 2
 73a:	69 dd       	rcall	.-1326   	; 0x20e <Select_Item>
 73c:	8c e6       	ldi	r24, 0x6C	; 108
 73e:	92 e0       	ldi	r25, 0x02	; 2
 740:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <Servo_target+0x1>
 744:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <Servo_target>
 748:	20 91 25 01 	lds	r18, 0x0125	; 0x800125 <Servo_pos>
 74c:	30 91 26 01 	lds	r19, 0x0126	; 0x800126 <Servo_pos+0x1>
 750:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <Servo_target>
 754:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <Servo_target+0x1>
 758:	28 17       	cp	r18, r24
 75a:	39 07       	cpc	r19, r25
 75c:	38 f0       	brcs	.+14     	; 0x76c <Servo_Go_Box+0x38>
 75e:	8f ef       	ldi	r24, 0xFF	; 255
 760:	9f ef       	ldi	r25, 0xFF	; 255
 762:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <Servo_step+0x1>
 766:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <Servo_step>
 76a:	06 c0       	rjmp	.+12     	; 0x778 <Servo_Go_Box+0x44>
 76c:	81 e0       	ldi	r24, 0x01	; 1
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <Servo_step+0x1>
 774:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <Servo_step>
 778:	89 cf       	rjmp	.-238    	; 0x68c <Servo_Act>
 77a:	08 95       	ret

0000077c <Servo_Goto>:
void Servo_Goto(unsigned short pos){
 77c:	cf 93       	push	r28
 77e:	df 93       	push	r29
 780:	ec 01       	movw	r28, r24
	Select_Item(ITEM_SERVO);
 782:	82 e0       	ldi	r24, 0x02	; 2
 784:	44 dd       	rcall	.-1400   	; 0x20e <Select_Item>
	Servo_pos = val;
	OCR1A = Servo_pos;
}

inline void Servo_Set_Target(unsigned short val){
	Select_Item(ITEM_SERVO);
 786:	82 e0       	ldi	r24, 0x02	; 2
 788:	42 dd       	rcall	.-1404   	; 0x20e <Select_Item>
	
	Servo_target = val;
 78a:	d0 93 1c 01 	sts	0x011C, r29	; 0x80011c <Servo_target+0x1>
 78e:	c0 93 1b 01 	sts	0x011B, r28	; 0x80011b <Servo_target>
	
	if(Servo_pos >= Servo_target) Servo_step = -1;
 792:	20 91 25 01 	lds	r18, 0x0125	; 0x800125 <Servo_pos>
 796:	30 91 26 01 	lds	r19, 0x0126	; 0x800126 <Servo_pos+0x1>
 79a:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <Servo_target>
 79e:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <Servo_target+0x1>
 7a2:	28 17       	cp	r18, r24
 7a4:	39 07       	cpc	r19, r25
 7a6:	38 f0       	brcs	.+14     	; 0x7b6 <Servo_Goto+0x3a>
 7a8:	8f ef       	ldi	r24, 0xFF	; 255
 7aa:	9f ef       	ldi	r25, 0xFF	; 255
 7ac:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <Servo_step+0x1>
 7b0:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <Servo_step>
 7b4:	06 c0       	rjmp	.+12     	; 0x7c2 <Servo_Goto+0x46>
	else Servo_step = 1;
 7b6:	81 e0       	ldi	r24, 0x01	; 1
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <Servo_step+0x1>
 7be:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <Servo_step>
	Servo_Act();
}
void Servo_Goto(unsigned short pos){
	Select_Item(ITEM_SERVO);
	Servo_Set_Target(pos);
	Servo_Act();
 7c2:	64 df       	rcall	.-312    	; 0x68c <Servo_Act>
}
 7c4:	df 91       	pop	r29
 7c6:	cf 91       	pop	r28
 7c8:	08 95       	ret

000007ca <Servo_Set_Speed>:
	}
	
}

void Servo_Set_Speed(char sp){
	Servo_increment_threshold = sp;
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <Servo_increment_threshold+0x1>
 7d0:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <Servo_increment_threshold>
 7d4:	08 95       	ret

000007d6 <_exit>:
 7d6:	f8 94       	cli

000007d8 <__stop_program>:
 7d8:	ff cf       	rjmp	.-2      	; 0x7d8 <__stop_program>
