
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000007c0  00000854  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800102  00800102  00000856  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000856  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000888  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000008c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001099  00000000  00000000  00000994  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a16  00000000  00000000  00001a2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000710  00000000  00000000  00002443  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  00002b54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000685  00000000  00000000  00002d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003fd  00000000  00000000  00003401  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000037fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	43 c0       	rjmp	.+134    	; 0xc8 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	95 c0       	rjmp	.+298    	; 0x180 <__vector_21>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ec       	ldi	r30, 0xC0	; 192
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 32       	cpi	r26, 0x25	; 37
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	aa d0       	rcall	.+340    	; 0x218 <main>
  c4:	7b c3       	rjmp	.+1782   	; 0x7bc <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_16>:
		}
	return 0;
	
}

ISR(TIMER0_OVF_vect) { // 타이머0 오버플로우 인터럽트
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
	switch (idx) {
  d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  da:	84 30       	cpi	r24, 0x04	; 4
  dc:	f9 f0       	breq	.+62     	; 0x11c <__vector_16+0x54>
  de:	28 f4       	brcc	.+10     	; 0xea <__vector_16+0x22>
  e0:	81 30       	cpi	r24, 0x01	; 1
  e2:	51 f0       	breq	.+20     	; 0xf8 <__vector_16+0x30>
  e4:	82 30       	cpi	r24, 0x02	; 2
  e6:	89 f0       	breq	.+34     	; 0x10a <__vector_16+0x42>
  e8:	3a c0       	rjmp	.+116    	; 0x15e <__vector_16+0x96>
  ea:	80 31       	cpi	r24, 0x10	; 16
  ec:	49 f1       	breq	.+82     	; 0x140 <__vector_16+0x78>
  ee:	80 32       	cpi	r24, 0x20	; 32
  f0:	81 f1       	breq	.+96     	; 0x152 <__vector_16+0x8a>
  f2:	88 30       	cpi	r24, 0x08	; 8
  f4:	a1 f5       	brne	.+104    	; 0x15e <__vector_16+0x96>
  f6:	1b c0       	rjmp	.+54     	; 0x12e <__vector_16+0x66>
		case 0x01:
		current_channel = 0x01; // CDS 센서
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <current_channel>
		idx <<=1;
  fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 102:	88 0f       	add	r24, r24
 104:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
 108:	2a c0       	rjmp	.+84     	; 0x15e <__vector_16+0x96>
		case 0x02:
		current_channel = 0x06; // Fire 센서
 10a:	86 e0       	ldi	r24, 0x06	; 6
 10c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <current_channel>
		idx <<=1;
 110:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 114:	88 0f       	add	r24, r24
 116:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
 11a:	21 c0       	rjmp	.+66     	; 0x15e <__vector_16+0x96>
		case 0x04:
		current_channel = 0x04; // Pressure 센서
 11c:	84 e0       	ldi	r24, 0x04	; 4
 11e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <current_channel>
		idx <<=1;
 122:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 126:	88 0f       	add	r24, r24
 128:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
 12c:	18 c0       	rjmp	.+48     	; 0x15e <__vector_16+0x96>
		case 0x08:
		current_channel = 0x07; // PSD 센서
 12e:	87 e0       	ldi	r24, 0x07	; 7
 130:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <current_channel>
		idx <<=1;
 134:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 138:	88 0f       	add	r24, r24
 13a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
 13e:	0f c0       	rjmp	.+30     	; 0x15e <__vector_16+0x96>
		case 0x10:
		current_channel = 0x05; // Shock 센서
 140:	85 e0       	ldi	r24, 0x05	; 5
 142:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <current_channel>
		idx <<=1;
 146:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 14a:	88 0f       	add	r24, r24
 14c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
 150:	06 c0       	rjmp	.+12     	; 0x15e <__vector_16+0x96>
		case 0x20:
		current_channel = 0x03; // Thermister 센서
 152:	83 e0       	ldi	r24, 0x03	; 3
 154:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <current_channel>
		idx = 0x01;
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
	}

	// MUX 설정 및 ADC 변환 시작
	ADMUX = (ADMUX & 0xF0) | (current_channel & 0x0F);
 15e:	97 b1       	in	r25, 0x07	; 7
 160:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <current_channel>
 164:	90 7f       	andi	r25, 0xF0	; 240
 166:	8f 70       	andi	r24, 0x0F	; 15
 168:	89 2b       	or	r24, r25
 16a:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC); // ADC 변환 시작
 16c:	86 b1       	in	r24, 0x06	; 6
 16e:	80 64       	ori	r24, 0x40	; 64
 170:	86 b9       	out	0x06, r24	; 6
}
 172:	9f 91       	pop	r25
 174:	8f 91       	pop	r24
 176:	0f 90       	pop	r0
 178:	0f be       	out	0x3f, r0	; 63
 17a:	0f 90       	pop	r0
 17c:	1f 90       	pop	r1
 17e:	18 95       	reti

00000180 <__vector_21>:


ISR(ADC_vect) { // 인터럽트 사용해서 ADC 값 읽어옴
 180:	1f 92       	push	r1
 182:	0f 92       	push	r0
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	0f 92       	push	r0
 188:	11 24       	eor	r1, r1
 18a:	0b b6       	in	r0, 0x3b	; 59
 18c:	0f 92       	push	r0
 18e:	2f 93       	push	r18
 190:	3f 93       	push	r19
 192:	4f 93       	push	r20
 194:	5f 93       	push	r21
 196:	6f 93       	push	r22
 198:	7f 93       	push	r23
 19a:	8f 93       	push	r24
 19c:	9f 93       	push	r25
 19e:	af 93       	push	r26
 1a0:	bf 93       	push	r27
 1a2:	ef 93       	push	r30
 1a4:	ff 93       	push	r31
	
	switch (current_channel) {
 1a6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <current_channel>
 1aa:	84 30       	cpi	r24, 0x04	; 4
 1ac:	81 f0       	breq	.+32     	; 0x1ce <__vector_21+0x4e>
 1ae:	28 f4       	brcc	.+10     	; 0x1ba <__vector_21+0x3a>
 1b0:	81 30       	cpi	r24, 0x01	; 1
 1b2:	49 f0       	breq	.+18     	; 0x1c6 <__vector_21+0x46>
 1b4:	83 30       	cpi	r24, 0x03	; 3
 1b6:	89 f0       	breq	.+34     	; 0x1da <__vector_21+0x5a>
 1b8:	11 c0       	rjmp	.+34     	; 0x1dc <__vector_21+0x5c>
 1ba:	86 30       	cpi	r24, 0x06	; 6
 1bc:	31 f0       	breq	.+12     	; 0x1ca <__vector_21+0x4a>
 1be:	58 f0       	brcs	.+22     	; 0x1d6 <__vector_21+0x56>
 1c0:	87 30       	cpi	r24, 0x07	; 7
 1c2:	39 f0       	breq	.+14     	; 0x1d2 <__vector_21+0x52>
 1c4:	0b c0       	rjmp	.+22     	; 0x1dc <__vector_21+0x5c>
		case 0x01:
		Read_CDS();
 1c6:	e9 d0       	rcall	.+466    	; 0x39a <Read_CDS>

		break;
		
		case 0x06:
		Read_Fire();
 1c8:	09 c0       	rjmp	.+18     	; 0x1dc <__vector_21+0x5c>

		break;
 1ca:	fc d0       	rcall	.+504    	; 0x3c4 <Read_Fire>
		
		case 0x04:
		Read_Pressure();
 1cc:	07 c0       	rjmp	.+14     	; 0x1dc <__vector_21+0x5c>

		break;
		
		case 0x07:
		Read_PSD();
 1ce:	24 d1       	rcall	.+584    	; 0x418 <Read_Pressure>

		break;
 1d0:	05 c0       	rjmp	.+10     	; 0x1dc <__vector_21+0x5c>
		
		case 0x05:
		Read_Shock();
 1d2:	0d d1       	rcall	.+538    	; 0x3ee <Read_PSD>
 1d4:	03 c0       	rjmp	.+6      	; 0x1dc <__vector_21+0x5c>

		break;
 1d6:	4a d1       	rcall	.+660    	; 0x46c <Read_Shock>
		
		case 0x03:
		Read_Thermister();
 1d8:	01 c0       	rjmp	.+2      	; 0x1dc <__vector_21+0x5c>
 1da:	33 d1       	rcall	.+614    	; 0x442 <Read_Thermister>
		
		break;
	}

}
 1dc:	ff 91       	pop	r31
 1de:	ef 91       	pop	r30
 1e0:	bf 91       	pop	r27
 1e2:	af 91       	pop	r26
 1e4:	9f 91       	pop	r25
 1e6:	8f 91       	pop	r24
 1e8:	7f 91       	pop	r23
 1ea:	6f 91       	pop	r22
 1ec:	5f 91       	pop	r21
 1ee:	4f 91       	pop	r20
 1f0:	3f 91       	pop	r19
 1f2:	2f 91       	pop	r18
 1f4:	0f 90       	pop	r0
 1f6:	0b be       	out	0x3b, r0	; 59
 1f8:	0f 90       	pop	r0
 1fa:	0f be       	out	0x3f, r0	; 63
 1fc:	0f 90       	pop	r0
 1fe:	1f 90       	pop	r1
 200:	18 95       	reti

00000202 <adc_init>:


//ADC 입력
//ADC 초기화
void adc_init(void){
	ADMUX=(1<<REFS0); //외부 레퍼런스 접압을 기준 전압으로 선택, 우측정렬, 초기 입력핀은 0번
 202:	80 e4       	ldi	r24, 0x40	; 64
 204:	87 b9       	out	0x07, r24	; 7
	ADCSRA=(1<<ADEN)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //ADC enable, ADC interrupt enable 분주비 128
 206:	8f e8       	ldi	r24, 0x8F	; 143
 208:	86 b9       	out	0x06, r24	; 6
 20a:	08 95       	ret

0000020c <timer0_init>:
	ADCSRA |=(1<<ADSC); //ADC 변화 시작
}*/


void timer0_init(void) {
	TCCR0 = (1 << CS02) | (1 << CS00); // 분주비 1024
 20c:	85 e0       	ldi	r24, 0x05	; 5
 20e:	83 bf       	out	0x33, r24	; 51
	TIMSK = (1 << TOIE0); // 타이머0 오버플로우 인터럽트 허용
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	87 bf       	out	0x37, r24	; 55
	TCNT0 = 0; // 타이머 카운터 초기화
 214:	12 be       	out	0x32, r1	; 50
 216:	08 95       	ret

00000218 <main>:

//**** Debug **************************************************************************************************************************************************//

#if DEBUG_ == 0
//현준이 일하는 곳 맨 위에 #define DEBUG_ 부분을 0으로 바꾸기
int main(void){
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	1f 92       	push	r1
 21e:	cd b7       	in	r28, 0x3d	; 61
 220:	de b7       	in	r29, 0x3e	; 62
	
	volatile unsigned char LED=0xFF;
 222:	1f ef       	ldi	r17, 0xFF	; 255
 224:	19 83       	std	Y+1, r17	; 0x01
	
	adc_init(); // ADC 초기화
 226:	ed df       	rcall	.-38     	; 0x202 <adc_init>
	timer0_init(); // 타이머0 초기화
 228:	f1 df       	rcall	.-30     	; 0x20c <timer0_init>
	
	Reset_sensor_val(); //센서 변수 초기화
 22a:	35 d1       	rcall	.+618    	; 0x496 <Reset_sensor_val>
 22c:	78 94       	sei
	
	sei(); // 전역 인터럽트 허용
 22e:	1a bb       	out	0x1a, r17	; 26

	DDRA=0xFF;
 230:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRF=0x00;
 234:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <current_channel>
	
	while (1) {
		// ADC 채널 값을 읽고 필요한 변수에 저장
		
		//가이드
		switch (current_channel) {
 238:	84 30       	cpi	r24, 0x04	; 4
 23a:	01 f1       	breq	.+64     	; 0x27c <main+0x64>
 23c:	28 f4       	brcc	.+10     	; 0x248 <main+0x30>
 23e:	81 30       	cpi	r24, 0x01	; 1
 240:	49 f0       	breq	.+18     	; 0x254 <main+0x3c>
 242:	83 30       	cpi	r24, 0x03	; 3
 244:	c9 f1       	breq	.+114    	; 0x2b8 <main+0xa0>
 246:	41 c0       	rjmp	.+130    	; 0x2ca <main+0xb2>
 248:	86 30       	cpi	r24, 0x06	; 6
 24a:	71 f0       	breq	.+28     	; 0x268 <main+0x50>
 24c:	58 f1       	brcs	.+86     	; 0x2a4 <main+0x8c>
 24e:	87 30       	cpi	r24, 0x07	; 7
 250:	f9 f0       	breq	.+62     	; 0x290 <main+0x78>
 252:	3b c0       	rjmp	.+118    	; 0x2ca <main+0xb2>
 254:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <cds_sensor_val>
			
			case 0x01: // CDS 센서 처리
				if (cds_sensor_val > 100) {
 258:	85 36       	cpi	r24, 0x65	; 101
 25a:	18 f0       	brcs	.+6      	; 0x262 <main+0x4a>
 25c:	8e ef       	ldi	r24, 0xFE	; 254
					LED = 0xFE;
 25e:	89 83       	std	Y+1, r24	; 0x01
 260:	34 c0       	rjmp	.+104    	; 0x2ca <main+0xb2>
 262:	8f ef       	ldi	r24, 0xFF	; 255
				} 
				else {
					LED = 0xFF;
 264:	89 83       	std	Y+1, r24	; 0x01
 266:	31 c0       	rjmp	.+98     	; 0x2ca <main+0xb2>
 268:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <fire_sensor_val>
				}
			break;
			
			case 0x06: // Fire 센서 처리
				if (fire_sensor_val > 200) {
 26c:	89 3c       	cpi	r24, 0xC9	; 201
 26e:	18 f0       	brcs	.+6      	; 0x276 <main+0x5e>
 270:	8d ef       	ldi	r24, 0xFD	; 253
					LED = 0xFD;
 272:	89 83       	std	Y+1, r24	; 0x01
 274:	2a c0       	rjmp	.+84     	; 0x2ca <main+0xb2>
 276:	8f ef       	ldi	r24, 0xFF	; 255
				} 
				else {
					LED = 0xFF;
 278:	89 83       	std	Y+1, r24	; 0x01
 27a:	27 c0       	rjmp	.+78     	; 0x2ca <main+0xb2>
 27c:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <pressure_sensor_val>
				}
			break;
			
			case 0x04: // 압력 센서 처리
				if (pressure_sensor_val > 200) {
 280:	89 3c       	cpi	r24, 0xC9	; 201
 282:	18 f0       	brcs	.+6      	; 0x28a <main+0x72>
 284:	8c ef       	ldi	r24, 0xFC	; 252
					LED = 0xFC;
 286:	89 83       	std	Y+1, r24	; 0x01
 288:	20 c0       	rjmp	.+64     	; 0x2ca <main+0xb2>
 28a:	8f ef       	ldi	r24, 0xFF	; 255
				} 
				else {
					LED = 0xFF;
 28c:	89 83       	std	Y+1, r24	; 0x01
 28e:	1d c0       	rjmp	.+58     	; 0x2ca <main+0xb2>
 290:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <psd_sensor_val>
				}
			break;
			
			case 0x07: // PSD 센서 처리
				if (psd_sensor_val > 100) {
 294:	85 36       	cpi	r24, 0x65	; 101
 296:	18 f0       	brcs	.+6      	; 0x29e <main+0x86>
 298:	8b ef       	ldi	r24, 0xFB	; 251
					LED = 0xFB;
 29a:	89 83       	std	Y+1, r24	; 0x01
 29c:	16 c0       	rjmp	.+44     	; 0x2ca <main+0xb2>
 29e:	8f ef       	ldi	r24, 0xFF	; 255
				} 
				else {
					LED = 0xFF;
 2a0:	89 83       	std	Y+1, r24	; 0x01
 2a2:	13 c0       	rjmp	.+38     	; 0x2ca <main+0xb2>
 2a4:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <shk_sensor_val>
				}
			break;
			
			case 0x05: // 충격 센서 처리
				if (shk_sensor_val > 100) {
 2a8:	85 36       	cpi	r24, 0x65	; 101
 2aa:	18 f0       	brcs	.+6      	; 0x2b2 <main+0x9a>
 2ac:	8a ef       	ldi	r24, 0xFA	; 250
					LED = 0xFA;
 2ae:	89 83       	std	Y+1, r24	; 0x01
 2b0:	0c c0       	rjmp	.+24     	; 0x2ca <main+0xb2>
 2b2:	8f ef       	ldi	r24, 0xFF	; 255
				} 
				else {
					LED = 0xFF;
 2b4:	89 83       	std	Y+1, r24	; 0x01
 2b6:	09 c0       	rjmp	.+18     	; 0x2ca <main+0xb2>
 2b8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <temp_sensor_val>
				}
			break;
			
			case 0x03: // 온도 센서 처리
				if (temp_sensor_val > 100) {
 2bc:	85 36       	cpi	r24, 0x65	; 101
 2be:	18 f0       	brcs	.+6      	; 0x2c6 <main+0xae>
 2c0:	8f e7       	ldi	r24, 0x7F	; 127
					LED = 0x7F;
 2c2:	89 83       	std	Y+1, r24	; 0x01
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <main+0xb2>
 2c6:	8f ef       	ldi	r24, 0xFF	; 255
				} 
				else {
					LED = 0xFF;
 2c8:	89 83       	std	Y+1, r24	; 0x01
 2ca:	89 81       	ldd	r24, Y+1	; 0x01
				}
			break;
			}
			PORTA=LED;
 2cc:	8b bb       	out	0x1b, r24	; 27
 2ce:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d0:	80 e7       	ldi	r24, 0x70	; 112
 2d2:	92 e0       	ldi	r25, 0x02	; 2
 2d4:	21 50       	subi	r18, 0x01	; 1
 2d6:	80 40       	sbci	r24, 0x00	; 0
 2d8:	90 40       	sbci	r25, 0x00	; 0
 2da:	e1 f7       	brne	.-8      	; 0x2d4 <main+0xbc>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <main+0xc6>
 2de:	00 00       	nop
 2e0:	a9 cf       	rjmp	.-174    	; 0x234 <main+0x1c>

000002e2 <lpf>:
﻿#include "Sensors.h"
#include <avr/io.h>

//Read_{센서} 부분에서 필터링 실행

uint16_t lpf(uint16_t current_value, uint16_t new_value, float alpha) {
 2e2:	8f 92       	push	r8
 2e4:	9f 92       	push	r9
 2e6:	af 92       	push	r10
 2e8:	bf 92       	push	r11
 2ea:	cf 92       	push	r12
 2ec:	df 92       	push	r13
 2ee:	ef 92       	push	r14
 2f0:	ff 92       	push	r15
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
 2f6:	ec 01       	movw	r28, r24
 2f8:	69 01       	movw	r12, r18
 2fa:	7a 01       	movw	r14, r20
	return (uint16_t)(alpha * new_value + (1 - alpha) * current_value);
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	6c d1       	rcall	.+728    	; 0x5da <__floatunsisf>
 302:	a7 01       	movw	r20, r14
 304:	96 01       	movw	r18, r12
 306:	f7 d1       	rcall	.+1006   	; 0x6f6 <__mulsf3>
 308:	4b 01       	movw	r8, r22
 30a:	5c 01       	movw	r10, r24
 30c:	a7 01       	movw	r20, r14
 30e:	96 01       	movw	r18, r12
 310:	60 e0       	ldi	r22, 0x00	; 0
 312:	70 e0       	ldi	r23, 0x00	; 0
 314:	80 e8       	ldi	r24, 0x80	; 128
 316:	9f e3       	ldi	r25, 0x3F	; 63
 318:	cf d0       	rcall	.+414    	; 0x4b8 <__subsf3>
 31a:	6b 01       	movw	r12, r22
 31c:	7c 01       	movw	r14, r24
 31e:	be 01       	movw	r22, r28
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	5a d1       	rcall	.+692    	; 0x5da <__floatunsisf>
 326:	a7 01       	movw	r20, r14
 328:	96 01       	movw	r18, r12
 32a:	e5 d1       	rcall	.+970    	; 0x6f6 <__mulsf3>
 32c:	9b 01       	movw	r18, r22
 32e:	ac 01       	movw	r20, r24
 330:	c5 01       	movw	r24, r10
 332:	b4 01       	movw	r22, r8
 334:	c2 d0       	rcall	.+388    	; 0x4ba <__addsf3>
 336:	25 d1       	rcall	.+586    	; 0x582 <__fixunssfsi>
}
 338:	cb 01       	movw	r24, r22
 33a:	df 91       	pop	r29
 33c:	cf 91       	pop	r28
 33e:	ff 90       	pop	r15
 340:	ef 90       	pop	r14
 342:	df 90       	pop	r13
 344:	cf 90       	pop	r12
 346:	bf 90       	pop	r11
 348:	af 90       	pop	r10
 34a:	9f 90       	pop	r9
 34c:	8f 90       	pop	r8
 34e:	08 95       	ret

00000350 <hpf>:

uint16_t hpf(uint16_t previous_value, uint16_t new_value, float alpha) {
 350:	cf 92       	push	r12
 352:	df 92       	push	r13
 354:	ef 92       	push	r14
 356:	ff 92       	push	r15
 358:	cf 93       	push	r28
 35a:	df 93       	push	r29
 35c:	ec 01       	movw	r28, r24
 35e:	69 01       	movw	r12, r18
 360:	7a 01       	movw	r14, r20
	return (uint16_t)(alpha * (previous_value + new_value) - previous_value);
 362:	68 0f       	add	r22, r24
 364:	79 1f       	adc	r23, r25
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	37 d1       	rcall	.+622    	; 0x5da <__floatunsisf>
 36c:	a7 01       	movw	r20, r14
 36e:	96 01       	movw	r18, r12
 370:	c2 d1       	rcall	.+900    	; 0x6f6 <__mulsf3>
 372:	6b 01       	movw	r12, r22
 374:	7c 01       	movw	r14, r24
 376:	be 01       	movw	r22, r28
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	2e d1       	rcall	.+604    	; 0x5da <__floatunsisf>
 37e:	9b 01       	movw	r18, r22
 380:	ac 01       	movw	r20, r24
 382:	c7 01       	movw	r24, r14
 384:	b6 01       	movw	r22, r12
 386:	98 d0       	rcall	.+304    	; 0x4b8 <__subsf3>
 388:	fc d0       	rcall	.+504    	; 0x582 <__fixunssfsi>
}
 38a:	cb 01       	movw	r24, r22
 38c:	df 91       	pop	r29
 38e:	cf 91       	pop	r28
 390:	ff 90       	pop	r15
 392:	ef 90       	pop	r14
 394:	df 90       	pop	r13
 396:	cf 90       	pop	r12
 398:	08 95       	ret

0000039a <Read_CDS>:

inline void Read_CDS(){
	static uint16_t previous_value = 0;
	cds_sensor_val = lpf(previous_value, ADC, 0.1);
 39a:	64 b1       	in	r22, 0x04	; 4
 39c:	75 b1       	in	r23, 0x05	; 5
 39e:	2d ec       	ldi	r18, 0xCD	; 205
 3a0:	3c ec       	ldi	r19, 0xCC	; 204
 3a2:	4c ec       	ldi	r20, 0xCC	; 204
 3a4:	5d e3       	ldi	r21, 0x3D	; 61
 3a6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <previous_value.1628>
 3aa:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <previous_value.1628+0x1>
 3ae:	99 df       	rcall	.-206    	; 0x2e2 <lpf>
 3b0:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <cds_sensor_val>
	previous_value = cds_sensor_val;
 3b4:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <cds_sensor_val>
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <previous_value.1628+0x1>
 3be:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <previous_value.1628>
 3c2:	08 95       	ret

000003c4 <Read_Fire>:
	//필터링 해야됨
}

inline void Read_Fire(){
	static uint16_t previous_value = 0;
	fire_sensor_val = lpf(previous_value, ADC, 0.1);
 3c4:	64 b1       	in	r22, 0x04	; 4
 3c6:	75 b1       	in	r23, 0x05	; 5
 3c8:	2d ec       	ldi	r18, 0xCD	; 205
 3ca:	3c ec       	ldi	r19, 0xCC	; 204
 3cc:	4c ec       	ldi	r20, 0xCC	; 204
 3ce:	5d e3       	ldi	r21, 0x3D	; 61
 3d0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <previous_value.1631>
 3d4:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <previous_value.1631+0x1>
 3d8:	84 df       	rcall	.-248    	; 0x2e2 <lpf>
 3da:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <fire_sensor_val>
	previous_value = fire_sensor_val;
 3de:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <fire_sensor_val>
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <previous_value.1631+0x1>
 3e8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <previous_value.1631>
 3ec:	08 95       	ret

000003ee <Read_PSD>:
	//필터링 해야됨
}
inline void Read_PSD(){
	static uint16_t previous_value = 0;
	psd_sensor_val = lpf(previous_value, ADC, 0.1);
 3ee:	64 b1       	in	r22, 0x04	; 4
 3f0:	75 b1       	in	r23, 0x05	; 5
 3f2:	2d ec       	ldi	r18, 0xCD	; 205
 3f4:	3c ec       	ldi	r19, 0xCC	; 204
 3f6:	4c ec       	ldi	r20, 0xCC	; 204
 3f8:	5d e3       	ldi	r21, 0x3D	; 61
 3fa:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <previous_value.1634>
 3fe:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <previous_value.1634+0x1>
 402:	6f df       	rcall	.-290    	; 0x2e2 <lpf>
 404:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <psd_sensor_val>
	previous_value = psd_sensor_val;
 408:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <psd_sensor_val>
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <previous_value.1634+0x1>
 412:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <previous_value.1634>
 416:	08 95       	ret

00000418 <Read_Pressure>:
	//필터링 해야됨
}

inline void Read_Pressure(){
	static uint16_t previous_value = 0;
	pressure_sensor_val = hpf(previous_value, ADC, 0.1);
 418:	64 b1       	in	r22, 0x04	; 4
 41a:	75 b1       	in	r23, 0x05	; 5
 41c:	2d ec       	ldi	r18, 0xCD	; 205
 41e:	3c ec       	ldi	r19, 0xCC	; 204
 420:	4c ec       	ldi	r20, 0xCC	; 204
 422:	5d e3       	ldi	r21, 0x3D	; 61
 424:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <previous_value.1637>
 428:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <previous_value.1637+0x1>
 42c:	91 df       	rcall	.-222    	; 0x350 <hpf>
 42e:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <pressure_sensor_val>
	previous_value = pressure_sensor_val;
 432:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <pressure_sensor_val>
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <previous_value.1637+0x1>
 43c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <previous_value.1637>
 440:	08 95       	ret

00000442 <Read_Thermister>:
	//필터링 해야됨
}

inline void Read_Thermister(){
	static uint16_t previous_value = 0;
	temp_sensor_val = lpf(previous_value, ADC, 0.1);
 442:	64 b1       	in	r22, 0x04	; 4
 444:	75 b1       	in	r23, 0x05	; 5
 446:	2d ec       	ldi	r18, 0xCD	; 205
 448:	3c ec       	ldi	r19, 0xCC	; 204
 44a:	4c ec       	ldi	r20, 0xCC	; 204
 44c:	5d e3       	ldi	r21, 0x3D	; 61
 44e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <previous_value.1640>
 452:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <previous_value.1640+0x1>
 456:	45 df       	rcall	.-374    	; 0x2e2 <lpf>
 458:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <temp_sensor_val>
	previous_value = temp_sensor_val;
 45c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <temp_sensor_val>
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <previous_value.1640+0x1>
 466:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <previous_value.1640>
 46a:	08 95       	ret

0000046c <Read_Shock>:
	//필터링 해야됨
}

inline void Read_Shock(){
	static uint16_t previous_value = 0;
	shk_sensor_val = hpf(previous_value, ADC, 0.1);
 46c:	64 b1       	in	r22, 0x04	; 4
 46e:	75 b1       	in	r23, 0x05	; 5
 470:	2d ec       	ldi	r18, 0xCD	; 205
 472:	3c ec       	ldi	r19, 0xCC	; 204
 474:	4c ec       	ldi	r20, 0xCC	; 204
 476:	5d e3       	ldi	r21, 0x3D	; 61
 478:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 47c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 480:	67 df       	rcall	.-306    	; 0x350 <hpf>
 482:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <shk_sensor_val>
	previous_value = shk_sensor_val;
 486:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <shk_sensor_val>
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 490:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 494:	08 95       	ret

00000496 <Reset_sensor_val>:
	//필터링 해야됨
}

inline void Reset_sensor_val(){
	pressure_sensor_val = 0;
 496:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <pressure_sensor_val>
	cds_sensor_val	= 0;
 49a:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <cds_sensor_val>
	temp_sensor_val = 0;	temp_en = 0;
 49e:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <temp_sensor_val>
 4a2:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <temp_en>
	shk_sensor_val	= 0;	shk_detected = 0;
 4a6:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <shk_sensor_val>
 4aa:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <shk_detected>
	psd_sensor_val	= 0;
 4ae:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <psd_sensor_val>
	fire_sensor_val	= 0;
 4b2:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <fire_sensor_val>
 4b6:	08 95       	ret

000004b8 <__subsf3>:
 4b8:	50 58       	subi	r21, 0x80	; 128

000004ba <__addsf3>:
 4ba:	bb 27       	eor	r27, r27
 4bc:	aa 27       	eor	r26, r26
 4be:	0e d0       	rcall	.+28     	; 0x4dc <__addsf3x>
 4c0:	e0 c0       	rjmp	.+448    	; 0x682 <__fp_round>
 4c2:	d1 d0       	rcall	.+418    	; 0x666 <__fp_pscA>
 4c4:	30 f0       	brcs	.+12     	; 0x4d2 <__addsf3+0x18>
 4c6:	d6 d0       	rcall	.+428    	; 0x674 <__fp_pscB>
 4c8:	20 f0       	brcs	.+8      	; 0x4d2 <__addsf3+0x18>
 4ca:	31 f4       	brne	.+12     	; 0x4d8 <__addsf3+0x1e>
 4cc:	9f 3f       	cpi	r25, 0xFF	; 255
 4ce:	11 f4       	brne	.+4      	; 0x4d4 <__addsf3+0x1a>
 4d0:	1e f4       	brtc	.+6      	; 0x4d8 <__addsf3+0x1e>
 4d2:	c6 c0       	rjmp	.+396    	; 0x660 <__fp_nan>
 4d4:	0e f4       	brtc	.+2      	; 0x4d8 <__addsf3+0x1e>
 4d6:	e0 95       	com	r30
 4d8:	e7 fb       	bst	r30, 7
 4da:	bc c0       	rjmp	.+376    	; 0x654 <__fp_inf>

000004dc <__addsf3x>:
 4dc:	e9 2f       	mov	r30, r25
 4de:	e2 d0       	rcall	.+452    	; 0x6a4 <__fp_split3>
 4e0:	80 f3       	brcs	.-32     	; 0x4c2 <__addsf3+0x8>
 4e2:	ba 17       	cp	r27, r26
 4e4:	62 07       	cpc	r22, r18
 4e6:	73 07       	cpc	r23, r19
 4e8:	84 07       	cpc	r24, r20
 4ea:	95 07       	cpc	r25, r21
 4ec:	18 f0       	brcs	.+6      	; 0x4f4 <__addsf3x+0x18>
 4ee:	71 f4       	brne	.+28     	; 0x50c <__addsf3x+0x30>
 4f0:	9e f5       	brtc	.+102    	; 0x558 <__addsf3x+0x7c>
 4f2:	fa c0       	rjmp	.+500    	; 0x6e8 <__fp_zero>
 4f4:	0e f4       	brtc	.+2      	; 0x4f8 <__addsf3x+0x1c>
 4f6:	e0 95       	com	r30
 4f8:	0b 2e       	mov	r0, r27
 4fa:	ba 2f       	mov	r27, r26
 4fc:	a0 2d       	mov	r26, r0
 4fe:	0b 01       	movw	r0, r22
 500:	b9 01       	movw	r22, r18
 502:	90 01       	movw	r18, r0
 504:	0c 01       	movw	r0, r24
 506:	ca 01       	movw	r24, r20
 508:	a0 01       	movw	r20, r0
 50a:	11 24       	eor	r1, r1
 50c:	ff 27       	eor	r31, r31
 50e:	59 1b       	sub	r21, r25
 510:	99 f0       	breq	.+38     	; 0x538 <__addsf3x+0x5c>
 512:	59 3f       	cpi	r21, 0xF9	; 249
 514:	50 f4       	brcc	.+20     	; 0x52a <__addsf3x+0x4e>
 516:	50 3e       	cpi	r21, 0xE0	; 224
 518:	68 f1       	brcs	.+90     	; 0x574 <__addsf3x+0x98>
 51a:	1a 16       	cp	r1, r26
 51c:	f0 40       	sbci	r31, 0x00	; 0
 51e:	a2 2f       	mov	r26, r18
 520:	23 2f       	mov	r18, r19
 522:	34 2f       	mov	r19, r20
 524:	44 27       	eor	r20, r20
 526:	58 5f       	subi	r21, 0xF8	; 248
 528:	f3 cf       	rjmp	.-26     	; 0x510 <__addsf3x+0x34>
 52a:	46 95       	lsr	r20
 52c:	37 95       	ror	r19
 52e:	27 95       	ror	r18
 530:	a7 95       	ror	r26
 532:	f0 40       	sbci	r31, 0x00	; 0
 534:	53 95       	inc	r21
 536:	c9 f7       	brne	.-14     	; 0x52a <__addsf3x+0x4e>
 538:	7e f4       	brtc	.+30     	; 0x558 <__addsf3x+0x7c>
 53a:	1f 16       	cp	r1, r31
 53c:	ba 0b       	sbc	r27, r26
 53e:	62 0b       	sbc	r22, r18
 540:	73 0b       	sbc	r23, r19
 542:	84 0b       	sbc	r24, r20
 544:	ba f0       	brmi	.+46     	; 0x574 <__addsf3x+0x98>
 546:	91 50       	subi	r25, 0x01	; 1
 548:	a1 f0       	breq	.+40     	; 0x572 <__addsf3x+0x96>
 54a:	ff 0f       	add	r31, r31
 54c:	bb 1f       	adc	r27, r27
 54e:	66 1f       	adc	r22, r22
 550:	77 1f       	adc	r23, r23
 552:	88 1f       	adc	r24, r24
 554:	c2 f7       	brpl	.-16     	; 0x546 <__addsf3x+0x6a>
 556:	0e c0       	rjmp	.+28     	; 0x574 <__addsf3x+0x98>
 558:	ba 0f       	add	r27, r26
 55a:	62 1f       	adc	r22, r18
 55c:	73 1f       	adc	r23, r19
 55e:	84 1f       	adc	r24, r20
 560:	48 f4       	brcc	.+18     	; 0x574 <__addsf3x+0x98>
 562:	87 95       	ror	r24
 564:	77 95       	ror	r23
 566:	67 95       	ror	r22
 568:	b7 95       	ror	r27
 56a:	f7 95       	ror	r31
 56c:	9e 3f       	cpi	r25, 0xFE	; 254
 56e:	08 f0       	brcs	.+2      	; 0x572 <__addsf3x+0x96>
 570:	b3 cf       	rjmp	.-154    	; 0x4d8 <__addsf3+0x1e>
 572:	93 95       	inc	r25
 574:	88 0f       	add	r24, r24
 576:	08 f0       	brcs	.+2      	; 0x57a <__addsf3x+0x9e>
 578:	99 27       	eor	r25, r25
 57a:	ee 0f       	add	r30, r30
 57c:	97 95       	ror	r25
 57e:	87 95       	ror	r24
 580:	08 95       	ret

00000582 <__fixunssfsi>:
 582:	98 d0       	rcall	.+304    	; 0x6b4 <__fp_splitA>
 584:	88 f0       	brcs	.+34     	; 0x5a8 <__fixunssfsi+0x26>
 586:	9f 57       	subi	r25, 0x7F	; 127
 588:	90 f0       	brcs	.+36     	; 0x5ae <__fixunssfsi+0x2c>
 58a:	b9 2f       	mov	r27, r25
 58c:	99 27       	eor	r25, r25
 58e:	b7 51       	subi	r27, 0x17	; 23
 590:	a0 f0       	brcs	.+40     	; 0x5ba <__fixunssfsi+0x38>
 592:	d1 f0       	breq	.+52     	; 0x5c8 <__fixunssfsi+0x46>
 594:	66 0f       	add	r22, r22
 596:	77 1f       	adc	r23, r23
 598:	88 1f       	adc	r24, r24
 59a:	99 1f       	adc	r25, r25
 59c:	1a f0       	brmi	.+6      	; 0x5a4 <__fixunssfsi+0x22>
 59e:	ba 95       	dec	r27
 5a0:	c9 f7       	brne	.-14     	; 0x594 <__fixunssfsi+0x12>
 5a2:	12 c0       	rjmp	.+36     	; 0x5c8 <__fixunssfsi+0x46>
 5a4:	b1 30       	cpi	r27, 0x01	; 1
 5a6:	81 f0       	breq	.+32     	; 0x5c8 <__fixunssfsi+0x46>
 5a8:	9f d0       	rcall	.+318    	; 0x6e8 <__fp_zero>
 5aa:	b1 e0       	ldi	r27, 0x01	; 1
 5ac:	08 95       	ret
 5ae:	9c c0       	rjmp	.+312    	; 0x6e8 <__fp_zero>
 5b0:	67 2f       	mov	r22, r23
 5b2:	78 2f       	mov	r23, r24
 5b4:	88 27       	eor	r24, r24
 5b6:	b8 5f       	subi	r27, 0xF8	; 248
 5b8:	39 f0       	breq	.+14     	; 0x5c8 <__fixunssfsi+0x46>
 5ba:	b9 3f       	cpi	r27, 0xF9	; 249
 5bc:	cc f3       	brlt	.-14     	; 0x5b0 <__fixunssfsi+0x2e>
 5be:	86 95       	lsr	r24
 5c0:	77 95       	ror	r23
 5c2:	67 95       	ror	r22
 5c4:	b3 95       	inc	r27
 5c6:	d9 f7       	brne	.-10     	; 0x5be <__fixunssfsi+0x3c>
 5c8:	3e f4       	brtc	.+14     	; 0x5d8 <__fixunssfsi+0x56>
 5ca:	90 95       	com	r25
 5cc:	80 95       	com	r24
 5ce:	70 95       	com	r23
 5d0:	61 95       	neg	r22
 5d2:	7f 4f       	sbci	r23, 0xFF	; 255
 5d4:	8f 4f       	sbci	r24, 0xFF	; 255
 5d6:	9f 4f       	sbci	r25, 0xFF	; 255
 5d8:	08 95       	ret

000005da <__floatunsisf>:
 5da:	e8 94       	clt
 5dc:	09 c0       	rjmp	.+18     	; 0x5f0 <__floatsisf+0x12>

000005de <__floatsisf>:
 5de:	97 fb       	bst	r25, 7
 5e0:	3e f4       	brtc	.+14     	; 0x5f0 <__floatsisf+0x12>
 5e2:	90 95       	com	r25
 5e4:	80 95       	com	r24
 5e6:	70 95       	com	r23
 5e8:	61 95       	neg	r22
 5ea:	7f 4f       	sbci	r23, 0xFF	; 255
 5ec:	8f 4f       	sbci	r24, 0xFF	; 255
 5ee:	9f 4f       	sbci	r25, 0xFF	; 255
 5f0:	99 23       	and	r25, r25
 5f2:	a9 f0       	breq	.+42     	; 0x61e <__floatsisf+0x40>
 5f4:	f9 2f       	mov	r31, r25
 5f6:	96 e9       	ldi	r25, 0x96	; 150
 5f8:	bb 27       	eor	r27, r27
 5fa:	93 95       	inc	r25
 5fc:	f6 95       	lsr	r31
 5fe:	87 95       	ror	r24
 600:	77 95       	ror	r23
 602:	67 95       	ror	r22
 604:	b7 95       	ror	r27
 606:	f1 11       	cpse	r31, r1
 608:	f8 cf       	rjmp	.-16     	; 0x5fa <__floatsisf+0x1c>
 60a:	fa f4       	brpl	.+62     	; 0x64a <__floatsisf+0x6c>
 60c:	bb 0f       	add	r27, r27
 60e:	11 f4       	brne	.+4      	; 0x614 <__floatsisf+0x36>
 610:	60 ff       	sbrs	r22, 0
 612:	1b c0       	rjmp	.+54     	; 0x64a <__floatsisf+0x6c>
 614:	6f 5f       	subi	r22, 0xFF	; 255
 616:	7f 4f       	sbci	r23, 0xFF	; 255
 618:	8f 4f       	sbci	r24, 0xFF	; 255
 61a:	9f 4f       	sbci	r25, 0xFF	; 255
 61c:	16 c0       	rjmp	.+44     	; 0x64a <__floatsisf+0x6c>
 61e:	88 23       	and	r24, r24
 620:	11 f0       	breq	.+4      	; 0x626 <__floatsisf+0x48>
 622:	96 e9       	ldi	r25, 0x96	; 150
 624:	11 c0       	rjmp	.+34     	; 0x648 <__floatsisf+0x6a>
 626:	77 23       	and	r23, r23
 628:	21 f0       	breq	.+8      	; 0x632 <__floatsisf+0x54>
 62a:	9e e8       	ldi	r25, 0x8E	; 142
 62c:	87 2f       	mov	r24, r23
 62e:	76 2f       	mov	r23, r22
 630:	05 c0       	rjmp	.+10     	; 0x63c <__floatsisf+0x5e>
 632:	66 23       	and	r22, r22
 634:	71 f0       	breq	.+28     	; 0x652 <__floatsisf+0x74>
 636:	96 e8       	ldi	r25, 0x86	; 134
 638:	86 2f       	mov	r24, r22
 63a:	70 e0       	ldi	r23, 0x00	; 0
 63c:	60 e0       	ldi	r22, 0x00	; 0
 63e:	2a f0       	brmi	.+10     	; 0x64a <__floatsisf+0x6c>
 640:	9a 95       	dec	r25
 642:	66 0f       	add	r22, r22
 644:	77 1f       	adc	r23, r23
 646:	88 1f       	adc	r24, r24
 648:	da f7       	brpl	.-10     	; 0x640 <__floatsisf+0x62>
 64a:	88 0f       	add	r24, r24
 64c:	96 95       	lsr	r25
 64e:	87 95       	ror	r24
 650:	97 f9       	bld	r25, 7
 652:	08 95       	ret

00000654 <__fp_inf>:
 654:	97 f9       	bld	r25, 7
 656:	9f 67       	ori	r25, 0x7F	; 127
 658:	80 e8       	ldi	r24, 0x80	; 128
 65a:	70 e0       	ldi	r23, 0x00	; 0
 65c:	60 e0       	ldi	r22, 0x00	; 0
 65e:	08 95       	ret

00000660 <__fp_nan>:
 660:	9f ef       	ldi	r25, 0xFF	; 255
 662:	80 ec       	ldi	r24, 0xC0	; 192
 664:	08 95       	ret

00000666 <__fp_pscA>:
 666:	00 24       	eor	r0, r0
 668:	0a 94       	dec	r0
 66a:	16 16       	cp	r1, r22
 66c:	17 06       	cpc	r1, r23
 66e:	18 06       	cpc	r1, r24
 670:	09 06       	cpc	r0, r25
 672:	08 95       	ret

00000674 <__fp_pscB>:
 674:	00 24       	eor	r0, r0
 676:	0a 94       	dec	r0
 678:	12 16       	cp	r1, r18
 67a:	13 06       	cpc	r1, r19
 67c:	14 06       	cpc	r1, r20
 67e:	05 06       	cpc	r0, r21
 680:	08 95       	ret

00000682 <__fp_round>:
 682:	09 2e       	mov	r0, r25
 684:	03 94       	inc	r0
 686:	00 0c       	add	r0, r0
 688:	11 f4       	brne	.+4      	; 0x68e <__fp_round+0xc>
 68a:	88 23       	and	r24, r24
 68c:	52 f0       	brmi	.+20     	; 0x6a2 <__fp_round+0x20>
 68e:	bb 0f       	add	r27, r27
 690:	40 f4       	brcc	.+16     	; 0x6a2 <__fp_round+0x20>
 692:	bf 2b       	or	r27, r31
 694:	11 f4       	brne	.+4      	; 0x69a <__fp_round+0x18>
 696:	60 ff       	sbrs	r22, 0
 698:	04 c0       	rjmp	.+8      	; 0x6a2 <__fp_round+0x20>
 69a:	6f 5f       	subi	r22, 0xFF	; 255
 69c:	7f 4f       	sbci	r23, 0xFF	; 255
 69e:	8f 4f       	sbci	r24, 0xFF	; 255
 6a0:	9f 4f       	sbci	r25, 0xFF	; 255
 6a2:	08 95       	ret

000006a4 <__fp_split3>:
 6a4:	57 fd       	sbrc	r21, 7
 6a6:	90 58       	subi	r25, 0x80	; 128
 6a8:	44 0f       	add	r20, r20
 6aa:	55 1f       	adc	r21, r21
 6ac:	59 f0       	breq	.+22     	; 0x6c4 <__fp_splitA+0x10>
 6ae:	5f 3f       	cpi	r21, 0xFF	; 255
 6b0:	71 f0       	breq	.+28     	; 0x6ce <__fp_splitA+0x1a>
 6b2:	47 95       	ror	r20

000006b4 <__fp_splitA>:
 6b4:	88 0f       	add	r24, r24
 6b6:	97 fb       	bst	r25, 7
 6b8:	99 1f       	adc	r25, r25
 6ba:	61 f0       	breq	.+24     	; 0x6d4 <__fp_splitA+0x20>
 6bc:	9f 3f       	cpi	r25, 0xFF	; 255
 6be:	79 f0       	breq	.+30     	; 0x6de <__fp_splitA+0x2a>
 6c0:	87 95       	ror	r24
 6c2:	08 95       	ret
 6c4:	12 16       	cp	r1, r18
 6c6:	13 06       	cpc	r1, r19
 6c8:	14 06       	cpc	r1, r20
 6ca:	55 1f       	adc	r21, r21
 6cc:	f2 cf       	rjmp	.-28     	; 0x6b2 <__fp_split3+0xe>
 6ce:	46 95       	lsr	r20
 6d0:	f1 df       	rcall	.-30     	; 0x6b4 <__fp_splitA>
 6d2:	08 c0       	rjmp	.+16     	; 0x6e4 <__fp_splitA+0x30>
 6d4:	16 16       	cp	r1, r22
 6d6:	17 06       	cpc	r1, r23
 6d8:	18 06       	cpc	r1, r24
 6da:	99 1f       	adc	r25, r25
 6dc:	f1 cf       	rjmp	.-30     	; 0x6c0 <__fp_splitA+0xc>
 6de:	86 95       	lsr	r24
 6e0:	71 05       	cpc	r23, r1
 6e2:	61 05       	cpc	r22, r1
 6e4:	08 94       	sec
 6e6:	08 95       	ret

000006e8 <__fp_zero>:
 6e8:	e8 94       	clt

000006ea <__fp_szero>:
 6ea:	bb 27       	eor	r27, r27
 6ec:	66 27       	eor	r22, r22
 6ee:	77 27       	eor	r23, r23
 6f0:	cb 01       	movw	r24, r22
 6f2:	97 f9       	bld	r25, 7
 6f4:	08 95       	ret

000006f6 <__mulsf3>:
 6f6:	0b d0       	rcall	.+22     	; 0x70e <__mulsf3x>
 6f8:	c4 cf       	rjmp	.-120    	; 0x682 <__fp_round>
 6fa:	b5 df       	rcall	.-150    	; 0x666 <__fp_pscA>
 6fc:	28 f0       	brcs	.+10     	; 0x708 <__mulsf3+0x12>
 6fe:	ba df       	rcall	.-140    	; 0x674 <__fp_pscB>
 700:	18 f0       	brcs	.+6      	; 0x708 <__mulsf3+0x12>
 702:	95 23       	and	r25, r21
 704:	09 f0       	breq	.+2      	; 0x708 <__mulsf3+0x12>
 706:	a6 cf       	rjmp	.-180    	; 0x654 <__fp_inf>
 708:	ab cf       	rjmp	.-170    	; 0x660 <__fp_nan>
 70a:	11 24       	eor	r1, r1
 70c:	ee cf       	rjmp	.-36     	; 0x6ea <__fp_szero>

0000070e <__mulsf3x>:
 70e:	ca df       	rcall	.-108    	; 0x6a4 <__fp_split3>
 710:	a0 f3       	brcs	.-24     	; 0x6fa <__mulsf3+0x4>

00000712 <__mulsf3_pse>:
 712:	95 9f       	mul	r25, r21
 714:	d1 f3       	breq	.-12     	; 0x70a <__mulsf3+0x14>
 716:	95 0f       	add	r25, r21
 718:	50 e0       	ldi	r21, 0x00	; 0
 71a:	55 1f       	adc	r21, r21
 71c:	62 9f       	mul	r22, r18
 71e:	f0 01       	movw	r30, r0
 720:	72 9f       	mul	r23, r18
 722:	bb 27       	eor	r27, r27
 724:	f0 0d       	add	r31, r0
 726:	b1 1d       	adc	r27, r1
 728:	63 9f       	mul	r22, r19
 72a:	aa 27       	eor	r26, r26
 72c:	f0 0d       	add	r31, r0
 72e:	b1 1d       	adc	r27, r1
 730:	aa 1f       	adc	r26, r26
 732:	64 9f       	mul	r22, r20
 734:	66 27       	eor	r22, r22
 736:	b0 0d       	add	r27, r0
 738:	a1 1d       	adc	r26, r1
 73a:	66 1f       	adc	r22, r22
 73c:	82 9f       	mul	r24, r18
 73e:	22 27       	eor	r18, r18
 740:	b0 0d       	add	r27, r0
 742:	a1 1d       	adc	r26, r1
 744:	62 1f       	adc	r22, r18
 746:	73 9f       	mul	r23, r19
 748:	b0 0d       	add	r27, r0
 74a:	a1 1d       	adc	r26, r1
 74c:	62 1f       	adc	r22, r18
 74e:	83 9f       	mul	r24, r19
 750:	a0 0d       	add	r26, r0
 752:	61 1d       	adc	r22, r1
 754:	22 1f       	adc	r18, r18
 756:	74 9f       	mul	r23, r20
 758:	33 27       	eor	r19, r19
 75a:	a0 0d       	add	r26, r0
 75c:	61 1d       	adc	r22, r1
 75e:	23 1f       	adc	r18, r19
 760:	84 9f       	mul	r24, r20
 762:	60 0d       	add	r22, r0
 764:	21 1d       	adc	r18, r1
 766:	82 2f       	mov	r24, r18
 768:	76 2f       	mov	r23, r22
 76a:	6a 2f       	mov	r22, r26
 76c:	11 24       	eor	r1, r1
 76e:	9f 57       	subi	r25, 0x7F	; 127
 770:	50 40       	sbci	r21, 0x00	; 0
 772:	8a f0       	brmi	.+34     	; 0x796 <__mulsf3_pse+0x84>
 774:	e1 f0       	breq	.+56     	; 0x7ae <__mulsf3_pse+0x9c>
 776:	88 23       	and	r24, r24
 778:	4a f0       	brmi	.+18     	; 0x78c <__mulsf3_pse+0x7a>
 77a:	ee 0f       	add	r30, r30
 77c:	ff 1f       	adc	r31, r31
 77e:	bb 1f       	adc	r27, r27
 780:	66 1f       	adc	r22, r22
 782:	77 1f       	adc	r23, r23
 784:	88 1f       	adc	r24, r24
 786:	91 50       	subi	r25, 0x01	; 1
 788:	50 40       	sbci	r21, 0x00	; 0
 78a:	a9 f7       	brne	.-22     	; 0x776 <__mulsf3_pse+0x64>
 78c:	9e 3f       	cpi	r25, 0xFE	; 254
 78e:	51 05       	cpc	r21, r1
 790:	70 f0       	brcs	.+28     	; 0x7ae <__mulsf3_pse+0x9c>
 792:	60 cf       	rjmp	.-320    	; 0x654 <__fp_inf>
 794:	aa cf       	rjmp	.-172    	; 0x6ea <__fp_szero>
 796:	5f 3f       	cpi	r21, 0xFF	; 255
 798:	ec f3       	brlt	.-6      	; 0x794 <__mulsf3_pse+0x82>
 79a:	98 3e       	cpi	r25, 0xE8	; 232
 79c:	dc f3       	brlt	.-10     	; 0x794 <__mulsf3_pse+0x82>
 79e:	86 95       	lsr	r24
 7a0:	77 95       	ror	r23
 7a2:	67 95       	ror	r22
 7a4:	b7 95       	ror	r27
 7a6:	f7 95       	ror	r31
 7a8:	e7 95       	ror	r30
 7aa:	9f 5f       	subi	r25, 0xFF	; 255
 7ac:	c1 f7       	brne	.-16     	; 0x79e <__mulsf3_pse+0x8c>
 7ae:	fe 2b       	or	r31, r30
 7b0:	88 0f       	add	r24, r24
 7b2:	91 1d       	adc	r25, r1
 7b4:	96 95       	lsr	r25
 7b6:	87 95       	ror	r24
 7b8:	97 f9       	bld	r25, 7
 7ba:	08 95       	ret

000007bc <_exit>:
 7bc:	f8 94       	cli

000007be <__stop_program>:
 7be:	ff cf       	rjmp	.-2      	; 0x7be <__stop_program>
