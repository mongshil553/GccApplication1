
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000702  00000796  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000702  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000031  00800102  00800102  00000798  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000798  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000804  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001831  00000000  00000000  0000099c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d30  00000000  00000000  000021cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000df8  00000000  00000000  00002efd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000394  00000000  00000000  00003cf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007e6  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000071d  00000000  00000000  00004872  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00004f8f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	e6 c1       	rjmp	.+972    	; 0x40e <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e0       	ldi	r30, 0x02	; 2
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 33       	cpi	r26, 0x33	; 51
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	f7 d0       	rcall	.+494    	; 0x2b2 <main>
  c4:	1c c3       	rjmp	.+1592   	; 0x6fe <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <init_BT>:
  c8:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
  cc:	88 e1       	ldi	r24, 0x18	; 24
  ce:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
  d2:	86 e0       	ldi	r24, 0x06	; 6
  d4:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
  d8:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
  dc:	87 e6       	ldi	r24, 0x67	; 103
  de:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
  e2:	08 95       	ret

000000e4 <BT_send>:
  e4:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
  e8:	95 ff       	sbrs	r25, 5
  ea:	fc cf       	rjmp	.-8      	; 0xe4 <BT_send>
  ec:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
  f0:	08 95       	ret

000000f2 <BT_Receive>:
  f2:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
  f6:	88 23       	and	r24, r24
  f8:	0c f0       	brlt	.+2      	; 0xfc <BT_Receive+0xa>
  fa:	87 c0       	rjmp	.+270    	; 0x20a <BT_Receive+0x118>
  fc:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 100:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <rdata>
 104:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 108:	82 30       	cpi	r24, 0x02	; 2
 10a:	b1 f0       	breq	.+44     	; 0x138 <BT_Receive+0x46>
 10c:	83 30       	cpi	r24, 0x03	; 3
 10e:	b1 f1       	breq	.+108    	; 0x17c <BT_Receive+0x8a>
 110:	81 30       	cpi	r24, 0x01	; 1
 112:	09 f0       	breq	.+2      	; 0x116 <BT_Receive+0x24>
 114:	54 c0       	rjmp	.+168    	; 0x1be <BT_Receive+0xcc>
 116:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rdata>
 11a:	8e 32       	cpi	r24, 0x2E	; 46
 11c:	39 f4       	brne	.+14     	; 0x12c <BT_Receive+0x3a>
 11e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
 122:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rdata>
 126:	de df       	rcall	.-68     	; 0xe4 <BT_send>
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	08 95       	ret
 12c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rdata>
 130:	80 53       	subi	r24, 0x30	; 48
 132:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <marble>
 136:	43 c0       	rjmp	.+134    	; 0x1be <BT_Receive+0xcc>
 138:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rdata>
 13c:	8e 32       	cpi	r24, 0x2E	; 46
 13e:	39 f4       	brne	.+14     	; 0x14e <BT_Receive+0x5c>
 140:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
 144:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rdata>
 148:	cd df       	rcall	.-102    	; 0xe4 <BT_send>
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	08 95       	ret
 14e:	e4 e0       	ldi	r30, 0x04	; 4
 150:	f1 e0       	ldi	r31, 0x01	; 1
 152:	81 81       	ldd	r24, Z+1	; 0x01
 154:	92 81       	ldd	r25, Z+2	; 0x02
 156:	9c 01       	movw	r18, r24
 158:	22 0f       	add	r18, r18
 15a:	33 1f       	adc	r19, r19
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	82 0f       	add	r24, r18
 16a:	93 1f       	adc	r25, r19
 16c:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <rdata>
 170:	82 0f       	add	r24, r18
 172:	91 1d       	adc	r25, r1
 174:	c0 97       	sbiw	r24, 0x30	; 48
 176:	92 83       	std	Z+2, r25	; 0x02
 178:	81 83       	std	Z+1, r24	; 0x01
 17a:	21 c0       	rjmp	.+66     	; 0x1be <BT_Receive+0xcc>
 17c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rdata>
 180:	8e 32       	cpi	r24, 0x2E	; 46
 182:	39 f4       	brne	.+14     	; 0x192 <BT_Receive+0xa0>
 184:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
 188:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rdata>
 18c:	ab df       	rcall	.-170    	; 0xe4 <BT_send>
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	08 95       	ret
 192:	e4 e0       	ldi	r30, 0x04	; 4
 194:	f1 e0       	ldi	r31, 0x01	; 1
 196:	83 81       	ldd	r24, Z+3	; 0x03
 198:	94 81       	ldd	r25, Z+4	; 0x04
 19a:	9c 01       	movw	r18, r24
 19c:	22 0f       	add	r18, r18
 19e:	33 1f       	adc	r19, r19
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	82 0f       	add	r24, r18
 1ae:	93 1f       	adc	r25, r19
 1b0:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <rdata>
 1b4:	82 0f       	add	r24, r18
 1b6:	91 1d       	adc	r25, r1
 1b8:	c0 97       	sbiw	r24, 0x30	; 48
 1ba:	94 83       	std	Z+4, r25	; 0x04
 1bc:	83 83       	std	Z+3, r24	; 0x03
 1be:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rdata>
 1c2:	83 32       	cpi	r24, 0x23	; 35
 1c4:	31 f4       	brne	.+12     	; 0x1d2 <BT_Receive+0xe0>
 1c6:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <marble>
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 1d0:	17 c0       	rjmp	.+46     	; 0x200 <BT_Receive+0x10e>
 1d2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rdata>
 1d6:	81 32       	cpi	r24, 0x21	; 33
 1d8:	41 f4       	brne	.+16     	; 0x1ea <BT_Receive+0xf8>
 1da:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <marble+0x2>
 1de:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <marble+0x1>
 1e2:	82 e0       	ldi	r24, 0x02	; 2
 1e4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 1e8:	0b c0       	rjmp	.+22     	; 0x200 <BT_Receive+0x10e>
 1ea:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rdata>
 1ee:	8a 32       	cpi	r24, 0x2A	; 42
 1f0:	39 f4       	brne	.+14     	; 0x200 <BT_Receive+0x10e>
 1f2:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <marble+0x4>
 1f6:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <marble+0x3>
 1fa:	83 e0       	ldi	r24, 0x03	; 3
 1fc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 200:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rdata>
 204:	6f df       	rcall	.-290    	; 0xe4 <BT_send>
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	08 95       	ret
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	08 95       	ret

0000020e <Select_Item>:
 20e:	95 b3       	in	r25, 0x15	; 21
 210:	90 7f       	andi	r25, 0xF0	; 240
 212:	89 2b       	or	r24, r25
 214:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 216:	2f ef       	ldi	r18, 0xFF	; 255
 218:	81 ee       	ldi	r24, 0xE1	; 225
 21a:	94 e0       	ldi	r25, 0x04	; 4
 21c:	21 50       	subi	r18, 0x01	; 1
 21e:	80 40       	sbci	r24, 0x00	; 0
 220:	90 40       	sbci	r25, 0x00	; 0
 222:	e1 f7       	brne	.-8      	; 0x21c <Select_Item+0xe>
 224:	00 c0       	rjmp	.+0      	; 0x226 <Select_Item+0x18>
 226:	00 00       	nop
 228:	08 95       	ret

0000022a <timer0_init>:
		case 0x04: //None <- LED Off
			led_select = 0x04;
		break;
	}
	
	OCR2 = led_pwm_value; //Set PWM Value
 22a:	83 b7       	in	r24, 0x33	; 51
 22c:	87 60       	ori	r24, 0x07	; 7
 22e:	83 bf       	out	0x33, r24	; 51
 230:	87 b7       	in	r24, 0x37	; 55
 232:	81 60       	ori	r24, 0x01	; 1
 234:	87 bf       	out	0x37, r24	; 55
 236:	12 be       	out	0x32, r1	; 50
 238:	08 95       	ret

0000023a <timer1_init>:
 23a:	82 e8       	ldi	r24, 0x82	; 130
 23c:	8f bd       	out	0x2f, r24	; 47
 23e:	8b e1       	ldi	r24, 0x1B	; 27
 240:	8e bd       	out	0x2e, r24	; 46
 242:	87 e8       	ldi	r24, 0x87	; 135
 244:	93 e1       	ldi	r25, 0x13	; 19
 246:	97 bd       	out	0x27, r25	; 39
 248:	86 bd       	out	0x26, r24	; 38
 24a:	08 95       	ret

0000024c <port_setup>:
 24c:	8f ef       	ldi	r24, 0xFF	; 255
 24e:	8a bb       	out	0x1a, r24	; 26
 250:	11 ba       	out	0x11, r1	; 17
 252:	87 bb       	out	0x17, r24	; 23
 254:	84 bb       	out	0x14, r24	; 20
 256:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 25a:	08 95       	ret

0000025c <adc_init>:
 25c:	80 e4       	ldi	r24, 0x40	; 64
 25e:	87 b9       	out	0x07, r24	; 7
 260:	87 e8       	ldi	r24, 0x87	; 135
 262:	86 b9       	out	0x06, r24	; 6
 264:	08 95       	ret

00000266 <ElectroMagnet_On>:
 266:	85 b3       	in	r24, 0x15	; 21
 268:	8f 77       	andi	r24, 0x7F	; 127
 26a:	85 bb       	out	0x15, r24	; 21
 26c:	08 95       	ret

0000026e <ElectroMagnet_Off>:
 26e:	85 b3       	in	r24, 0x15	; 21
 270:	80 68       	ori	r24, 0x80	; 128
 272:	85 bb       	out	0x15, r24	; 21
 274:	08 95       	ret

00000276 <RED_LED_On>:
 276:	cf 93       	push	r28
 278:	df 93       	push	r29
 27a:	ec 01       	movw	r28, r24
 27c:	89 e0       	ldi	r24, 0x09	; 9
 27e:	c7 df       	rcall	.-114    	; 0x20e <Select_Item>
 280:	db bd       	out	0x2b, r29	; 43
 282:	ca bd       	out	0x2a, r28	; 42
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	08 95       	ret

0000028a <GREEN_LED_On>:
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	ec 01       	movw	r28, r24
 290:	8d e0       	ldi	r24, 0x0D	; 13
 292:	bd df       	rcall	.-134    	; 0x20e <Select_Item>
 294:	db bd       	out	0x2b, r29	; 43
 296:	ca bd       	out	0x2a, r28	; 42
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	08 95       	ret

0000029e <BLUE_LED_On>:
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
 2a2:	ec 01       	movw	r28, r24
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	b3 df       	rcall	.-154    	; 0x20e <Select_Item>
 2a8:	db bd       	out	0x2b, r29	; 43
 2aa:	ca bd       	out	0x2a, r28	; 42
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	08 95       	ret

000002b2 <main>:
 2b2:	cc df       	rcall	.-104    	; 0x24c <port_setup>
 2b4:	d3 df       	rcall	.-90     	; 0x25c <adc_init>
 2b6:	b9 df       	rcall	.-142    	; 0x22a <timer0_init>
 2b8:	c0 df       	rcall	.-128    	; 0x23a <timer1_init>
 2ba:	06 df       	rcall	.-500    	; 0xc8 <init_BT>
 2bc:	5d d1       	rcall	.+698    	; 0x578 <Reset_sensor_val>
 2be:	d7 df       	rcall	.-82     	; 0x26e <ElectroMagnet_Off>
 2c0:	e4 e0       	ldi	r30, 0x04	; 4
 2c2:	f1 e0       	ldi	r31, 0x01	; 1
 2c4:	85 e0       	ldi	r24, 0x05	; 5
 2c6:	80 83       	st	Z, r24
 2c8:	8f ef       	ldi	r24, 0xFF	; 255
 2ca:	9f ef       	ldi	r25, 0xFF	; 255
 2cc:	92 83       	std	Z+2, r25	; 0x02
 2ce:	81 83       	std	Z+1, r24	; 0x01
 2d0:	94 83       	std	Z+4, r25	; 0x04
 2d2:	83 83       	std	Z+3, r24	; 0x03
 2d4:	78 94       	sei
 2d6:	84 e1       	ldi	r24, 0x14	; 20
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <Servo_increment_threshold+0x1>
 2de:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <Servo_increment_threshold>
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <Servo_Allowed>
 2e8:	87 e7       	ldi	r24, 0x77	; 119
 2ea:	91 e0       	ldi	r25, 0x01	; 1
 2ec:	db d1       	rcall	.+950    	; 0x6a4 <Servo_Goto>
 2ee:	92 d1       	rcall	.+804    	; 0x614 <Servo_Go_Home>
 2f0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state>
 2f4:	84 30       	cpi	r24, 0x04	; 4
 2f6:	39 f1       	breq	.+78     	; 0x346 <main+0x94>
 2f8:	28 f4       	brcc	.+10     	; 0x304 <main+0x52>
 2fa:	81 30       	cpi	r24, 0x01	; 1
 2fc:	49 f0       	breq	.+18     	; 0x310 <main+0x5e>
 2fe:	82 30       	cpi	r24, 0x02	; 2
 300:	c9 f0       	breq	.+50     	; 0x334 <main+0x82>
 302:	f6 cf       	rjmp	.-20     	; 0x2f0 <main+0x3e>
 304:	88 30       	cpi	r24, 0x08	; 8
 306:	b1 f1       	breq	.+108    	; 0x374 <main+0xc2>
 308:	80 31       	cpi	r24, 0x10	; 16
 30a:	09 f4       	brne	.+2      	; 0x30e <main+0x5c>
 30c:	5b c0       	rjmp	.+182    	; 0x3c4 <main+0x112>
 30e:	f0 cf       	rjmp	.-32     	; 0x2f0 <main+0x3e>
 310:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <pressure_sensor_val>
 314:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <pressure_sensor_val+0x1>
 318:	85 38       	cpi	r24, 0x85	; 133
 31a:	93 40       	sbci	r25, 0x03	; 3
 31c:	48 f3       	brcs	.-46     	; 0x2f0 <main+0x3e>
 31e:	83 e0       	ldi	r24, 0x03	; 3
 320:	76 df       	rcall	.-276    	; 0x20e <Select_Item>
 322:	a1 df       	rcall	.-190    	; 0x266 <ElectroMagnet_On>
 324:	80 e3       	ldi	r24, 0x30	; 48
 326:	de de       	rcall	.-580    	; 0xe4 <BT_send>
 328:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state>
 32c:	88 0f       	add	r24, r24
 32e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 332:	de cf       	rjmp	.-68     	; 0x2f0 <main+0x3e>
 334:	de de       	rcall	.-580    	; 0xf2 <BT_Receive>
 336:	88 23       	and	r24, r24
 338:	d9 f2       	breq	.-74     	; 0x2f0 <main+0x3e>
 33a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state>
 33e:	88 0f       	add	r24, r24
 340:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 344:	d5 cf       	rjmp	.-86     	; 0x2f0 <main+0x3e>
 346:	87 e7       	ldi	r24, 0x77	; 119
 348:	91 e0       	ldi	r25, 0x01	; 1
 34a:	ac d1       	rcall	.+856    	; 0x6a4 <Servo_Goto>
 34c:	8c df       	rcall	.-232    	; 0x266 <ElectroMagnet_On>
 34e:	86 d1       	rcall	.+780    	; 0x65c <Servo_Go_Box>
 350:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <shk_detected>
 354:	8c df       	rcall	.-232    	; 0x26e <ElectroMagnet_Off>
 356:	8f ef       	ldi	r24, 0xFF	; 255
 358:	97 ea       	ldi	r25, 0xA7	; 167
 35a:	21 e6       	ldi	r18, 0x61	; 97
 35c:	81 50       	subi	r24, 0x01	; 1
 35e:	90 40       	sbci	r25, 0x00	; 0
 360:	20 40       	sbci	r18, 0x00	; 0
 362:	e1 f7       	brne	.-8      	; 0x35c <main+0xaa>
 364:	00 c0       	rjmp	.+0      	; 0x366 <main+0xb4>
 366:	00 00       	nop
 368:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state>
 36c:	88 0f       	add	r24, r24
 36e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 372:	be cf       	rjmp	.-132    	; 0x2f0 <main+0x3e>
 374:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <shk_detected>
 378:	81 30       	cpi	r24, 0x01	; 1
 37a:	49 f4       	brne	.+18     	; 0x38e <main+0xdc>
 37c:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <shk_detected>
 380:	49 d1       	rcall	.+658    	; 0x614 <Servo_Go_Home>
 382:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state>
 386:	88 0f       	add	r24, r24
 388:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 38c:	b1 cf       	rjmp	.-158    	; 0x2f0 <main+0x3e>
 38e:	84 e1       	ldi	r24, 0x14	; 20
 390:	b0 d1       	rcall	.+864    	; 0x6f2 <Servo_Set_Speed>
 392:	40 d1       	rcall	.+640    	; 0x614 <Servo_Go_Home>
 394:	68 df       	rcall	.-304    	; 0x266 <ElectroMagnet_On>
 396:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <temp_en+0x1>
 39a:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <temp_en>
 39e:	80 e5       	ldi	r24, 0x50	; 80
 3a0:	a8 d1       	rcall	.+848    	; 0x6f2 <Servo_Set_Speed>
 3a2:	5c d1       	rcall	.+696    	; 0x65c <Servo_Go_Box>
 3a4:	64 df       	rcall	.-312    	; 0x26e <ElectroMagnet_Off>
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <temp_en+0x1>
 3ae:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <temp_en>
 3b2:	84 e1       	ldi	r24, 0x14	; 20
 3b4:	9e d1       	rcall	.+828    	; 0x6f2 <Servo_Set_Speed>
 3b6:	2e d1       	rcall	.+604    	; 0x614 <Servo_Go_Home>
 3b8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state>
 3bc:	88 0f       	add	r24, r24
 3be:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 3c2:	96 cf       	rjmp	.-212    	; 0x2f0 <main+0x3e>
 3c4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <marble>
 3c8:	81 11       	cpse	r24, r1
 3ca:	04 c0       	rjmp	.+8      	; 0x3d4 <main+0x122>
 3cc:	84 ef       	ldi	r24, 0xF4	; 244
 3ce:	91 e0       	ldi	r25, 0x01	; 1
 3d0:	52 df       	rcall	.-348    	; 0x276 <RED_LED_On>
 3d2:	0e c0       	rjmp	.+28     	; 0x3f0 <main+0x13e>
 3d4:	81 30       	cpi	r24, 0x01	; 1
 3d6:	21 f4       	brne	.+8      	; 0x3e0 <main+0x12e>
 3d8:	84 ef       	ldi	r24, 0xF4	; 244
 3da:	91 e0       	ldi	r25, 0x01	; 1
 3dc:	56 df       	rcall	.-340    	; 0x28a <GREEN_LED_On>
 3de:	08 c0       	rjmp	.+16     	; 0x3f0 <main+0x13e>
 3e0:	82 30       	cpi	r24, 0x02	; 2
 3e2:	21 f4       	brne	.+8      	; 0x3ec <main+0x13a>
 3e4:	84 ef       	ldi	r24, 0xF4	; 244
 3e6:	91 e0       	ldi	r25, 0x01	; 1
 3e8:	5a df       	rcall	.-332    	; 0x29e <BLUE_LED_On>
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <main+0x13e>
 3ec:	83 e0       	ldi	r24, 0x03	; 3
 3ee:	0f df       	rcall	.-482    	; 0x20e <Select_Item>
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 3f6:	7c cf       	rjmp	.-264    	; 0x2f0 <main+0x3e>

000003f8 <Is_PSD_Interrupt>:
}

void Is_PSD_Interrupt(){
	if(shk_sensor_val <= 900)
 3f8:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <shk_sensor_val>
 3fc:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <shk_sensor_val+0x1>
 400:	85 38       	cpi	r24, 0x85	; 133
 402:	93 40       	sbci	r25, 0x03	; 3
 404:	18 f4       	brcc	.+6      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
		shk_detected = 0x01;
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <shk_detected>
 40c:	08 95       	ret

0000040e <__vector_16>:
void adc_init(void){
	ADMUX=(1<<REFS0); //외부 레퍼런스 접압을 기준 전압으로 선택, 우측정렬, 초기 입력핀은 0번
	ADCSRA=(1<<ADEN)|(0<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //ADC enable, ADC interrupt enable 분주비 128
}

ISR(TIMER0_OVF_vect){ //Use Timer0 for collecting sensor value
 40e:	1f 92       	push	r1
 410:	0f 92       	push	r0
 412:	0f b6       	in	r0, 0x3f	; 63
 414:	0f 92       	push	r0
 416:	11 24       	eor	r1, r1
 418:	0b b6       	in	r0, 0x3b	; 59
 41a:	0f 92       	push	r0
 41c:	2f 93       	push	r18
 41e:	3f 93       	push	r19
 420:	4f 93       	push	r20
 422:	5f 93       	push	r21
 424:	6f 93       	push	r22
 426:	7f 93       	push	r23
 428:	8f 93       	push	r24
 42a:	9f 93       	push	r25
 42c:	af 93       	push	r26
 42e:	bf 93       	push	r27
 430:	ef 93       	push	r30
 432:	ff 93       	push	r31
	static char idx = 0x01;
	
	switch(idx){
 434:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 438:	84 30       	cpi	r24, 0x04	; 4
 43a:	b1 f0       	breq	.+44     	; 0x468 <__vector_16+0x5a>
 43c:	28 f4       	brcc	.+10     	; 0x448 <__vector_16+0x3a>
 43e:	81 30       	cpi	r24, 0x01	; 1
 440:	49 f0       	breq	.+18     	; 0x454 <__vector_16+0x46>
 442:	82 30       	cpi	r24, 0x02	; 2
 444:	61 f0       	breq	.+24     	; 0x45e <__vector_16+0x50>
 446:	24 c0       	rjmp	.+72     	; 0x490 <__vector_16+0x82>
 448:	86 30       	cpi	r24, 0x06	; 6
 44a:	c9 f0       	breq	.+50     	; 0x47e <__vector_16+0x70>
 44c:	90 f0       	brcs	.+36     	; 0x472 <__vector_16+0x64>
 44e:	87 30       	cpi	r24, 0x07	; 7
 450:	d9 f0       	breq	.+54     	; 0x488 <__vector_16+0x7a>
 452:	1e c0       	rjmp	.+60     	; 0x490 <__vector_16+0x82>
		case 0x01:
		Read_CDS();
 454:	37 d0       	rcall	.+110    	; 0x4c4 <Read_CDS>
		idx=0x02;
 456:	82 e0       	ldi	r24, 0x02	; 2
 458:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
		
		case 0x02:
		
		Read_Thermister();
 45c:	19 c0       	rjmp	.+50     	; 0x490 <__vector_16+0x82>
 45e:	6e d0       	rcall	.+220    	; 0x53c <Read_Thermister>
		//Is_Fire_Interrupt(); //Fire Interrupt를 걸까말까
		idx=0x04;
 460:	84 e0       	ldi	r24, 0x04	; 4
 462:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
		
		case 0x04:
		
		Read_Pressure();
 466:	14 c0       	rjmp	.+40     	; 0x490 <__vector_16+0x82>
 468:	5a d0       	rcall	.+180    	; 0x51e <Read_Pressure>
		idx=0x05;
 46a:	85 e0       	ldi	r24, 0x05	; 5
 46c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
		
		case 0x05:
		
		Read_Shock();
 470:	0f c0       	rjmp	.+30     	; 0x490 <__vector_16+0x82>
 472:	73 d0       	rcall	.+230    	; 0x55a <Read_Shock>
		Is_PSD_Interrupt(); //PSD Interrupt를 걸까말까
 474:	c1 df       	rcall	.-126    	; 0x3f8 <Is_PSD_Interrupt>
		idx=0x06;
 476:	86 e0       	ldi	r24, 0x06	; 6
 478:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		break;
 47c:	09 c0       	rjmp	.+18     	; 0x490 <__vector_16+0x82>
		
		case 0x06:
		
		Read_Fire();
 47e:	31 d0       	rcall	.+98     	; 0x4e2 <Read_Fire>
		idx = 0x07;
 480:	87 e0       	ldi	r24, 0x07	; 7
 482:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
 486:	04 c0       	rjmp	.+8      	; 0x490 <__vector_16+0x82>
		
		case 0x07:
		
		Read_PSD();
 488:	3b d0       	rcall	.+118    	; 0x500 <Read_PSD>
 48a:	81 e0       	ldi	r24, 0x01	; 1
		idx = 0x01;
 48c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 490:	87 b1       	in	r24, 0x07	; 7
		break;
	}
	
	//ADC Mux 선택, ADC 시작 시키고 ISR 종료
	ADMUX = (ADMUX & 0x40) | (idx & 0x0F); //다음 센서 선택
 492:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 496:	9f 70       	andi	r25, 0x0F	; 15
 498:	80 74       	andi	r24, 0x40	; 64
 49a:	89 2b       	or	r24, r25
 49c:	87 b9       	out	0x07, r24	; 7
 49e:	ff 91       	pop	r31
	//ADCSRA |= (1 << ADSC); // ADC 변환 시작
}
 4a0:	ef 91       	pop	r30
 4a2:	bf 91       	pop	r27
 4a4:	af 91       	pop	r26
 4a6:	9f 91       	pop	r25
 4a8:	8f 91       	pop	r24
 4aa:	7f 91       	pop	r23
 4ac:	6f 91       	pop	r22
 4ae:	5f 91       	pop	r21
 4b0:	4f 91       	pop	r20
 4b2:	3f 91       	pop	r19
 4b4:	2f 91       	pop	r18
 4b6:	0f 90       	pop	r0
 4b8:	0b be       	out	0x3b, r0	; 59
 4ba:	0f 90       	pop	r0
 4bc:	0f be       	out	0x3f, r0	; 63
 4be:	0f 90       	pop	r0
 4c0:	1f 90       	pop	r1
 4c2:	18 95       	reti

000004c4 <Read_CDS>:
 4c4:	86 b1       	in	r24, 0x06	; 6
 4c6:	80 64       	ori	r24, 0x40	; 64
 4c8:	86 b9       	out	0x06, r24	; 6
 4ca:	34 9b       	sbis	0x06, 4	; 6
 4cc:	fe cf       	rjmp	.-4      	; 0x4ca <Read_CDS+0x6>
 4ce:	86 b1       	in	r24, 0x06	; 6
 4d0:	80 61       	ori	r24, 0x10	; 16
 4d2:	86 b9       	out	0x06, r24	; 6
 4d4:	84 b1       	in	r24, 0x04	; 4
 4d6:	95 b1       	in	r25, 0x05	; 5
 4d8:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <cds_sensor_val+0x1>
 4dc:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <cds_sensor_val>
 4e0:	08 95       	ret

000004e2 <Read_Fire>:
 4e2:	86 b1       	in	r24, 0x06	; 6
 4e4:	80 64       	ori	r24, 0x40	; 64
 4e6:	86 b9       	out	0x06, r24	; 6
 4e8:	34 9b       	sbis	0x06, 4	; 6
 4ea:	fe cf       	rjmp	.-4      	; 0x4e8 <Read_Fire+0x6>
 4ec:	86 b1       	in	r24, 0x06	; 6
 4ee:	80 61       	ori	r24, 0x10	; 16
 4f0:	86 b9       	out	0x06, r24	; 6
 4f2:	84 b1       	in	r24, 0x04	; 4
 4f4:	95 b1       	in	r25, 0x05	; 5
 4f6:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <fire_sensor_val+0x1>
 4fa:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <fire_sensor_val>
 4fe:	08 95       	ret

00000500 <Read_PSD>:
 500:	86 b1       	in	r24, 0x06	; 6
 502:	80 64       	ori	r24, 0x40	; 64
 504:	86 b9       	out	0x06, r24	; 6
 506:	34 9b       	sbis	0x06, 4	; 6
 508:	fe cf       	rjmp	.-4      	; 0x506 <Read_PSD+0x6>
 50a:	86 b1       	in	r24, 0x06	; 6
 50c:	80 61       	ori	r24, 0x10	; 16
 50e:	86 b9       	out	0x06, r24	; 6
 510:	84 b1       	in	r24, 0x04	; 4
 512:	95 b1       	in	r25, 0x05	; 5
 514:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <psd_sensor_val+0x1>
 518:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <psd_sensor_val>
 51c:	08 95       	ret

0000051e <Read_Pressure>:
 51e:	86 b1       	in	r24, 0x06	; 6
 520:	80 64       	ori	r24, 0x40	; 64
 522:	86 b9       	out	0x06, r24	; 6
 524:	34 9b       	sbis	0x06, 4	; 6
 526:	fe cf       	rjmp	.-4      	; 0x524 <Read_Pressure+0x6>
 528:	86 b1       	in	r24, 0x06	; 6
 52a:	80 61       	ori	r24, 0x10	; 16
 52c:	86 b9       	out	0x06, r24	; 6
 52e:	84 b1       	in	r24, 0x04	; 4
 530:	95 b1       	in	r25, 0x05	; 5
 532:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <pressure_sensor_val+0x1>
 536:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <pressure_sensor_val>
 53a:	08 95       	ret

0000053c <Read_Thermister>:
 53c:	86 b1       	in	r24, 0x06	; 6
 53e:	80 64       	ori	r24, 0x40	; 64
 540:	86 b9       	out	0x06, r24	; 6
 542:	34 9b       	sbis	0x06, 4	; 6
 544:	fe cf       	rjmp	.-4      	; 0x542 <Read_Thermister+0x6>
 546:	86 b1       	in	r24, 0x06	; 6
 548:	80 61       	ori	r24, 0x10	; 16
 54a:	86 b9       	out	0x06, r24	; 6
 54c:	84 b1       	in	r24, 0x04	; 4
 54e:	95 b1       	in	r25, 0x05	; 5
 550:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <temp_sensor_val+0x1>
 554:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <temp_sensor_val>
 558:	08 95       	ret

0000055a <Read_Shock>:
 55a:	86 b1       	in	r24, 0x06	; 6
 55c:	80 64       	ori	r24, 0x40	; 64
 55e:	86 b9       	out	0x06, r24	; 6
 560:	34 9b       	sbis	0x06, 4	; 6
 562:	fe cf       	rjmp	.-4      	; 0x560 <Read_Shock+0x6>
 564:	86 b1       	in	r24, 0x06	; 6
 566:	80 61       	ori	r24, 0x10	; 16
 568:	86 b9       	out	0x06, r24	; 6
 56a:	84 b1       	in	r24, 0x04	; 4
 56c:	95 b1       	in	r25, 0x05	; 5
 56e:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <shk_sensor_val+0x1>
 572:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <shk_sensor_val>
 576:	08 95       	ret

00000578 <Reset_sensor_val>:
 578:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <pressure_sensor_val+0x1>
 57c:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <pressure_sensor_val>
 580:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <cds_sensor_val+0x1>
 584:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <cds_sensor_val>
 588:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <temp_sensor_val+0x1>
 58c:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <temp_sensor_val>
 590:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <temp_en+0x1>
 594:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <temp_en>
 598:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <shk_sensor_val+0x1>
 59c:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <shk_sensor_val>
 5a0:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <shk_detected>
 5a4:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <psd_sensor_val+0x1>
 5a8:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <psd_sensor_val>
 5ac:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <fire_sensor_val+0x1>
 5b0:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <fire_sensor_val>
 5b4:	08 95       	ret

000005b6 <Servo_Act>:
}
void Servo_Go_Marble(){
	Select_Item(ITEM_SERVO);
	Servo_Set_Target(Marble_pos);
	Servo_Act();
}
 5b6:	80 e0       	ldi	r24, 0x00	; 0
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	1c c0       	rjmp	.+56     	; 0x5f4 <Servo_Act+0x3e>
 5bc:	01 96       	adiw	r24, 0x01	; 1
 5be:	40 91 29 01 	lds	r20, 0x0129	; 0x800129 <Servo_increment_threshold>
 5c2:	50 91 2a 01 	lds	r21, 0x012A	; 0x80012a <Servo_increment_threshold+0x1>
 5c6:	84 17       	cp	r24, r20
 5c8:	95 07       	cpc	r25, r21
 5ca:	71 f4       	brne	.+28     	; 0x5e8 <Servo_Act+0x32>
 5cc:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <Servo_step>
 5d0:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <Servo_step+0x1>
 5d4:	28 0f       	add	r18, r24
 5d6:	39 1f       	adc	r19, r25
 5d8:	30 93 26 01 	sts	0x0126, r19	; 0x800126 <Servo_pos+0x1>
 5dc:	20 93 25 01 	sts	0x0125, r18	; 0x800125 <Servo_pos>
 5e0:	3b bd       	out	0x2b, r19	; 43
 5e2:	2a bd       	out	0x2a, r18	; 42
 5e4:	80 e0       	ldi	r24, 0x00	; 0
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	ef e8       	ldi	r30, 0x8F	; 143
 5ea:	f1 e0       	ldi	r31, 0x01	; 1
 5ec:	31 97       	sbiw	r30, 0x01	; 1
 5ee:	f1 f7       	brne	.-4      	; 0x5ec <Servo_Act+0x36>
 5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <Servo_Act+0x3c>
 5f2:	00 00       	nop
 5f4:	20 91 25 01 	lds	r18, 0x0125	; 0x800125 <Servo_pos>
 5f8:	30 91 26 01 	lds	r19, 0x0126	; 0x800126 <Servo_pos+0x1>
 5fc:	40 91 1b 01 	lds	r20, 0x011B	; 0x80011b <Servo_target>
 600:	50 91 1c 01 	lds	r21, 0x011C	; 0x80011c <Servo_target+0x1>
 604:	24 17       	cp	r18, r20
 606:	35 07       	cpc	r19, r21
 608:	21 f0       	breq	.+8      	; 0x612 <Servo_Act+0x5c>
 60a:	40 91 1f 01 	lds	r20, 0x011F	; 0x80011f <Servo_Allowed>
 60e:	41 11       	cpse	r20, r1
 610:	d5 cf       	rjmp	.-86     	; 0x5bc <Servo_Act+0x6>
 612:	08 95       	ret

00000614 <Servo_Go_Home>:
 614:	82 e0       	ldi	r24, 0x02	; 2
 616:	fb dd       	rcall	.-1034   	; 0x20e <Select_Item>
 618:	82 e0       	ldi	r24, 0x02	; 2
 61a:	f9 dd       	rcall	.-1038   	; 0x20e <Select_Item>
 61c:	82 e8       	ldi	r24, 0x82	; 130
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <Servo_target+0x1>
 624:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <Servo_target>
 628:	20 91 25 01 	lds	r18, 0x0125	; 0x800125 <Servo_pos>
 62c:	30 91 26 01 	lds	r19, 0x0126	; 0x800126 <Servo_pos+0x1>
 630:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <Servo_target>
 634:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <Servo_target+0x1>
 638:	28 17       	cp	r18, r24
 63a:	39 07       	cpc	r19, r25
 63c:	38 f0       	brcs	.+14     	; 0x64c <Servo_Go_Home+0x38>
 63e:	8f ef       	ldi	r24, 0xFF	; 255
 640:	9f ef       	ldi	r25, 0xFF	; 255
 642:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <Servo_step+0x1>
 646:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <Servo_step>
 64a:	06 c0       	rjmp	.+12     	; 0x658 <Servo_Go_Home+0x44>
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <Servo_step+0x1>
 654:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <Servo_step>
 658:	ae cf       	rjmp	.-164    	; 0x5b6 <Servo_Act>
 65a:	08 95       	ret

0000065c <Servo_Go_Box>:
 65c:	82 e0       	ldi	r24, 0x02	; 2
 65e:	d7 dd       	rcall	.-1106   	; 0x20e <Select_Item>
 660:	82 e0       	ldi	r24, 0x02	; 2
 662:	d5 dd       	rcall	.-1110   	; 0x20e <Select_Item>
 664:	8c e6       	ldi	r24, 0x6C	; 108
 666:	92 e0       	ldi	r25, 0x02	; 2
 668:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <Servo_target+0x1>
 66c:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <Servo_target>
 670:	20 91 25 01 	lds	r18, 0x0125	; 0x800125 <Servo_pos>
 674:	30 91 26 01 	lds	r19, 0x0126	; 0x800126 <Servo_pos+0x1>
 678:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <Servo_target>
 67c:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <Servo_target+0x1>
 680:	28 17       	cp	r18, r24
 682:	39 07       	cpc	r19, r25
 684:	38 f0       	brcs	.+14     	; 0x694 <Servo_Go_Box+0x38>
 686:	8f ef       	ldi	r24, 0xFF	; 255
 688:	9f ef       	ldi	r25, 0xFF	; 255
 68a:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <Servo_step+0x1>
 68e:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <Servo_step>
 692:	06 c0       	rjmp	.+12     	; 0x6a0 <Servo_Go_Box+0x44>
 694:	81 e0       	ldi	r24, 0x01	; 1
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <Servo_step+0x1>
 69c:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <Servo_step>
 6a0:	8a cf       	rjmp	.-236    	; 0x5b6 <Servo_Act>
 6a2:	08 95       	ret

000006a4 <Servo_Goto>:
void Servo_Goto(unsigned short pos){
 6a4:	cf 93       	push	r28
 6a6:	df 93       	push	r29
 6a8:	ec 01       	movw	r28, r24
	Select_Item(ITEM_SERVO);
 6aa:	82 e0       	ldi	r24, 0x02	; 2
 6ac:	b0 dd       	rcall	.-1184   	; 0x20e <Select_Item>
	Servo_pos = val;
	OCR1A = Servo_pos;
}

inline void Servo_Set_Target(unsigned short val){
	Select_Item(ITEM_SERVO);
 6ae:	82 e0       	ldi	r24, 0x02	; 2
 6b0:	ae dd       	rcall	.-1188   	; 0x20e <Select_Item>
	
	Servo_target = val;
 6b2:	d0 93 1c 01 	sts	0x011C, r29	; 0x80011c <Servo_target+0x1>
 6b6:	c0 93 1b 01 	sts	0x011B, r28	; 0x80011b <Servo_target>
	
	if(Servo_pos >= Servo_target) Servo_step = -1;
 6ba:	20 91 25 01 	lds	r18, 0x0125	; 0x800125 <Servo_pos>
 6be:	30 91 26 01 	lds	r19, 0x0126	; 0x800126 <Servo_pos+0x1>
 6c2:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <Servo_target>
 6c6:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <Servo_target+0x1>
 6ca:	28 17       	cp	r18, r24
 6cc:	39 07       	cpc	r19, r25
 6ce:	38 f0       	brcs	.+14     	; 0x6de <Servo_Goto+0x3a>
 6d0:	8f ef       	ldi	r24, 0xFF	; 255
 6d2:	9f ef       	ldi	r25, 0xFF	; 255
 6d4:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <Servo_step+0x1>
 6d8:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <Servo_step>
 6dc:	06 c0       	rjmp	.+12     	; 0x6ea <Servo_Goto+0x46>
	else Servo_step = 1;
 6de:	81 e0       	ldi	r24, 0x01	; 1
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <Servo_step+0x1>
 6e6:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <Servo_step>
	Servo_Act();
}
void Servo_Goto(unsigned short pos){
	Select_Item(ITEM_SERVO);
	Servo_Set_Target(pos);
	Servo_Act();
 6ea:	65 df       	rcall	.-310    	; 0x5b6 <Servo_Act>
}
 6ec:	df 91       	pop	r29
 6ee:	cf 91       	pop	r28
 6f0:	08 95       	ret

000006f2 <Servo_Set_Speed>:
	}
	
}

void Servo_Set_Speed(char sp){
	Servo_increment_threshold = sp;
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <Servo_increment_threshold+0x1>
 6f8:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <Servo_increment_threshold>
 6fc:	08 95       	ret

000006fe <_exit>:
 6fe:	f8 94       	cli

00000700 <__stop_program>:
 700:	ff cf       	rjmp	.-2      	; 0x700 <__stop_program>
