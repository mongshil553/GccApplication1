
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000ad8  00000b6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ad8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000036  00800102  00800102  00000b6e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b6e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ba0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001949  00000000  00000000  00000d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d75  00000000  00000000  000026b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d7a  00000000  00000000  0000342a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000384  00000000  00000000  000041a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007d5  00000000  00000000  00004528  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000071d  00000000  00000000  00004cfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  0000541a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	12 c1       	rjmp	.+548    	; 0x266 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ed       	ldi	r30, 0xD8	; 216
  a0:	fa e0       	ldi	r31, 0x0A	; 10
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 33       	cpi	r26, 0x38	; 56
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	5e d1       	rcall	.+700    	; 0x380 <main>
  c4:	07 c5       	rjmp	.+2574   	; 0xad4 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <init_BT>:
#include "Bluetooth.h"
#include "Marble.h"
#include <avr/io.h>

void init_BT(){
	UCSR1A = 0x00;
  c8:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
	UCSR1B = 0x18;
  cc:	88 e1       	ldi	r24, 0x18	; 24
  ce:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	UCSR1C = 0x06;
  d2:	86 e0       	ldi	r24, 0x06	; 6
  d4:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
	
	UBRR1H = 0x00;
  d8:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 103;
  dc:	87 e6       	ldi	r24, 0x67	; 103
  de:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
  e2:	08 95       	ret

000000e4 <BT_send>:
	return 0x00;
}

void BT_send(char msg){
	//send msg
	while(!(UCSR1A & (1<<UDRE))); //Wait for buffer to clear
  e4:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
  e8:	95 ff       	sbrs	r25, 5
  ea:	fc cf       	rjmp	.-8      	; 0xe4 <BT_send>
	UDR1 = msg; //send msg
  ec:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
  f0:	08 95       	ret

000000f2 <BT_Receive>:
char BT_Receive(){
	
	static char step = 0;
	static char tmp = 0;
	
	if(!(UCSR1A&(1<<RXC1))) return 0x00;
  f2:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
  f6:	88 23       	and	r24, r24
  f8:	0c f0       	brlt	.+2      	; 0xfc <BT_Receive+0xa>
  fa:	87 c0       	rjmp	.+270    	; 0x20a <BT_Receive+0x118>
	
	rdata = UDR1;
  fc:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 100:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <rdata>
	
	switch(step){
 104:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 108:	82 30       	cpi	r24, 0x02	; 2
 10a:	b1 f0       	breq	.+44     	; 0x138 <BT_Receive+0x46>
 10c:	83 30       	cpi	r24, 0x03	; 3
 10e:	b1 f1       	breq	.+108    	; 0x17c <BT_Receive+0x8a>
 110:	81 30       	cpi	r24, 0x01	; 1
 112:	09 f0       	breq	.+2      	; 0x116 <BT_Receive+0x24>
 114:	54 c0       	rjmp	.+168    	; 0x1be <BT_Receive+0xcc>
		case 1:
		if(rdata == '.') {
 116:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <rdata>
 11a:	8e 32       	cpi	r24, 0x2E	; 46
 11c:	39 f4       	brne	.+14     	; 0x12c <BT_Receive+0x3a>
			step = 0;
 11e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
			BT_send(rdata);
 122:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <rdata>
 126:	de df       	rcall	.-68     	; 0xe4 <BT_send>
			//ElectroMagnet_On();
			return 0x00;
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	08 95       	ret
		}
		else marble.color = rdata - '0';
 12c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <rdata>
 130:	80 53       	subi	r24, 0x30	; 48
 132:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <marble>
		break;
 136:	43 c0       	rjmp	.+134    	; 0x1be <BT_Receive+0xcc>
		
		case 2:
		if(rdata == '.') {
 138:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <rdata>
 13c:	8e 32       	cpi	r24, 0x2E	; 46
 13e:	39 f4       	brne	.+14     	; 0x14e <BT_Receive+0x5c>
			step = 0;
 140:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
			BT_send(rdata);
 144:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <rdata>
 148:	cd df       	rcall	.-102    	; 0xe4 <BT_send>
			//ElectroMagnet_On();
			return 0x00;
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	08 95       	ret
		}
		else marble.posX = marble.posX * 10 + rdata - '0';
 14e:	e0 e1       	ldi	r30, 0x10	; 16
 150:	f1 e0       	ldi	r31, 0x01	; 1
 152:	81 81       	ldd	r24, Z+1	; 0x01
 154:	92 81       	ldd	r25, Z+2	; 0x02
 156:	9c 01       	movw	r18, r24
 158:	22 0f       	add	r18, r18
 15a:	33 1f       	adc	r19, r19
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	82 0f       	add	r24, r18
 16a:	93 1f       	adc	r25, r19
 16c:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <rdata>
 170:	82 0f       	add	r24, r18
 172:	91 1d       	adc	r25, r1
 174:	c0 97       	sbiw	r24, 0x30	; 48
 176:	92 83       	std	Z+2, r25	; 0x02
 178:	81 83       	std	Z+1, r24	; 0x01
		break;
 17a:	21 c0       	rjmp	.+66     	; 0x1be <BT_Receive+0xcc>
		
		case 3:
		if(rdata == '.') {
 17c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <rdata>
 180:	8e 32       	cpi	r24, 0x2E	; 46
 182:	39 f4       	brne	.+14     	; 0x192 <BT_Receive+0xa0>
			step = 0;
 184:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
			BT_send(rdata);
 188:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <rdata>
 18c:	ab df       	rcall	.-170    	; 0xe4 <BT_send>
			//ElectroMagnet_Off();
			return 0x01;
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	08 95       	ret
		}
		else marble.posY = marble.posY * 10 + rdata -'0';
 192:	e0 e1       	ldi	r30, 0x10	; 16
 194:	f1 e0       	ldi	r31, 0x01	; 1
 196:	83 81       	ldd	r24, Z+3	; 0x03
 198:	94 81       	ldd	r25, Z+4	; 0x04
 19a:	9c 01       	movw	r18, r24
 19c:	22 0f       	add	r18, r18
 19e:	33 1f       	adc	r19, r19
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	82 0f       	add	r24, r18
 1ae:	93 1f       	adc	r25, r19
 1b0:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <rdata>
 1b4:	82 0f       	add	r24, r18
 1b6:	91 1d       	adc	r25, r1
 1b8:	c0 97       	sbiw	r24, 0x30	; 48
 1ba:	94 83       	std	Z+4, r25	; 0x04
 1bc:	83 83       	std	Z+3, r24	; 0x03
		break;
	}
	
	if(rdata == '#') {
 1be:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <rdata>
 1c2:	83 32       	cpi	r24, 0x23	; 35
 1c4:	31 f4       	brne	.+12     	; 0x1d2 <BT_Receive+0xe0>
		marble.color = 0;
 1c6:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <marble>
		step = 1;
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 1d0:	17 c0       	rjmp	.+46     	; 0x200 <BT_Receive+0x10e>
	}
	else if(rdata == '!'){
 1d2:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <rdata>
 1d6:	81 32       	cpi	r24, 0x21	; 33
 1d8:	41 f4       	brne	.+16     	; 0x1ea <BT_Receive+0xf8>
		marble.posX = 0;
 1da:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <marble+0x2>
 1de:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <marble+0x1>
		step = 2;
 1e2:	82 e0       	ldi	r24, 0x02	; 2
 1e4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 1e8:	0b c0       	rjmp	.+22     	; 0x200 <BT_Receive+0x10e>
	}
	else if(rdata == '*'){
 1ea:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <rdata>
 1ee:	8a 32       	cpi	r24, 0x2A	; 42
 1f0:	39 f4       	brne	.+14     	; 0x200 <BT_Receive+0x10e>
		marble.posY = 0;
 1f2:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <marble+0x4>
 1f6:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <marble+0x3>
		step = 3;
 1fa:	83 e0       	ldi	r24, 0x03	; 3
 1fc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	}
	
	BT_send(rdata);
 200:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <rdata>
 204:	6f df       	rcall	.-290    	; 0xe4 <BT_send>

	return 0x00;
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	08 95       	ret
char BT_Receive(){
	
	static char step = 0;
	static char tmp = 0;
	
	if(!(UCSR1A&(1<<RXC1))) return 0x00;
 20a:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	BT_send(rdata);

	return 0x00;
}
 20c:	08 95       	ret

0000020e <Select_Item>:
#include <avr/io.h>
#include <util/delay.h>
#include "Item.h"

void Select_Item(char item){
	PORTC = (PORTC & 0xF0) | item;
 20e:	95 b3       	in	r25, 0x15	; 21
 210:	90 7f       	andi	r25, 0xF0	; 240
 212:	89 2b       	or	r24, r25
 214:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 216:	2f ef       	ldi	r18, 0xFF	; 255
 218:	81 ee       	ldi	r24, 0xE1	; 225
 21a:	94 e0       	ldi	r25, 0x04	; 4
 21c:	21 50       	subi	r18, 0x01	; 1
 21e:	80 40       	sbci	r24, 0x00	; 0
 220:	90 40       	sbci	r25, 0x00	; 0
 222:	e1 f7       	brne	.-8      	; 0x21c <Select_Item+0xe>
 224:	00 c0       	rjmp	.+0      	; 0x226 <Select_Item+0x18>
 226:	00 00       	nop
 228:	08 95       	ret

0000022a <timer0_init>:

#endif
//************************************************************************************************************************************************************//

void timer0_init(void) {
	TCCR0 |= (1 << CS02) | (1 << CS00); // 분주비 1024
 22a:	83 b7       	in	r24, 0x33	; 51
 22c:	85 60       	ori	r24, 0x05	; 5
 22e:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1 << TOIE0); // 타이머0 오버플로우 인터럽트 허용
 230:	87 b7       	in	r24, 0x37	; 55
 232:	81 60       	ori	r24, 0x01	; 1
 234:	87 bf       	out	0x37, r24	; 55
	TCNT0 = 0; // 타이머 카운터 초기화
 236:	12 be       	out	0x32, r1	; 50
 238:	08 95       	ret

0000023a <timer1_init>:
}

void timer1_init(){
	TCCR1A=0x82;
 23a:	82 e8       	ldi	r24, 0x82	; 130
 23c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B=0x1b;
 23e:	8b e1       	ldi	r24, 0x1B	; 27
 240:	8e bd       	out	0x2e, r24	; 46

	ICR1=4999;     //TOP
 242:	87 e8       	ldi	r24, 0x87	; 135
 244:	93 e1       	ldi	r25, 0x13	; 19
 246:	97 bd       	out	0x27, r25	; 39
 248:	86 bd       	out	0x26, r24	; 38
 24a:	08 95       	ret

0000024c <port_setup>:
}

void port_setup(){
	DDRA = 0xFF;
 24c:	8f ef       	ldi	r24, 0xFF	; 255
 24e:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0x00;
 250:	11 ba       	out	0x11, r1	; 17
	DDRB = 0xFF;
 252:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xFF;
 254:	84 bb       	out	0x14, r24	; 20
	DDRF=0x00;
 256:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 25a:	08 95       	ret

0000025c <adc_init>:
}

//ADC 입력
//ADC 초기화
void adc_init(void){
	ADMUX=(1<<REFS0); //외부 레퍼런스 접압을 기준 전압으로 선택, 우측정렬, 초기 입력핀은 0번
 25c:	80 e4       	ldi	r24, 0x40	; 64
 25e:	87 b9       	out	0x07, r24	; 7
	ADCSRA=(1<<ADEN)|(0<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //ADC enable, ADC interrupt enable 분주비 128
 260:	87 e8       	ldi	r24, 0x87	; 135
 262:	86 b9       	out	0x06, r24	; 6
 264:	08 95       	ret

00000266 <__vector_16>:
}

ISR(TIMER0_OVF_vect){ //Use Timer0 for collecting sensor value
 266:	1f 92       	push	r1
 268:	0f 92       	push	r0
 26a:	0f b6       	in	r0, 0x3f	; 63
 26c:	0f 92       	push	r0
 26e:	11 24       	eor	r1, r1
 270:	0b b6       	in	r0, 0x3b	; 59
 272:	0f 92       	push	r0
 274:	2f 93       	push	r18
 276:	3f 93       	push	r19
 278:	4f 93       	push	r20
 27a:	5f 93       	push	r21
 27c:	6f 93       	push	r22
 27e:	7f 93       	push	r23
 280:	8f 93       	push	r24
 282:	9f 93       	push	r25
 284:	af 93       	push	r26
 286:	bf 93       	push	r27
 288:	ef 93       	push	r30
 28a:	ff 93       	push	r31
	static char idx = 0x01;
	
	switch(idx){
 28c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 290:	83 30       	cpi	r24, 0x03	; 3
 292:	d1 f0       	breq	.+52     	; 0x2c8 <__vector_16+0x62>
 294:	28 f4       	brcc	.+10     	; 0x2a0 <__vector_16+0x3a>
 296:	81 30       	cpi	r24, 0x01	; 1
 298:	49 f0       	breq	.+18     	; 0x2ac <__vector_16+0x46>
 29a:	82 30       	cpi	r24, 0x02	; 2
 29c:	71 f0       	breq	.+28     	; 0x2ba <__vector_16+0x54>
 29e:	2d c0       	rjmp	.+90     	; 0x2fa <__vector_16+0x94>
 2a0:	85 30       	cpi	r24, 0x05	; 5
 2a2:	01 f1       	breq	.+64     	; 0x2e4 <__vector_16+0x7e>
 2a4:	c0 f0       	brcs	.+48     	; 0x2d6 <__vector_16+0x70>
 2a6:	86 30       	cpi	r24, 0x06	; 6
 2a8:	21 f1       	breq	.+72     	; 0x2f2 <__vector_16+0x8c>
 2aa:	27 c0       	rjmp	.+78     	; 0x2fa <__vector_16+0x94>
		case 0x01:
		Read_CDS();
 2ac:	5e d1       	rcall	.+700    	; 0x56a <Read_CDS>
		idx++;
 2ae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2b2:	8f 5f       	subi	r24, 0xFF	; 255
 2b4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
		
		case 0x02:
		Read_Thermister();
 2b8:	20 c0       	rjmp	.+64     	; 0x2fa <__vector_16+0x94>
 2ba:	ab d1       	rcall	.+854    	; 0x612 <Read_Thermister>
		//Is_Fire_Interrupt(); //Fire Interrupt를 걸까말까
		idx++;
 2bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2c0:	8f 5f       	subi	r24, 0xFF	; 255
 2c2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
		
		case 0x03:
		Read_Pressure();
 2c6:	19 c0       	rjmp	.+50     	; 0x2fa <__vector_16+0x94>
 2c8:	8f d1       	rcall	.+798    	; 0x5e8 <Read_Pressure>
		idx++;
 2ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2ce:	8f 5f       	subi	r24, 0xFF	; 255
 2d0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
		
		case 0x04:
		Read_Shock();
 2d4:	12 c0       	rjmp	.+36     	; 0x2fa <__vector_16+0x94>
 2d6:	b2 d1       	rcall	.+868    	; 0x63c <Read_Shock>
		//Is_PSD_Interrupt(); //PSD Interrupt를 걸까말까
		idx++;
 2d8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2dc:	8f 5f       	subi	r24, 0xFF	; 255
 2de:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
		
		case 0x05:
		Read_Fire();
 2e2:	0b c0       	rjmp	.+22     	; 0x2fa <__vector_16+0x94>
 2e4:	57 d1       	rcall	.+686    	; 0x594 <Read_Fire>
		idx++;
 2e6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2ea:	8f 5f       	subi	r24, 0xFF	; 255
 2ec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
		
		case 0x06:
		Read_PSD();
 2f0:	04 c0       	rjmp	.+8      	; 0x2fa <__vector_16+0x94>
 2f2:	65 d1       	rcall	.+714    	; 0x5be <Read_PSD>
		idx = 0x01;
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
	}

	//ADC Mux 선택, ADC 시작 시키고 ISR 종료
	ADMUX = (ADMUX & 0xF0) | (idx & 0x0F); //다음 센서 선택
 2fa:	87 b1       	in	r24, 0x07	; 7
 2fc:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 300:	9f 70       	andi	r25, 0x0F	; 15
 302:	80 7f       	andi	r24, 0xF0	; 240
 304:	89 2b       	or	r24, r25
 306:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC); // ADC 변환 시작
 308:	86 b1       	in	r24, 0x06	; 6
 30a:	80 64       	ori	r24, 0x40	; 64
 30c:	86 b9       	out	0x06, r24	; 6
}
 30e:	ff 91       	pop	r31
 310:	ef 91       	pop	r30
 312:	bf 91       	pop	r27
 314:	af 91       	pop	r26
 316:	9f 91       	pop	r25
 318:	8f 91       	pop	r24
 31a:	7f 91       	pop	r23
 31c:	6f 91       	pop	r22
 31e:	5f 91       	pop	r21
 320:	4f 91       	pop	r20
 322:	3f 91       	pop	r19
 324:	2f 91       	pop	r18
 326:	0f 90       	pop	r0
 328:	0b be       	out	0x3b, r0	; 59
 32a:	0f 90       	pop	r0
 32c:	0f be       	out	0x3f, r0	; 63
 32e:	0f 90       	pop	r0
 330:	1f 90       	pop	r1
 332:	18 95       	reti

00000334 <ElectroMagnet_On>:

void ElectroMagnet_On(){
	//PORTC &= (0 << ElectroMagnet);
	PORTC = (PORTC & ~(1<<ElectroMagnet)) | (0<<ElectroMagnet);
 334:	85 b3       	in	r24, 0x15	; 21
 336:	8f 77       	andi	r24, 0x7F	; 127
 338:	85 bb       	out	0x15, r24	; 21
 33a:	08 95       	ret

0000033c <ElectroMagnet_Off>:
	//PORTC = 0x7F;
}

void ElectroMagnet_Off(){
	//PORTC |=  (1 << ElectroMagnet);
	PORTC = (PORTC & ~(1<<ElectroMagnet)) | (1<<ElectroMagnet);
 33c:	85 b3       	in	r24, 0x15	; 21
 33e:	80 68       	ori	r24, 0x80	; 128
 340:	85 bb       	out	0x15, r24	; 21
 342:	08 95       	ret

00000344 <RED_LED_On>:
	//PORTC = 0xFF;
}

void RED_LED_On(unsigned int p){
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
 348:	ec 01       	movw	r28, r24
	Select_Item(ITEM_LED_RED);
 34a:	89 e0       	ldi	r24, 0x09	; 9
 34c:	60 df       	rcall	.-320    	; 0x20e <Select_Item>
	OCR1A = p;
 34e:	db bd       	out	0x2b, r29	; 43
 350:	ca bd       	out	0x2a, r28	; 42
}
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	08 95       	ret

00000358 <GREEN_LED_On>:
void GREEN_LED_On(unsigned int p){
 358:	cf 93       	push	r28
 35a:	df 93       	push	r29
 35c:	ec 01       	movw	r28, r24
	Select_Item(ITEM_LED_GREEN);
 35e:	8d e0       	ldi	r24, 0x0D	; 13
 360:	56 df       	rcall	.-340    	; 0x20e <Select_Item>
	OCR1A = p;
 362:	db bd       	out	0x2b, r29	; 43
 364:	ca bd       	out	0x2a, r28	; 42
}
 366:	df 91       	pop	r29
 368:	cf 91       	pop	r28
 36a:	08 95       	ret

0000036c <BLUE_LED_On>:
void BLUE_LED_On(unsigned int p){
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	ec 01       	movw	r28, r24
	Select_Item(ITEM_LED_BLUE);
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	4c df       	rcall	.-360    	; 0x20e <Select_Item>
	OCR1A = p;
 376:	db bd       	out	0x2b, r29	; 43
 378:	ca bd       	out	0x2a, r28	; 42
}
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	08 95       	ret

00000380 <main>:
//**** Not Debug *********************************************************************************************************************************************//
#if DEBUG_ == 2

int main(void)
{	
	port_setup(); //setup port
 380:	65 df       	rcall	.-310    	; 0x24c <port_setup>
	adc_init(); // ADC 초기화
 382:	6c df       	rcall	.-296    	; 0x25c <adc_init>
	timer0_init(); // 타이머0 초기화
 384:	52 df       	rcall	.-348    	; 0x22a <timer0_init>
	timer1_init(); //타이머 초기화
 386:	59 df       	rcall	.-334    	; 0x23a <timer1_init>
	
	init_BT();	//Bluetooth Setup
 388:	9f de       	rcall	.-706    	; 0xc8 <init_BT>
 38a:	6d d1       	rcall	.+730    	; 0x666 <Reset_sensor_val>
	
	Reset_sensor_val(); //센서 변수 초기화
 38c:	d7 df       	rcall	.-82     	; 0x33c <ElectroMagnet_Off>
 38e:	e0 e1       	ldi	r30, 0x10	; 16
	
	ElectroMagnet_Off();
 390:	f1 e0       	ldi	r31, 0x01	; 1
 392:	85 e0       	ldi	r24, 0x05	; 5
	
	marble.color = 0x05;
 394:	80 83       	st	Z, r24
 396:	8f ef       	ldi	r24, 0xFF	; 255
 398:	9f ef       	ldi	r25, 0xFF	; 255
 39a:	92 83       	std	Z+2, r25	; 0x02
	marble.posX = -1;
 39c:	81 83       	std	Z+1, r24	; 0x01
 39e:	94 83       	std	Z+4, r25	; 0x04
 3a0:	83 83       	std	Z+3, r24	; 0x03
 3a2:	78 94       	sei
	marble.posY = -1;
 3a4:	84 e1       	ldi	r24, 0x14	; 20
 3a6:	90 e0       	ldi	r25, 0x00	; 0
	
	sei(); //Allow Interrupt
 3a8:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <Servo_increment_threshold+0x1>
	
	//Action_Allowed = 0x01;
	Servo_increment_threshold = 20;
 3ac:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <Servo_increment_threshold>
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <Servo_Allowed>
	Servo_Allowed = 0x01;
 3b6:	87 e7       	ldi	r24, 0x77	; 119
 3b8:	91 e0       	ldi	r25, 0x01	; 1
	//Servo_Go_Home(); //Move Servo to Home Position
	Servo_Goto(375);
 3ba:	dd d1       	rcall	.+954    	; 0x776 <Servo_Goto>
 3bc:	94 d1       	rcall	.+808    	; 0x6e6 <Servo_Go_Home>
 3be:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state>
	Servo_Go_Home();
 3c2:	84 30       	cpi	r24, 0x04	; 4
 3c4:	11 f1       	breq	.+68     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
	//This is for just in case bluetooth fails at presentation
	
	short i;
	
    while (1) {
		switch(state){
 3c6:	28 f4       	brcc	.+10     	; 0x3d2 <main+0x52>
 3c8:	81 30       	cpi	r24, 0x01	; 1
 3ca:	49 f0       	breq	.+18     	; 0x3de <main+0x5e>
 3cc:	82 30       	cpi	r24, 0x02	; 2
 3ce:	a1 f0       	breq	.+40     	; 0x3f8 <main+0x78>
 3d0:	f6 cf       	rjmp	.-20     	; 0x3be <main+0x3e>
 3d2:	88 30       	cpi	r24, 0x08	; 8
 3d4:	89 f1       	breq	.+98     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 3d6:	80 31       	cpi	r24, 0x10	; 16
 3d8:	09 f4       	brne	.+2      	; 0x3dc <main+0x5c>
 3da:	51 c0       	rjmp	.+162    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 3dc:	f0 cf       	rjmp	.-32     	; 0x3be <main+0x3e>
 3de:	80 99       	sbic	0x10, 0	; 16
			case 0b00000001:					//not started
				//if(pressure_sensor_val >= 50)	//pressure threshold is 50(just guessing)
					//state <<= 1;				//Change state
				
				if(!(PIND & 0x01)){ //sw0 pushed
 3e0:	ee cf       	rjmp	.-36     	; 0x3be <main+0x3e>
 3e2:	83 e0       	ldi	r24, 0x03	; 3
					Select_Item(ITEM_NONE);
 3e4:	14 df       	rcall	.-472    	; 0x20e <Select_Item>
 3e6:	a6 df       	rcall	.-180    	; 0x334 <ElectroMagnet_On>
					ElectroMagnet_On();
 3e8:	80 e3       	ldi	r24, 0x30	; 48
 3ea:	7c de       	rcall	.-776    	; 0xe4 <BT_send>
					BT_send('0'); //start signal
 3ec:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state>
 3f0:	88 0f       	add	r24, r24
					state <<= 1;
 3f2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 3f6:	e3 cf       	rjmp	.-58     	; 0x3be <main+0x3e>
 3f8:	7c de       	rcall	.-776    	; 0xf2 <BT_Receive>
 3fa:	88 23       	and	r24, r24
				}
				break;
				
			case 0b00000010:	//wait for Marble data to arrive from the server
				if(BT_Receive()){
 3fc:	01 f3       	breq	.-64     	; 0x3be <main+0x3e>
 3fe:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state>
					//Marble Data has arrived from the server
					//Calculate_Marble_pos();
					state <<= 1;
 402:	88 0f       	add	r24, r24
 404:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 408:	da cf       	rjmp	.-76     	; 0x3be <main+0x3e>
				}
				break;
				
			case 0b00000100:	//Catch & Drop Marble
				//Servo_Go_Marble(); //Rotate Servo to Marble to catch marble
				Servo_Goto(375);
 40a:	87 e7       	ldi	r24, 0x77	; 119
 40c:	91 e0       	ldi	r25, 0x01	; 1
 40e:	b3 d1       	rcall	.+870    	; 0x776 <Servo_Goto>
 410:	91 df       	rcall	.-222    	; 0x334 <ElectroMagnet_On>
				
				//Servo Reached Destination				
				ElectroMagnet_On(); //Turn on ElectroMagnet
 412:	8d d1       	rcall	.+794    	; 0x72e <Servo_Go_Box>
 414:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <shk_detected>
				
				//Rotate Servo to Marble Box
				Servo_Go_Box();
 418:	91 df       	rcall	.-222    	; 0x33c <ElectroMagnet_Off>

				//Servo Reached Destination
				shk_detected = 0x00; //Reset Shock Flag
 41a:	2f ef       	ldi	r18, 0xFF	; 255
 41c:	87 ea       	ldi	r24, 0xA7	; 167
				ElectroMagnet_Off(); //Drop Marble
 41e:	91 e6       	ldi	r25, 0x61	; 97
 420:	21 50       	subi	r18, 0x01	; 1
 422:	80 40       	sbci	r24, 0x00	; 0
 424:	90 40       	sbci	r25, 0x00	; 0
 426:	e1 f7       	brne	.-8      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 428:	00 c0       	rjmp	.+0      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 42a:	00 00       	nop
 42c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state>
 430:	88 0f       	add	r24, r24
				
				_delay_ms(2000); //Wait 2 seconds for Marble to drop and Shock to be detected

				state <<= 1;
 432:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 436:	c3 cf       	rjmp	.-122    	; 0x3be <main+0x3e>
 438:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <shk_detected>
				//Set LED
				//Set OCR with Timer for PWM Control
				break;
				
			case 0b00001000: //Marble success or retry
				if(shk_detected == 0x01){ //Marble was succefully dropped
 43c:	81 30       	cpi	r24, 0x01	; 1
 43e:	49 f4       	brne	.+18     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
					shk_detected = 0x00;
 440:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <shk_detected>
					
					Servo_Go_Home();
 444:	50 d1       	rcall	.+672    	; 0x6e6 <Servo_Go_Home>
					
					state <<= 1;
 446:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state>
 44a:	88 0f       	add	r24, r24
 44c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
					//Servo_Go_Home();
					//state <<= 1;
					//break;
					
					//Move servo to home
					Servo_Set_Speed(20); //temporary
 450:	b6 cf       	rjmp	.-148    	; 0x3be <main+0x3e>
 452:	84 e1       	ldi	r24, 0x14	; 20
					Servo_Go_Home();
 454:	b7 d1       	rcall	.+878    	; 0x7c4 <Servo_Set_Speed>
 456:	47 d1       	rcall	.+654    	; 0x6e6 <Servo_Go_Home>
					
					//Turn on Electro Magnet
					ElectroMagnet_On();
 458:	6d df       	rcall	.-294    	; 0x334 <ElectroMagnet_On>
 45a:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <temp_en>
					
					temp_en = 0x00; //temperature sensor does not control servo speed
 45e:	80 e5       	ldi	r24, 0x50	; 80
					Servo_Set_Speed(80); //Very slowly
 460:	b1 d1       	rcall	.+866    	; 0x7c4 <Servo_Set_Speed>
 462:	65 d1       	rcall	.+714    	; 0x72e <Servo_Go_Box>
					
					//Move servo to Marble Collecting Box
					Servo_Go_Box();
 464:	6b df       	rcall	.-298    	; 0x33c <ElectroMagnet_Off>
 466:	81 e0       	ldi	r24, 0x01	; 1
					
					//Turn off Electro Magnet <- Drop Marble
					ElectroMagnet_Off();
 468:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <temp_en>
					
					temp_en = 0x01; //temperature sensor controls servo speed
 46c:	84 e1       	ldi	r24, 0x14	; 20
 46e:	aa d1       	rcall	.+852    	; 0x7c4 <Servo_Set_Speed>
					
					Servo_Set_Speed(20);
 470:	3a d1       	rcall	.+628    	; 0x6e6 <Servo_Go_Home>
 472:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state>
					Servo_Go_Home(); //Servo returns home
 476:	88 0f       	add	r24, r24
					
					state <<= 1;
 478:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 47c:	a0 cf       	rjmp	.-192    	; 0x3be <main+0x3e>
 47e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <marble>
				break;
				
			case 0b00010000:
				
				
				if(marble.color == 0) RED_LED_On(500);
 482:	81 11       	cpse	r24, r1
 484:	04 c0       	rjmp	.+8      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 486:	84 ef       	ldi	r24, 0xF4	; 244
 488:	91 e0       	ldi	r25, 0x01	; 1
 48a:	5c df       	rcall	.-328    	; 0x344 <RED_LED_On>
 48c:	0e c0       	rjmp	.+28     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 48e:	81 30       	cpi	r24, 0x01	; 1
 490:	21 f4       	brne	.+8      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 492:	84 ef       	ldi	r24, 0xF4	; 244
				else if(marble.color == 1) GREEN_LED_On(500);
 494:	91 e0       	ldi	r25, 0x01	; 1
 496:	60 df       	rcall	.-320    	; 0x358 <GREEN_LED_On>
 498:	08 c0       	rjmp	.+16     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 49a:	82 30       	cpi	r24, 0x02	; 2
 49c:	21 f4       	brne	.+8      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 49e:	84 ef       	ldi	r24, 0xF4	; 244
 4a0:	91 e0       	ldi	r25, 0x01	; 1
				else if(marble.color == 2) BLUE_LED_On(500);
 4a2:	64 df       	rcall	.-312    	; 0x36c <BLUE_LED_On>
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 4a6:	83 e0       	ldi	r24, 0x03	; 3
 4a8:	b2 de       	rcall	.-668    	; 0x20e <Select_Item>
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
				else Select_Item(ITEM_NONE);
 4b0:	86 cf       	rjmp	.-244    	; 0x3be <main+0x3e>

000004b2 <lpf>:
 4b2:	8f 92       	push	r8
 4b4:	9f 92       	push	r9
 4b6:	af 92       	push	r10
 4b8:	bf 92       	push	r11
 4ba:	cf 92       	push	r12
 4bc:	df 92       	push	r13
 4be:	ef 92       	push	r14
 4c0:	ff 92       	push	r15
 4c2:	cf 93       	push	r28
 4c4:	df 93       	push	r29
 4c6:	ec 01       	movw	r28, r24
 4c8:	69 01       	movw	r12, r18
 4ca:	7a 01       	movw	r14, r20
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	10 d2       	rcall	.+1056   	; 0x8f2 <__floatunsisf>
 4d2:	a7 01       	movw	r20, r14
 4d4:	96 01       	movw	r18, r12
 4d6:	9b d2       	rcall	.+1334   	; 0xa0e <__mulsf3>
 4d8:	4b 01       	movw	r8, r22
 4da:	5c 01       	movw	r10, r24
 4dc:	a7 01       	movw	r20, r14
 4de:	96 01       	movw	r18, r12
 4e0:	60 e0       	ldi	r22, 0x00	; 0
 4e2:	70 e0       	ldi	r23, 0x00	; 0
 4e4:	80 e8       	ldi	r24, 0x80	; 128
 4e6:	9f e3       	ldi	r25, 0x3F	; 63
 4e8:	73 d1       	rcall	.+742    	; 0x7d0 <__subsf3>
 4ea:	6b 01       	movw	r12, r22
 4ec:	7c 01       	movw	r14, r24
 4ee:	be 01       	movw	r22, r28
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	fe d1       	rcall	.+1020   	; 0x8f2 <__floatunsisf>
 4f6:	a7 01       	movw	r20, r14
 4f8:	96 01       	movw	r18, r12
 4fa:	89 d2       	rcall	.+1298   	; 0xa0e <__mulsf3>
 4fc:	9b 01       	movw	r18, r22
 4fe:	ac 01       	movw	r20, r24
 500:	c5 01       	movw	r24, r10
 502:	b4 01       	movw	r22, r8
 504:	66 d1       	rcall	.+716    	; 0x7d2 <__addsf3>
 506:	c9 d1       	rcall	.+914    	; 0x89a <__fixunssfsi>
 508:	cb 01       	movw	r24, r22
 50a:	df 91       	pop	r29
 50c:	cf 91       	pop	r28
 50e:	ff 90       	pop	r15
 510:	ef 90       	pop	r14
 512:	df 90       	pop	r13
 514:	cf 90       	pop	r12
 516:	bf 90       	pop	r11
 518:	af 90       	pop	r10
 51a:	9f 90       	pop	r9
 51c:	8f 90       	pop	r8
 51e:	08 95       	ret

00000520 <hpf>:
 520:	cf 92       	push	r12
 522:	df 92       	push	r13
 524:	ef 92       	push	r14
 526:	ff 92       	push	r15
 528:	cf 93       	push	r28
 52a:	df 93       	push	r29
 52c:	ec 01       	movw	r28, r24
 52e:	69 01       	movw	r12, r18
 530:	7a 01       	movw	r14, r20
 532:	68 0f       	add	r22, r24
 534:	79 1f       	adc	r23, r25
 536:	80 e0       	ldi	r24, 0x00	; 0
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	db d1       	rcall	.+950    	; 0x8f2 <__floatunsisf>
 53c:	a7 01       	movw	r20, r14
 53e:	96 01       	movw	r18, r12
 540:	66 d2       	rcall	.+1228   	; 0xa0e <__mulsf3>
 542:	6b 01       	movw	r12, r22
 544:	7c 01       	movw	r14, r24
 546:	be 01       	movw	r22, r28
 548:	80 e0       	ldi	r24, 0x00	; 0
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	d2 d1       	rcall	.+932    	; 0x8f2 <__floatunsisf>
 54e:	9b 01       	movw	r18, r22
 550:	ac 01       	movw	r20, r24
 552:	c7 01       	movw	r24, r14
 554:	b6 01       	movw	r22, r12
 556:	3c d1       	rcall	.+632    	; 0x7d0 <__subsf3>
 558:	a0 d1       	rcall	.+832    	; 0x89a <__fixunssfsi>
 55a:	cb 01       	movw	r24, r22
 55c:	df 91       	pop	r29
 55e:	cf 91       	pop	r28
 560:	ff 90       	pop	r15
 562:	ef 90       	pop	r14
 564:	df 90       	pop	r13
 566:	cf 90       	pop	r12
 568:	08 95       	ret

0000056a <Read_CDS>:
 56a:	64 b1       	in	r22, 0x04	; 4
 56c:	75 b1       	in	r23, 0x05	; 5
 56e:	2d ec       	ldi	r18, 0xCD	; 205
 570:	3c ec       	ldi	r19, 0xCC	; 204
 572:	4c ec       	ldi	r20, 0xCC	; 204
 574:	5d e3       	ldi	r21, 0x3D	; 61
 576:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <previous_value.1628>
 57a:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <previous_value.1628+0x1>
 57e:	99 df       	rcall	.-206    	; 0x4b2 <lpf>
 580:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <cds_sensor_val>
 584:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <cds_sensor_val>
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <previous_value.1628+0x1>
 58e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <previous_value.1628>
 592:	08 95       	ret

00000594 <Read_Fire>:
 594:	64 b1       	in	r22, 0x04	; 4
 596:	75 b1       	in	r23, 0x05	; 5
 598:	2d ec       	ldi	r18, 0xCD	; 205
 59a:	3c ec       	ldi	r19, 0xCC	; 204
 59c:	4c ec       	ldi	r20, 0xCC	; 204
 59e:	5d e3       	ldi	r21, 0x3D	; 61
 5a0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <previous_value.1631>
 5a4:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <previous_value.1631+0x1>
 5a8:	84 df       	rcall	.-248    	; 0x4b2 <lpf>
 5aa:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <fire_sensor_val>
 5ae:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <fire_sensor_val>
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <previous_value.1631+0x1>
 5b8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <previous_value.1631>
 5bc:	08 95       	ret

000005be <Read_PSD>:
 5be:	64 b1       	in	r22, 0x04	; 4
 5c0:	75 b1       	in	r23, 0x05	; 5
 5c2:	2d ec       	ldi	r18, 0xCD	; 205
 5c4:	3c ec       	ldi	r19, 0xCC	; 204
 5c6:	4c ec       	ldi	r20, 0xCC	; 204
 5c8:	5d e3       	ldi	r21, 0x3D	; 61
 5ca:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <previous_value.1634>
 5ce:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <previous_value.1634+0x1>
 5d2:	6f df       	rcall	.-290    	; 0x4b2 <lpf>
 5d4:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <psd_sensor_val>
 5d8:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <psd_sensor_val>
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <previous_value.1634+0x1>
 5e2:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <previous_value.1634>
 5e6:	08 95       	ret

000005e8 <Read_Pressure>:
 5e8:	64 b1       	in	r22, 0x04	; 4
 5ea:	75 b1       	in	r23, 0x05	; 5
 5ec:	2a e9       	ldi	r18, 0x9A	; 154
 5ee:	39 e9       	ldi	r19, 0x99	; 153
 5f0:	49 e1       	ldi	r20, 0x19	; 25
 5f2:	5f e3       	ldi	r21, 0x3F	; 63
 5f4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <previous_value.1637>
 5f8:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <previous_value.1637+0x1>
 5fc:	91 df       	rcall	.-222    	; 0x520 <hpf>
 5fe:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <pressure_sensor_val>
 602:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <pressure_sensor_val>
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <previous_value.1637+0x1>
 60c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <previous_value.1637>
 610:	08 95       	ret

00000612 <Read_Thermister>:
 612:	64 b1       	in	r22, 0x04	; 4
 614:	75 b1       	in	r23, 0x05	; 5
 616:	20 e0       	ldi	r18, 0x00	; 0
 618:	30 e0       	ldi	r19, 0x00	; 0
 61a:	40 e0       	ldi	r20, 0x00	; 0
 61c:	5f e3       	ldi	r21, 0x3F	; 63
 61e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <previous_value.1640>
 622:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <previous_value.1640+0x1>
 626:	7c df       	rcall	.-264    	; 0x520 <hpf>
 628:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <temp_sensor_val>
 62c:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <temp_sensor_val>
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <previous_value.1640+0x1>
 636:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <previous_value.1640>
 63a:	08 95       	ret

0000063c <Read_Shock>:
 63c:	64 b1       	in	r22, 0x04	; 4
 63e:	75 b1       	in	r23, 0x05	; 5
 640:	2d ec       	ldi	r18, 0xCD	; 205
 642:	3c ec       	ldi	r19, 0xCC	; 204
 644:	4c ec       	ldi	r20, 0xCC	; 204
 646:	5d e3       	ldi	r21, 0x3D	; 61
 648:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <previous_value.1643>
 64c:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <previous_value.1643+0x1>
 650:	30 df       	rcall	.-416    	; 0x4b2 <lpf>
 652:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <shk_sensor_val>
 656:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <shk_sensor_val>
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <previous_value.1643+0x1>
 660:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <previous_value.1643>
 664:	08 95       	ret

00000666 <Reset_sensor_val>:
 666:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <pressure_sensor_val>
 66a:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <cds_sensor_val>
 66e:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <temp_sensor_val>
 672:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <temp_en>
 676:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <shk_sensor_val>
 67a:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <shk_detected>
 67e:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <psd_sensor_val>
 682:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <fire_sensor_val>
 686:	08 95       	ret

00000688 <Servo_Act>:
}
void Servo_Go_Marble(){
	Select_Item(ITEM_SERVO);
	Servo_Set_Target(Marble_pos);
	Servo_Act();
}
 688:	80 e0       	ldi	r24, 0x00	; 0
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	1c c0       	rjmp	.+56     	; 0x6c6 <Servo_Act+0x3e>
 68e:	01 96       	adiw	r24, 0x01	; 1
 690:	40 91 30 01 	lds	r20, 0x0130	; 0x800130 <Servo_increment_threshold>
 694:	50 91 31 01 	lds	r21, 0x0131	; 0x800131 <Servo_increment_threshold+0x1>
 698:	84 17       	cp	r24, r20
 69a:	95 07       	cpc	r25, r21
 69c:	71 f4       	brne	.+28     	; 0x6ba <Servo_Act+0x32>
 69e:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <Servo_step>
 6a2:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <Servo_step+0x1>
 6a6:	28 0f       	add	r18, r24
 6a8:	39 1f       	adc	r19, r25
 6aa:	30 93 2e 01 	sts	0x012E, r19	; 0x80012e <Servo_pos+0x1>
 6ae:	20 93 2d 01 	sts	0x012D, r18	; 0x80012d <Servo_pos>
 6b2:	3b bd       	out	0x2b, r19	; 43
 6b4:	2a bd       	out	0x2a, r18	; 42
 6b6:	80 e0       	ldi	r24, 0x00	; 0
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	ef e8       	ldi	r30, 0x8F	; 143
 6bc:	f1 e0       	ldi	r31, 0x01	; 1
 6be:	31 97       	sbiw	r30, 0x01	; 1
 6c0:	f1 f7       	brne	.-4      	; 0x6be <Servo_Act+0x36>
 6c2:	00 c0       	rjmp	.+0      	; 0x6c4 <Servo_Act+0x3c>
 6c4:	00 00       	nop
 6c6:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <Servo_pos>
 6ca:	30 91 2e 01 	lds	r19, 0x012E	; 0x80012e <Servo_pos+0x1>
 6ce:	40 91 25 01 	lds	r20, 0x0125	; 0x800125 <Servo_target>
 6d2:	50 91 26 01 	lds	r21, 0x0126	; 0x800126 <Servo_target+0x1>
 6d6:	24 17       	cp	r18, r20
 6d8:	35 07       	cpc	r19, r21
 6da:	21 f0       	breq	.+8      	; 0x6e4 <Servo_Act+0x5c>
 6dc:	40 91 28 01 	lds	r20, 0x0128	; 0x800128 <Servo_Allowed>
 6e0:	41 11       	cpse	r20, r1
 6e2:	d5 cf       	rjmp	.-86     	; 0x68e <Servo_Act+0x6>
 6e4:	08 95       	ret

000006e6 <Servo_Go_Home>:
 6e6:	82 e0       	ldi	r24, 0x02	; 2
 6e8:	92 dd       	rcall	.-1244   	; 0x20e <Select_Item>
 6ea:	82 e0       	ldi	r24, 0x02	; 2
 6ec:	90 dd       	rcall	.-1248   	; 0x20e <Select_Item>
 6ee:	82 e8       	ldi	r24, 0x82	; 130
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <Servo_target+0x1>
 6f6:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <Servo_target>
 6fa:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <Servo_pos>
 6fe:	30 91 2e 01 	lds	r19, 0x012E	; 0x80012e <Servo_pos+0x1>
 702:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <Servo_target>
 706:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <Servo_target+0x1>
 70a:	28 17       	cp	r18, r24
 70c:	39 07       	cpc	r19, r25
 70e:	38 f0       	brcs	.+14     	; 0x71e <Servo_Go_Home+0x38>
 710:	8f ef       	ldi	r24, 0xFF	; 255
 712:	9f ef       	ldi	r25, 0xFF	; 255
 714:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <Servo_step+0x1>
 718:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <Servo_step>
 71c:	06 c0       	rjmp	.+12     	; 0x72a <Servo_Go_Home+0x44>
 71e:	81 e0       	ldi	r24, 0x01	; 1
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <Servo_step+0x1>
 726:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <Servo_step>
 72a:	ae cf       	rjmp	.-164    	; 0x688 <Servo_Act>
 72c:	08 95       	ret

0000072e <Servo_Go_Box>:
 72e:	82 e0       	ldi	r24, 0x02	; 2
 730:	6e dd       	rcall	.-1316   	; 0x20e <Select_Item>
 732:	82 e0       	ldi	r24, 0x02	; 2
 734:	6c dd       	rcall	.-1320   	; 0x20e <Select_Item>
 736:	8c e6       	ldi	r24, 0x6C	; 108
 738:	92 e0       	ldi	r25, 0x02	; 2
 73a:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <Servo_target+0x1>
 73e:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <Servo_target>
 742:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <Servo_pos>
 746:	30 91 2e 01 	lds	r19, 0x012E	; 0x80012e <Servo_pos+0x1>
 74a:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <Servo_target>
 74e:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <Servo_target+0x1>
 752:	28 17       	cp	r18, r24
 754:	39 07       	cpc	r19, r25
 756:	38 f0       	brcs	.+14     	; 0x766 <Servo_Go_Box+0x38>
 758:	8f ef       	ldi	r24, 0xFF	; 255
 75a:	9f ef       	ldi	r25, 0xFF	; 255
 75c:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <Servo_step+0x1>
 760:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <Servo_step>
 764:	06 c0       	rjmp	.+12     	; 0x772 <Servo_Go_Box+0x44>
 766:	81 e0       	ldi	r24, 0x01	; 1
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <Servo_step+0x1>
 76e:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <Servo_step>
 772:	8a cf       	rjmp	.-236    	; 0x688 <Servo_Act>
 774:	08 95       	ret

00000776 <Servo_Goto>:
void Servo_Goto(unsigned short pos){
 776:	cf 93       	push	r28
 778:	df 93       	push	r29
 77a:	ec 01       	movw	r28, r24
	Select_Item(ITEM_SERVO);
 77c:	82 e0       	ldi	r24, 0x02	; 2
 77e:	47 dd       	rcall	.-1394   	; 0x20e <Select_Item>
	Servo_pos = val;
	OCR1A = Servo_pos;
}

inline void Servo_Set_Target(unsigned short val){
	Select_Item(ITEM_SERVO);
 780:	82 e0       	ldi	r24, 0x02	; 2
 782:	45 dd       	rcall	.-1398   	; 0x20e <Select_Item>
	
	Servo_target = val;
 784:	d0 93 26 01 	sts	0x0126, r29	; 0x800126 <Servo_target+0x1>
 788:	c0 93 25 01 	sts	0x0125, r28	; 0x800125 <Servo_target>
	
	if(Servo_pos >= Servo_target) Servo_step = -1;
 78c:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <Servo_pos>
 790:	30 91 2e 01 	lds	r19, 0x012E	; 0x80012e <Servo_pos+0x1>
 794:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <Servo_target>
 798:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <Servo_target+0x1>
 79c:	28 17       	cp	r18, r24
 79e:	39 07       	cpc	r19, r25
 7a0:	38 f0       	brcs	.+14     	; 0x7b0 <Servo_Goto+0x3a>
 7a2:	8f ef       	ldi	r24, 0xFF	; 255
 7a4:	9f ef       	ldi	r25, 0xFF	; 255
 7a6:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <Servo_step+0x1>
 7aa:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <Servo_step>
 7ae:	06 c0       	rjmp	.+12     	; 0x7bc <Servo_Goto+0x46>
	else Servo_step = 1;
 7b0:	81 e0       	ldi	r24, 0x01	; 1
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <Servo_step+0x1>
 7b8:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <Servo_step>
	Servo_Act();
}
void Servo_Goto(unsigned short pos){
	Select_Item(ITEM_SERVO);
	Servo_Set_Target(pos);
	Servo_Act();
 7bc:	65 df       	rcall	.-310    	; 0x688 <Servo_Act>
}
 7be:	df 91       	pop	r29
 7c0:	cf 91       	pop	r28
 7c2:	08 95       	ret

000007c4 <Servo_Set_Speed>:
	}
	
}

void Servo_Set_Speed(char sp){
	Servo_increment_threshold = sp;
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <Servo_increment_threshold+0x1>
 7ca:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <Servo_increment_threshold>
 7ce:	08 95       	ret

000007d0 <__subsf3>:
 7d0:	50 58       	subi	r21, 0x80	; 128

000007d2 <__addsf3>:
 7d2:	bb 27       	eor	r27, r27
 7d4:	aa 27       	eor	r26, r26
 7d6:	0e d0       	rcall	.+28     	; 0x7f4 <__addsf3x>
 7d8:	e0 c0       	rjmp	.+448    	; 0x99a <__fp_round>
 7da:	d1 d0       	rcall	.+418    	; 0x97e <__fp_pscA>
 7dc:	30 f0       	brcs	.+12     	; 0x7ea <__addsf3+0x18>
 7de:	d6 d0       	rcall	.+428    	; 0x98c <__fp_pscB>
 7e0:	20 f0       	brcs	.+8      	; 0x7ea <__addsf3+0x18>
 7e2:	31 f4       	brne	.+12     	; 0x7f0 <__addsf3+0x1e>
 7e4:	9f 3f       	cpi	r25, 0xFF	; 255
 7e6:	11 f4       	brne	.+4      	; 0x7ec <__addsf3+0x1a>
 7e8:	1e f4       	brtc	.+6      	; 0x7f0 <__addsf3+0x1e>
 7ea:	c6 c0       	rjmp	.+396    	; 0x978 <__fp_nan>
 7ec:	0e f4       	brtc	.+2      	; 0x7f0 <__addsf3+0x1e>
 7ee:	e0 95       	com	r30
 7f0:	e7 fb       	bst	r30, 7
 7f2:	bc c0       	rjmp	.+376    	; 0x96c <__fp_inf>

000007f4 <__addsf3x>:
 7f4:	e9 2f       	mov	r30, r25
 7f6:	e2 d0       	rcall	.+452    	; 0x9bc <__fp_split3>
 7f8:	80 f3       	brcs	.-32     	; 0x7da <__addsf3+0x8>
 7fa:	ba 17       	cp	r27, r26
 7fc:	62 07       	cpc	r22, r18
 7fe:	73 07       	cpc	r23, r19
 800:	84 07       	cpc	r24, r20
 802:	95 07       	cpc	r25, r21
 804:	18 f0       	brcs	.+6      	; 0x80c <__addsf3x+0x18>
 806:	71 f4       	brne	.+28     	; 0x824 <__addsf3x+0x30>
 808:	9e f5       	brtc	.+102    	; 0x870 <__addsf3x+0x7c>
 80a:	fa c0       	rjmp	.+500    	; 0xa00 <__fp_zero>
 80c:	0e f4       	brtc	.+2      	; 0x810 <__addsf3x+0x1c>
 80e:	e0 95       	com	r30
 810:	0b 2e       	mov	r0, r27
 812:	ba 2f       	mov	r27, r26
 814:	a0 2d       	mov	r26, r0
 816:	0b 01       	movw	r0, r22
 818:	b9 01       	movw	r22, r18
 81a:	90 01       	movw	r18, r0
 81c:	0c 01       	movw	r0, r24
 81e:	ca 01       	movw	r24, r20
 820:	a0 01       	movw	r20, r0
 822:	11 24       	eor	r1, r1
 824:	ff 27       	eor	r31, r31
 826:	59 1b       	sub	r21, r25
 828:	99 f0       	breq	.+38     	; 0x850 <__addsf3x+0x5c>
 82a:	59 3f       	cpi	r21, 0xF9	; 249
 82c:	50 f4       	brcc	.+20     	; 0x842 <__addsf3x+0x4e>
 82e:	50 3e       	cpi	r21, 0xE0	; 224
 830:	68 f1       	brcs	.+90     	; 0x88c <__addsf3x+0x98>
 832:	1a 16       	cp	r1, r26
 834:	f0 40       	sbci	r31, 0x00	; 0
 836:	a2 2f       	mov	r26, r18
 838:	23 2f       	mov	r18, r19
 83a:	34 2f       	mov	r19, r20
 83c:	44 27       	eor	r20, r20
 83e:	58 5f       	subi	r21, 0xF8	; 248
 840:	f3 cf       	rjmp	.-26     	; 0x828 <__addsf3x+0x34>
 842:	46 95       	lsr	r20
 844:	37 95       	ror	r19
 846:	27 95       	ror	r18
 848:	a7 95       	ror	r26
 84a:	f0 40       	sbci	r31, 0x00	; 0
 84c:	53 95       	inc	r21
 84e:	c9 f7       	brne	.-14     	; 0x842 <__addsf3x+0x4e>
 850:	7e f4       	brtc	.+30     	; 0x870 <__addsf3x+0x7c>
 852:	1f 16       	cp	r1, r31
 854:	ba 0b       	sbc	r27, r26
 856:	62 0b       	sbc	r22, r18
 858:	73 0b       	sbc	r23, r19
 85a:	84 0b       	sbc	r24, r20
 85c:	ba f0       	brmi	.+46     	; 0x88c <__addsf3x+0x98>
 85e:	91 50       	subi	r25, 0x01	; 1
 860:	a1 f0       	breq	.+40     	; 0x88a <__addsf3x+0x96>
 862:	ff 0f       	add	r31, r31
 864:	bb 1f       	adc	r27, r27
 866:	66 1f       	adc	r22, r22
 868:	77 1f       	adc	r23, r23
 86a:	88 1f       	adc	r24, r24
 86c:	c2 f7       	brpl	.-16     	; 0x85e <__addsf3x+0x6a>
 86e:	0e c0       	rjmp	.+28     	; 0x88c <__addsf3x+0x98>
 870:	ba 0f       	add	r27, r26
 872:	62 1f       	adc	r22, r18
 874:	73 1f       	adc	r23, r19
 876:	84 1f       	adc	r24, r20
 878:	48 f4       	brcc	.+18     	; 0x88c <__addsf3x+0x98>
 87a:	87 95       	ror	r24
 87c:	77 95       	ror	r23
 87e:	67 95       	ror	r22
 880:	b7 95       	ror	r27
 882:	f7 95       	ror	r31
 884:	9e 3f       	cpi	r25, 0xFE	; 254
 886:	08 f0       	brcs	.+2      	; 0x88a <__addsf3x+0x96>
 888:	b3 cf       	rjmp	.-154    	; 0x7f0 <__addsf3+0x1e>
 88a:	93 95       	inc	r25
 88c:	88 0f       	add	r24, r24
 88e:	08 f0       	brcs	.+2      	; 0x892 <__addsf3x+0x9e>
 890:	99 27       	eor	r25, r25
 892:	ee 0f       	add	r30, r30
 894:	97 95       	ror	r25
 896:	87 95       	ror	r24
 898:	08 95       	ret

0000089a <__fixunssfsi>:
 89a:	98 d0       	rcall	.+304    	; 0x9cc <__fp_splitA>
 89c:	88 f0       	brcs	.+34     	; 0x8c0 <__fixunssfsi+0x26>
 89e:	9f 57       	subi	r25, 0x7F	; 127
 8a0:	90 f0       	brcs	.+36     	; 0x8c6 <__fixunssfsi+0x2c>
 8a2:	b9 2f       	mov	r27, r25
 8a4:	99 27       	eor	r25, r25
 8a6:	b7 51       	subi	r27, 0x17	; 23
 8a8:	a0 f0       	brcs	.+40     	; 0x8d2 <__fixunssfsi+0x38>
 8aa:	d1 f0       	breq	.+52     	; 0x8e0 <__fixunssfsi+0x46>
 8ac:	66 0f       	add	r22, r22
 8ae:	77 1f       	adc	r23, r23
 8b0:	88 1f       	adc	r24, r24
 8b2:	99 1f       	adc	r25, r25
 8b4:	1a f0       	brmi	.+6      	; 0x8bc <__fixunssfsi+0x22>
 8b6:	ba 95       	dec	r27
 8b8:	c9 f7       	brne	.-14     	; 0x8ac <__fixunssfsi+0x12>
 8ba:	12 c0       	rjmp	.+36     	; 0x8e0 <__fixunssfsi+0x46>
 8bc:	b1 30       	cpi	r27, 0x01	; 1
 8be:	81 f0       	breq	.+32     	; 0x8e0 <__fixunssfsi+0x46>
 8c0:	9f d0       	rcall	.+318    	; 0xa00 <__fp_zero>
 8c2:	b1 e0       	ldi	r27, 0x01	; 1
 8c4:	08 95       	ret
 8c6:	9c c0       	rjmp	.+312    	; 0xa00 <__fp_zero>
 8c8:	67 2f       	mov	r22, r23
 8ca:	78 2f       	mov	r23, r24
 8cc:	88 27       	eor	r24, r24
 8ce:	b8 5f       	subi	r27, 0xF8	; 248
 8d0:	39 f0       	breq	.+14     	; 0x8e0 <__fixunssfsi+0x46>
 8d2:	b9 3f       	cpi	r27, 0xF9	; 249
 8d4:	cc f3       	brlt	.-14     	; 0x8c8 <__fixunssfsi+0x2e>
 8d6:	86 95       	lsr	r24
 8d8:	77 95       	ror	r23
 8da:	67 95       	ror	r22
 8dc:	b3 95       	inc	r27
 8de:	d9 f7       	brne	.-10     	; 0x8d6 <__fixunssfsi+0x3c>
 8e0:	3e f4       	brtc	.+14     	; 0x8f0 <__fixunssfsi+0x56>
 8e2:	90 95       	com	r25
 8e4:	80 95       	com	r24
 8e6:	70 95       	com	r23
 8e8:	61 95       	neg	r22
 8ea:	7f 4f       	sbci	r23, 0xFF	; 255
 8ec:	8f 4f       	sbci	r24, 0xFF	; 255
 8ee:	9f 4f       	sbci	r25, 0xFF	; 255
 8f0:	08 95       	ret

000008f2 <__floatunsisf>:
 8f2:	e8 94       	clt
 8f4:	09 c0       	rjmp	.+18     	; 0x908 <__floatsisf+0x12>

000008f6 <__floatsisf>:
 8f6:	97 fb       	bst	r25, 7
 8f8:	3e f4       	brtc	.+14     	; 0x908 <__floatsisf+0x12>
 8fa:	90 95       	com	r25
 8fc:	80 95       	com	r24
 8fe:	70 95       	com	r23
 900:	61 95       	neg	r22
 902:	7f 4f       	sbci	r23, 0xFF	; 255
 904:	8f 4f       	sbci	r24, 0xFF	; 255
 906:	9f 4f       	sbci	r25, 0xFF	; 255
 908:	99 23       	and	r25, r25
 90a:	a9 f0       	breq	.+42     	; 0x936 <__floatsisf+0x40>
 90c:	f9 2f       	mov	r31, r25
 90e:	96 e9       	ldi	r25, 0x96	; 150
 910:	bb 27       	eor	r27, r27
 912:	93 95       	inc	r25
 914:	f6 95       	lsr	r31
 916:	87 95       	ror	r24
 918:	77 95       	ror	r23
 91a:	67 95       	ror	r22
 91c:	b7 95       	ror	r27
 91e:	f1 11       	cpse	r31, r1
 920:	f8 cf       	rjmp	.-16     	; 0x912 <__floatsisf+0x1c>
 922:	fa f4       	brpl	.+62     	; 0x962 <__floatsisf+0x6c>
 924:	bb 0f       	add	r27, r27
 926:	11 f4       	brne	.+4      	; 0x92c <__floatsisf+0x36>
 928:	60 ff       	sbrs	r22, 0
 92a:	1b c0       	rjmp	.+54     	; 0x962 <__floatsisf+0x6c>
 92c:	6f 5f       	subi	r22, 0xFF	; 255
 92e:	7f 4f       	sbci	r23, 0xFF	; 255
 930:	8f 4f       	sbci	r24, 0xFF	; 255
 932:	9f 4f       	sbci	r25, 0xFF	; 255
 934:	16 c0       	rjmp	.+44     	; 0x962 <__floatsisf+0x6c>
 936:	88 23       	and	r24, r24
 938:	11 f0       	breq	.+4      	; 0x93e <__floatsisf+0x48>
 93a:	96 e9       	ldi	r25, 0x96	; 150
 93c:	11 c0       	rjmp	.+34     	; 0x960 <__floatsisf+0x6a>
 93e:	77 23       	and	r23, r23
 940:	21 f0       	breq	.+8      	; 0x94a <__floatsisf+0x54>
 942:	9e e8       	ldi	r25, 0x8E	; 142
 944:	87 2f       	mov	r24, r23
 946:	76 2f       	mov	r23, r22
 948:	05 c0       	rjmp	.+10     	; 0x954 <__floatsisf+0x5e>
 94a:	66 23       	and	r22, r22
 94c:	71 f0       	breq	.+28     	; 0x96a <__floatsisf+0x74>
 94e:	96 e8       	ldi	r25, 0x86	; 134
 950:	86 2f       	mov	r24, r22
 952:	70 e0       	ldi	r23, 0x00	; 0
 954:	60 e0       	ldi	r22, 0x00	; 0
 956:	2a f0       	brmi	.+10     	; 0x962 <__floatsisf+0x6c>
 958:	9a 95       	dec	r25
 95a:	66 0f       	add	r22, r22
 95c:	77 1f       	adc	r23, r23
 95e:	88 1f       	adc	r24, r24
 960:	da f7       	brpl	.-10     	; 0x958 <__floatsisf+0x62>
 962:	88 0f       	add	r24, r24
 964:	96 95       	lsr	r25
 966:	87 95       	ror	r24
 968:	97 f9       	bld	r25, 7
 96a:	08 95       	ret

0000096c <__fp_inf>:
 96c:	97 f9       	bld	r25, 7
 96e:	9f 67       	ori	r25, 0x7F	; 127
 970:	80 e8       	ldi	r24, 0x80	; 128
 972:	70 e0       	ldi	r23, 0x00	; 0
 974:	60 e0       	ldi	r22, 0x00	; 0
 976:	08 95       	ret

00000978 <__fp_nan>:
 978:	9f ef       	ldi	r25, 0xFF	; 255
 97a:	80 ec       	ldi	r24, 0xC0	; 192
 97c:	08 95       	ret

0000097e <__fp_pscA>:
 97e:	00 24       	eor	r0, r0
 980:	0a 94       	dec	r0
 982:	16 16       	cp	r1, r22
 984:	17 06       	cpc	r1, r23
 986:	18 06       	cpc	r1, r24
 988:	09 06       	cpc	r0, r25
 98a:	08 95       	ret

0000098c <__fp_pscB>:
 98c:	00 24       	eor	r0, r0
 98e:	0a 94       	dec	r0
 990:	12 16       	cp	r1, r18
 992:	13 06       	cpc	r1, r19
 994:	14 06       	cpc	r1, r20
 996:	05 06       	cpc	r0, r21
 998:	08 95       	ret

0000099a <__fp_round>:
 99a:	09 2e       	mov	r0, r25
 99c:	03 94       	inc	r0
 99e:	00 0c       	add	r0, r0
 9a0:	11 f4       	brne	.+4      	; 0x9a6 <__fp_round+0xc>
 9a2:	88 23       	and	r24, r24
 9a4:	52 f0       	brmi	.+20     	; 0x9ba <__fp_round+0x20>
 9a6:	bb 0f       	add	r27, r27
 9a8:	40 f4       	brcc	.+16     	; 0x9ba <__fp_round+0x20>
 9aa:	bf 2b       	or	r27, r31
 9ac:	11 f4       	brne	.+4      	; 0x9b2 <__fp_round+0x18>
 9ae:	60 ff       	sbrs	r22, 0
 9b0:	04 c0       	rjmp	.+8      	; 0x9ba <__fp_round+0x20>
 9b2:	6f 5f       	subi	r22, 0xFF	; 255
 9b4:	7f 4f       	sbci	r23, 0xFF	; 255
 9b6:	8f 4f       	sbci	r24, 0xFF	; 255
 9b8:	9f 4f       	sbci	r25, 0xFF	; 255
 9ba:	08 95       	ret

000009bc <__fp_split3>:
 9bc:	57 fd       	sbrc	r21, 7
 9be:	90 58       	subi	r25, 0x80	; 128
 9c0:	44 0f       	add	r20, r20
 9c2:	55 1f       	adc	r21, r21
 9c4:	59 f0       	breq	.+22     	; 0x9dc <__fp_splitA+0x10>
 9c6:	5f 3f       	cpi	r21, 0xFF	; 255
 9c8:	71 f0       	breq	.+28     	; 0x9e6 <__fp_splitA+0x1a>
 9ca:	47 95       	ror	r20

000009cc <__fp_splitA>:
 9cc:	88 0f       	add	r24, r24
 9ce:	97 fb       	bst	r25, 7
 9d0:	99 1f       	adc	r25, r25
 9d2:	61 f0       	breq	.+24     	; 0x9ec <__fp_splitA+0x20>
 9d4:	9f 3f       	cpi	r25, 0xFF	; 255
 9d6:	79 f0       	breq	.+30     	; 0x9f6 <__fp_splitA+0x2a>
 9d8:	87 95       	ror	r24
 9da:	08 95       	ret
 9dc:	12 16       	cp	r1, r18
 9de:	13 06       	cpc	r1, r19
 9e0:	14 06       	cpc	r1, r20
 9e2:	55 1f       	adc	r21, r21
 9e4:	f2 cf       	rjmp	.-28     	; 0x9ca <__fp_split3+0xe>
 9e6:	46 95       	lsr	r20
 9e8:	f1 df       	rcall	.-30     	; 0x9cc <__fp_splitA>
 9ea:	08 c0       	rjmp	.+16     	; 0x9fc <__fp_splitA+0x30>
 9ec:	16 16       	cp	r1, r22
 9ee:	17 06       	cpc	r1, r23
 9f0:	18 06       	cpc	r1, r24
 9f2:	99 1f       	adc	r25, r25
 9f4:	f1 cf       	rjmp	.-30     	; 0x9d8 <__fp_splitA+0xc>
 9f6:	86 95       	lsr	r24
 9f8:	71 05       	cpc	r23, r1
 9fa:	61 05       	cpc	r22, r1
 9fc:	08 94       	sec
 9fe:	08 95       	ret

00000a00 <__fp_zero>:
 a00:	e8 94       	clt

00000a02 <__fp_szero>:
 a02:	bb 27       	eor	r27, r27
 a04:	66 27       	eor	r22, r22
 a06:	77 27       	eor	r23, r23
 a08:	cb 01       	movw	r24, r22
 a0a:	97 f9       	bld	r25, 7
 a0c:	08 95       	ret

00000a0e <__mulsf3>:
 a0e:	0b d0       	rcall	.+22     	; 0xa26 <__mulsf3x>
 a10:	c4 cf       	rjmp	.-120    	; 0x99a <__fp_round>
 a12:	b5 df       	rcall	.-150    	; 0x97e <__fp_pscA>
 a14:	28 f0       	brcs	.+10     	; 0xa20 <__mulsf3+0x12>
 a16:	ba df       	rcall	.-140    	; 0x98c <__fp_pscB>
 a18:	18 f0       	brcs	.+6      	; 0xa20 <__mulsf3+0x12>
 a1a:	95 23       	and	r25, r21
 a1c:	09 f0       	breq	.+2      	; 0xa20 <__mulsf3+0x12>
 a1e:	a6 cf       	rjmp	.-180    	; 0x96c <__fp_inf>
 a20:	ab cf       	rjmp	.-170    	; 0x978 <__fp_nan>
 a22:	11 24       	eor	r1, r1
 a24:	ee cf       	rjmp	.-36     	; 0xa02 <__fp_szero>

00000a26 <__mulsf3x>:
 a26:	ca df       	rcall	.-108    	; 0x9bc <__fp_split3>
 a28:	a0 f3       	brcs	.-24     	; 0xa12 <__mulsf3+0x4>

00000a2a <__mulsf3_pse>:
 a2a:	95 9f       	mul	r25, r21
 a2c:	d1 f3       	breq	.-12     	; 0xa22 <__mulsf3+0x14>
 a2e:	95 0f       	add	r25, r21
 a30:	50 e0       	ldi	r21, 0x00	; 0
 a32:	55 1f       	adc	r21, r21
 a34:	62 9f       	mul	r22, r18
 a36:	f0 01       	movw	r30, r0
 a38:	72 9f       	mul	r23, r18
 a3a:	bb 27       	eor	r27, r27
 a3c:	f0 0d       	add	r31, r0
 a3e:	b1 1d       	adc	r27, r1
 a40:	63 9f       	mul	r22, r19
 a42:	aa 27       	eor	r26, r26
 a44:	f0 0d       	add	r31, r0
 a46:	b1 1d       	adc	r27, r1
 a48:	aa 1f       	adc	r26, r26
 a4a:	64 9f       	mul	r22, r20
 a4c:	66 27       	eor	r22, r22
 a4e:	b0 0d       	add	r27, r0
 a50:	a1 1d       	adc	r26, r1
 a52:	66 1f       	adc	r22, r22
 a54:	82 9f       	mul	r24, r18
 a56:	22 27       	eor	r18, r18
 a58:	b0 0d       	add	r27, r0
 a5a:	a1 1d       	adc	r26, r1
 a5c:	62 1f       	adc	r22, r18
 a5e:	73 9f       	mul	r23, r19
 a60:	b0 0d       	add	r27, r0
 a62:	a1 1d       	adc	r26, r1
 a64:	62 1f       	adc	r22, r18
 a66:	83 9f       	mul	r24, r19
 a68:	a0 0d       	add	r26, r0
 a6a:	61 1d       	adc	r22, r1
 a6c:	22 1f       	adc	r18, r18
 a6e:	74 9f       	mul	r23, r20
 a70:	33 27       	eor	r19, r19
 a72:	a0 0d       	add	r26, r0
 a74:	61 1d       	adc	r22, r1
 a76:	23 1f       	adc	r18, r19
 a78:	84 9f       	mul	r24, r20
 a7a:	60 0d       	add	r22, r0
 a7c:	21 1d       	adc	r18, r1
 a7e:	82 2f       	mov	r24, r18
 a80:	76 2f       	mov	r23, r22
 a82:	6a 2f       	mov	r22, r26
 a84:	11 24       	eor	r1, r1
 a86:	9f 57       	subi	r25, 0x7F	; 127
 a88:	50 40       	sbci	r21, 0x00	; 0
 a8a:	8a f0       	brmi	.+34     	; 0xaae <__mulsf3_pse+0x84>
 a8c:	e1 f0       	breq	.+56     	; 0xac6 <__mulsf3_pse+0x9c>
 a8e:	88 23       	and	r24, r24
 a90:	4a f0       	brmi	.+18     	; 0xaa4 <__mulsf3_pse+0x7a>
 a92:	ee 0f       	add	r30, r30
 a94:	ff 1f       	adc	r31, r31
 a96:	bb 1f       	adc	r27, r27
 a98:	66 1f       	adc	r22, r22
 a9a:	77 1f       	adc	r23, r23
 a9c:	88 1f       	adc	r24, r24
 a9e:	91 50       	subi	r25, 0x01	; 1
 aa0:	50 40       	sbci	r21, 0x00	; 0
 aa2:	a9 f7       	brne	.-22     	; 0xa8e <__mulsf3_pse+0x64>
 aa4:	9e 3f       	cpi	r25, 0xFE	; 254
 aa6:	51 05       	cpc	r21, r1
 aa8:	70 f0       	brcs	.+28     	; 0xac6 <__mulsf3_pse+0x9c>
 aaa:	60 cf       	rjmp	.-320    	; 0x96c <__fp_inf>
 aac:	aa cf       	rjmp	.-172    	; 0xa02 <__fp_szero>
 aae:	5f 3f       	cpi	r21, 0xFF	; 255
 ab0:	ec f3       	brlt	.-6      	; 0xaac <__mulsf3_pse+0x82>
 ab2:	98 3e       	cpi	r25, 0xE8	; 232
 ab4:	dc f3       	brlt	.-10     	; 0xaac <__mulsf3_pse+0x82>
 ab6:	86 95       	lsr	r24
 ab8:	77 95       	ror	r23
 aba:	67 95       	ror	r22
 abc:	b7 95       	ror	r27
 abe:	f7 95       	ror	r31
 ac0:	e7 95       	ror	r30
 ac2:	9f 5f       	subi	r25, 0xFF	; 255
 ac4:	c1 f7       	brne	.-16     	; 0xab6 <__mulsf3_pse+0x8c>
 ac6:	fe 2b       	or	r31, r30
 ac8:	88 0f       	add	r24, r24
 aca:	91 1d       	adc	r25, r1
 acc:	96 95       	lsr	r25
 ace:	87 95       	ror	r24
 ad0:	97 f9       	bld	r25, 7
 ad2:	08 95       	ret

00000ad4 <_exit>:
 ad4:	f8 94       	cli

00000ad6 <__stop_program>:
 ad6:	ff cf       	rjmp	.-2      	; 0xad6 <__stop_program>
