
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000004b0  00000544  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  00800102  00800102  00000546  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000546  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000578  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000105c  00000000  00000000  000006a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009f0  00000000  00000000  00001700  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000810  00000000  00000000  000020f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000298  00000000  00000000  00002900  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006bb  00000000  00000000  00002b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000050f  00000000  00000000  00003253  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00003762  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	52 c1       	rjmp	.+676    	; 0x2e6 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3b c0       	rjmp	.+118    	; 0xc8 <__vector_20>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 eb       	ldi	r30, 0xB0	; 176
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 32       	cpi	r26, 0x20	; 32
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	87 d0       	rcall	.+270    	; 0x1d2 <main>
  c4:	f3 c1       	rjmp	.+998    	; 0x4ac <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_20>:
		case 0x04: //None <- LED Off
			led_select = 0x04;
		break;
	}
	
	OCR2 = led_pwm_value; //Set PWM Value
  c8:	5d 9b       	sbis	0x0b, 5	; 11
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <__vector_20>
  cc:	8c b9       	out	0x0c, r24	; 12
  ce:	08 95       	ret

000000d0 <USART0_NUM>:
  d0:	ef 92       	push	r14
  d2:	ff 92       	push	r15
  d4:	0f 93       	push	r16
  d6:	1f 93       	push	r17
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	ec 01       	movw	r28, r24
  de:	7c 01       	movw	r14, r24
  e0:	f6 94       	lsr	r15
  e2:	e7 94       	ror	r14
  e4:	f6 94       	lsr	r15
  e6:	e7 94       	ror	r14
  e8:	f6 94       	lsr	r15
  ea:	e7 94       	ror	r14
  ec:	97 01       	movw	r18, r14
  ee:	a5 ec       	ldi	r26, 0xC5	; 197
  f0:	b0 e2       	ldi	r27, 0x20	; 32
  f2:	cd d1       	rcall	.+922    	; 0x48e <__umulhisi3>
  f4:	8c 01       	movw	r16, r24
  f6:	12 95       	swap	r17
  f8:	02 95       	swap	r16
  fa:	0f 70       	andi	r16, 0x0F	; 15
  fc:	01 27       	eor	r16, r17
  fe:	1f 70       	andi	r17, 0x0F	; 15
 100:	01 27       	eor	r16, r17
 102:	80 e3       	ldi	r24, 0x30	; 48
 104:	80 0f       	add	r24, r16
 106:	e0 df       	rcall	.-64     	; 0xc8 <__vector_20>
 108:	28 ee       	ldi	r18, 0xE8	; 232
 10a:	33 e0       	ldi	r19, 0x03	; 3
 10c:	02 9f       	mul	r16, r18
 10e:	c0 01       	movw	r24, r0
 110:	03 9f       	mul	r16, r19
 112:	90 0d       	add	r25, r0
 114:	12 9f       	mul	r17, r18
 116:	90 0d       	add	r25, r0
 118:	11 24       	eor	r1, r1
 11a:	9e 01       	movw	r18, r28
 11c:	28 1b       	sub	r18, r24
 11e:	39 0b       	sbc	r19, r25
 120:	36 95       	lsr	r19
 122:	27 95       	ror	r18
 124:	36 95       	lsr	r19
 126:	27 95       	ror	r18
 128:	ab e7       	ldi	r26, 0x7B	; 123
 12a:	b4 e1       	ldi	r27, 0x14	; 20
 12c:	b0 d1       	rcall	.+864    	; 0x48e <__umulhisi3>
 12e:	96 95       	lsr	r25
 130:	87 95       	ror	r24
 132:	80 5d       	subi	r24, 0xD0	; 208
 134:	c9 df       	rcall	.-110    	; 0xc8 <__vector_20>
 136:	9e 01       	movw	r18, r28
 138:	36 95       	lsr	r19
 13a:	27 95       	ror	r18
 13c:	36 95       	lsr	r19
 13e:	27 95       	ror	r18
 140:	ab e7       	ldi	r26, 0x7B	; 123
 142:	b4 e1       	ldi	r27, 0x14	; 20
 144:	a4 d1       	rcall	.+840    	; 0x48e <__umulhisi3>
 146:	9c 01       	movw	r18, r24
 148:	36 95       	lsr	r19
 14a:	27 95       	ror	r18
 14c:	44 e6       	ldi	r20, 0x64	; 100
 14e:	42 9f       	mul	r20, r18
 150:	c0 01       	movw	r24, r0
 152:	43 9f       	mul	r20, r19
 154:	90 0d       	add	r25, r0
 156:	11 24       	eor	r1, r1
 158:	9e 01       	movw	r18, r28
 15a:	28 1b       	sub	r18, r24
 15c:	39 0b       	sbc	r19, r25
 15e:	ad ec       	ldi	r26, 0xCD	; 205
 160:	bc ec       	ldi	r27, 0xCC	; 204
 162:	95 d1       	rcall	.+810    	; 0x48e <__umulhisi3>
 164:	96 95       	lsr	r25
 166:	87 95       	ror	r24
 168:	96 95       	lsr	r25
 16a:	87 95       	ror	r24
 16c:	96 95       	lsr	r25
 16e:	87 95       	ror	r24
 170:	80 5d       	subi	r24, 0xD0	; 208
 172:	aa df       	rcall	.-172    	; 0xc8 <__vector_20>
 174:	9e 01       	movw	r18, r28
 176:	ad ec       	ldi	r26, 0xCD	; 205
 178:	bc ec       	ldi	r27, 0xCC	; 204
 17a:	89 d1       	rcall	.+786    	; 0x48e <__umulhisi3>
 17c:	96 95       	lsr	r25
 17e:	87 95       	ror	r24
 180:	96 95       	lsr	r25
 182:	87 95       	ror	r24
 184:	96 95       	lsr	r25
 186:	87 95       	ror	r24
 188:	9c 01       	movw	r18, r24
 18a:	22 0f       	add	r18, r18
 18c:	33 1f       	adc	r19, r19
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	88 0f       	add	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	82 0f       	add	r24, r18
 19c:	93 1f       	adc	r25, r19
 19e:	9e 01       	movw	r18, r28
 1a0:	28 1b       	sub	r18, r24
 1a2:	39 0b       	sbc	r19, r25
 1a4:	c9 01       	movw	r24, r18
 1a6:	80 5d       	subi	r24, 0xD0	; 208
 1a8:	8f df       	rcall	.-226    	; 0xc8 <__vector_20>
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	1f 91       	pop	r17
 1b0:	0f 91       	pop	r16
 1b2:	ff 90       	pop	r15
 1b4:	ef 90       	pop	r14
 1b6:	08 95       	ret

000001b8 <timer0_init>:
 1b8:	83 b7       	in	r24, 0x33	; 51
 1ba:	87 60       	ori	r24, 0x07	; 7
 1bc:	83 bf       	out	0x33, r24	; 51
 1be:	87 b7       	in	r24, 0x37	; 55
 1c0:	81 60       	ori	r24, 0x01	; 1
 1c2:	87 bf       	out	0x37, r24	; 55
 1c4:	12 be       	out	0x32, r1	; 50
 1c6:	08 95       	ret

000001c8 <adc_init>:
 1c8:	80 e4       	ldi	r24, 0x40	; 64
 1ca:	87 b9       	out	0x07, r24	; 7
 1cc:	87 e8       	ldi	r24, 0x87	; 135
 1ce:	86 b9       	out	0x06, r24	; 6
 1d0:	08 95       	ret

000001d2 <main>:
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	1f 92       	push	r1
 1d8:	cd b7       	in	r28, 0x3d	; 61
 1da:	de b7       	in	r29, 0x3e	; 62
 1dc:	8f ef       	ldi	r24, 0xFF	; 255
 1de:	89 83       	std	Y+1, r24	; 0x01
 1e0:	8a bb       	out	0x1a, r24	; 26
 1e2:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 1e6:	f0 df       	rcall	.-32     	; 0x1c8 <adc_init>
 1e8:	e7 df       	rcall	.-50     	; 0x1b8 <timer0_init>
 1ea:	32 d1       	rcall	.+612    	; 0x450 <Reset_sensor_val>
 1ec:	87 e6       	ldi	r24, 0x67	; 103
 1ee:	89 b9       	out	0x09, r24	; 9
 1f0:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 1f4:	1b b8       	out	0x0b, r1	; 11
 1f6:	88 e1       	ldi	r24, 0x18	; 24
 1f8:	8a b9       	out	0x0a, r24	; 10
 1fa:	87 e8       	ldi	r24, 0x87	; 135
 1fc:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 200:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <shk_detected>
 204:	78 94       	sei
 206:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <cds_sensor_val>
 20a:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <cds_sensor_val+0x1>
 20e:	85 36       	cpi	r24, 0x65	; 101
 210:	91 05       	cpc	r25, r1
 212:	20 f0       	brcs	.+8      	; 0x21c <main+0x4a>
 214:	89 81       	ldd	r24, Y+1	; 0x01
 216:	8e 7f       	andi	r24, 0xFE	; 254
 218:	89 83       	std	Y+1, r24	; 0x01
 21a:	03 c0       	rjmp	.+6      	; 0x222 <main+0x50>
 21c:	89 81       	ldd	r24, Y+1	; 0x01
 21e:	81 60       	ori	r24, 0x01	; 1
 220:	89 83       	std	Y+1, r24	; 0x01
 222:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <temp_sensor_val>
 226:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <temp_sensor_val+0x1>
 22a:	89 3c       	cpi	r24, 0xC9	; 201
 22c:	91 05       	cpc	r25, r1
 22e:	20 f0       	brcs	.+8      	; 0x238 <main+0x66>
 230:	89 81       	ldd	r24, Y+1	; 0x01
 232:	8d 7f       	andi	r24, 0xFD	; 253
 234:	89 83       	std	Y+1, r24	; 0x01
 236:	03 c0       	rjmp	.+6      	; 0x23e <main+0x6c>
 238:	89 81       	ldd	r24, Y+1	; 0x01
 23a:	82 60       	ori	r24, 0x02	; 2
 23c:	89 83       	std	Y+1, r24	; 0x01
 23e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <pressure_sensor_val>
 242:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <pressure_sensor_val+0x1>
 246:	85 38       	cpi	r24, 0x85	; 133
 248:	93 40       	sbci	r25, 0x03	; 3
 24a:	20 f0       	brcs	.+8      	; 0x254 <main+0x82>
 24c:	89 81       	ldd	r24, Y+1	; 0x01
 24e:	8b 7f       	andi	r24, 0xFB	; 251
 250:	89 83       	std	Y+1, r24	; 0x01
 252:	03 c0       	rjmp	.+6      	; 0x25a <main+0x88>
 254:	89 81       	ldd	r24, Y+1	; 0x01
 256:	84 60       	ori	r24, 0x04	; 4
 258:	89 83       	std	Y+1, r24	; 0x01
 25a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <shk_detected>
 25e:	88 23       	and	r24, r24
 260:	31 f0       	breq	.+12     	; 0x26e <main+0x9c>
 262:	89 81       	ldd	r24, Y+1	; 0x01
 264:	87 7f       	andi	r24, 0xF7	; 247
 266:	89 83       	std	Y+1, r24	; 0x01
 268:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <shk_detected>
 26c:	03 c0       	rjmp	.+6      	; 0x274 <main+0xa2>
 26e:	89 81       	ldd	r24, Y+1	; 0x01
 270:	88 60       	ori	r24, 0x08	; 8
 272:	89 83       	std	Y+1, r24	; 0x01
 274:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <fire_sensor_val>
 278:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <fire_sensor_val+0x1>
 27c:	85 36       	cpi	r24, 0x65	; 101
 27e:	91 05       	cpc	r25, r1
 280:	20 f0       	brcs	.+8      	; 0x28a <main+0xb8>
 282:	89 81       	ldd	r24, Y+1	; 0x01
 284:	8f 7e       	andi	r24, 0xEF	; 239
 286:	89 83       	std	Y+1, r24	; 0x01
 288:	03 c0       	rjmp	.+6      	; 0x290 <main+0xbe>
 28a:	89 81       	ldd	r24, Y+1	; 0x01
 28c:	80 61       	ori	r24, 0x10	; 16
 28e:	89 83       	std	Y+1, r24	; 0x01
 290:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <psd_sensor_val>
 294:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <psd_sensor_val+0x1>
 298:	81 3d       	cpi	r24, 0xD1	; 209
 29a:	92 40       	sbci	r25, 0x02	; 2
 29c:	20 f0       	brcs	.+8      	; 0x2a6 <main+0xd4>
 29e:	89 81       	ldd	r24, Y+1	; 0x01
 2a0:	8f 7b       	andi	r24, 0xBF	; 191
 2a2:	89 83       	std	Y+1, r24	; 0x01
 2a4:	03 c0       	rjmp	.+6      	; 0x2ac <main+0xda>
 2a6:	89 81       	ldd	r24, Y+1	; 0x01
 2a8:	80 64       	ori	r24, 0x40	; 64
 2aa:	89 83       	std	Y+1, r24	; 0x01
 2ac:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <shk_sensor_val>
 2b0:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <shk_sensor_val+0x1>
 2b4:	0d df       	rcall	.-486    	; 0xd0 <USART0_NUM>
 2b6:	8a e0       	ldi	r24, 0x0A	; 10
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	06 df       	rcall	.-500    	; 0xc8 <__vector_20>
 2bc:	8d e0       	ldi	r24, 0x0D	; 13
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	03 df       	rcall	.-506    	; 0xc8 <__vector_20>
 2c2:	89 81       	ldd	r24, Y+1	; 0x01
 2c4:	8b bb       	out	0x1b, r24	; 27
 2c6:	85 e0       	ldi	r24, 0x05	; 5
 2c8:	8a 95       	dec	r24
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <main+0xf6>
 2cc:	00 00       	nop
 2ce:	9b cf       	rjmp	.-202    	; 0x206 <main+0x34>

000002d0 <Is_PSD_Interrupt>:
}

void Is_PSD_Interrupt(){
	if(shk_sensor_val <= 900)
 2d0:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <shk_sensor_val>
 2d4:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <shk_sensor_val+0x1>
 2d8:	85 38       	cpi	r24, 0x85	; 133
 2da:	93 40       	sbci	r25, 0x03	; 3
 2dc:	18 f4       	brcc	.+6      	; 0x2e4 <Is_PSD_Interrupt+0x14>
		shk_detected = 0x01;
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <shk_detected>
 2e4:	08 95       	ret

000002e6 <__vector_16>:
void adc_init(void){
	ADMUX=(1<<REFS0); //외부 레퍼런스 접압을 기준 전압으로 선택, 우측정렬, 초기 입력핀은 0번
	ADCSRA=(1<<ADEN)|(0<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //ADC enable, ADC interrupt enable 분주비 128
}

ISR(TIMER0_OVF_vect){ //Use Timer0 for collecting sensor value
 2e6:	1f 92       	push	r1
 2e8:	0f 92       	push	r0
 2ea:	0f b6       	in	r0, 0x3f	; 63
 2ec:	0f 92       	push	r0
 2ee:	11 24       	eor	r1, r1
 2f0:	0b b6       	in	r0, 0x3b	; 59
 2f2:	0f 92       	push	r0
 2f4:	2f 93       	push	r18
 2f6:	3f 93       	push	r19
 2f8:	4f 93       	push	r20
 2fa:	5f 93       	push	r21
 2fc:	6f 93       	push	r22
 2fe:	7f 93       	push	r23
 300:	8f 93       	push	r24
 302:	9f 93       	push	r25
 304:	af 93       	push	r26
 306:	bf 93       	push	r27
 308:	ef 93       	push	r30
 30a:	ff 93       	push	r31
	static char idx = 0x01;
	
	switch(idx){
 30c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 310:	84 30       	cpi	r24, 0x04	; 4
 312:	b1 f0       	breq	.+44     	; 0x340 <__vector_16+0x5a>
 314:	28 f4       	brcc	.+10     	; 0x320 <__vector_16+0x3a>
 316:	81 30       	cpi	r24, 0x01	; 1
 318:	49 f0       	breq	.+18     	; 0x32c <__vector_16+0x46>
 31a:	82 30       	cpi	r24, 0x02	; 2
 31c:	61 f0       	breq	.+24     	; 0x336 <__vector_16+0x50>
 31e:	24 c0       	rjmp	.+72     	; 0x368 <__vector_16+0x82>
 320:	86 30       	cpi	r24, 0x06	; 6
 322:	c9 f0       	breq	.+50     	; 0x356 <__vector_16+0x70>
 324:	90 f0       	brcs	.+36     	; 0x34a <__vector_16+0x64>
 326:	87 30       	cpi	r24, 0x07	; 7
 328:	d9 f0       	breq	.+54     	; 0x360 <__vector_16+0x7a>
 32a:	1e c0       	rjmp	.+60     	; 0x368 <__vector_16+0x82>
		case 0x01:
		Read_CDS();
 32c:	37 d0       	rcall	.+110    	; 0x39c <Read_CDS>
		idx=0x02;
 32e:	82 e0       	ldi	r24, 0x02	; 2
 330:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		break;
		
		case 0x02:
		
		Read_Thermister();
 334:	19 c0       	rjmp	.+50     	; 0x368 <__vector_16+0x82>
 336:	6e d0       	rcall	.+220    	; 0x414 <Read_Thermister>
		//Is_Fire_Interrupt(); //Fire Interrupt를 걸까말까
		idx=0x04;
 338:	84 e0       	ldi	r24, 0x04	; 4
 33a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		break;
		
		case 0x04:
		
		Read_Pressure();
 33e:	14 c0       	rjmp	.+40     	; 0x368 <__vector_16+0x82>
 340:	5a d0       	rcall	.+180    	; 0x3f6 <Read_Pressure>
		idx=0x05;
 342:	85 e0       	ldi	r24, 0x05	; 5
 344:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		break;
		
		case 0x05:
		
		Read_Shock();
 348:	0f c0       	rjmp	.+30     	; 0x368 <__vector_16+0x82>
 34a:	73 d0       	rcall	.+230    	; 0x432 <Read_Shock>
		Is_PSD_Interrupt(); //PSD Interrupt를 걸까말까
 34c:	c1 df       	rcall	.-126    	; 0x2d0 <Is_PSD_Interrupt>
		idx=0x06;
 34e:	86 e0       	ldi	r24, 0x06	; 6
 350:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		
		break;
 354:	09 c0       	rjmp	.+18     	; 0x368 <__vector_16+0x82>
		
		case 0x06:
		
		Read_Fire();
 356:	31 d0       	rcall	.+98     	; 0x3ba <Read_Fire>
		idx = 0x07;
 358:	87 e0       	ldi	r24, 0x07	; 7
 35a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		break;
 35e:	04 c0       	rjmp	.+8      	; 0x368 <__vector_16+0x82>
		
		case 0x07:
		
		Read_PSD();
 360:	3b d0       	rcall	.+118    	; 0x3d8 <Read_PSD>
 362:	81 e0       	ldi	r24, 0x01	; 1
		idx = 0x01;
 364:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 368:	87 b1       	in	r24, 0x07	; 7
		break;
	}
	
	//ADC Mux 선택, ADC 시작 시키고 ISR 종료
	ADMUX = (ADMUX & 0x40) | (idx & 0x0F); //다음 센서 선택
 36a:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 36e:	9f 70       	andi	r25, 0x0F	; 15
 370:	80 74       	andi	r24, 0x40	; 64
 372:	89 2b       	or	r24, r25
 374:	87 b9       	out	0x07, r24	; 7
 376:	ff 91       	pop	r31
	//ADCSRA |= (1 << ADSC); // ADC 변환 시작
}
 378:	ef 91       	pop	r30
 37a:	bf 91       	pop	r27
 37c:	af 91       	pop	r26
 37e:	9f 91       	pop	r25
 380:	8f 91       	pop	r24
 382:	7f 91       	pop	r23
 384:	6f 91       	pop	r22
 386:	5f 91       	pop	r21
 388:	4f 91       	pop	r20
 38a:	3f 91       	pop	r19
 38c:	2f 91       	pop	r18
 38e:	0f 90       	pop	r0
 390:	0b be       	out	0x3b, r0	; 59
 392:	0f 90       	pop	r0
 394:	0f be       	out	0x3f, r0	; 63
 396:	0f 90       	pop	r0
 398:	1f 90       	pop	r1
 39a:	18 95       	reti

0000039c <Read_CDS>:
 39c:	86 b1       	in	r24, 0x06	; 6
unsigned short hpf(unsigned short previous_value, unsigned short new_value, float alpha) {
	return (unsigned short)(alpha * (previous_value + new_value) - previous_value);
}

inline void Read_CDS(){
	ADCSRA |= (1 << ADSC); // ADC 변환 시작
 39e:	80 64       	ori	r24, 0x40	; 64
 3a0:	86 b9       	out	0x06, r24	; 6
	while(!(ADCSRA & (1 << ADIF))); // ADC 변환 완료 플래그가 설정될 때까지 기다림
 3a2:	34 9b       	sbis	0x06, 4	; 6
 3a4:	fe cf       	rjmp	.-4      	; 0x3a2 <Read_CDS+0x6>
	ADCSRA |= (1<< ADIF); // ADC 변환 완료 플래그 클리어
 3a6:	86 b1       	in	r24, 0x06	; 6
 3a8:	80 61       	ori	r24, 0x10	; 16
 3aa:	86 b9       	out	0x06, r24	; 6
	/*static unsigned short previous_value = 0;
	cds_sensor_val = lpf(previous_value, ADC, 0.1);
	previous_value = cds_sensor_val;*/
	cds_sensor_val=ADC;
 3ac:	84 b1       	in	r24, 0x04	; 4
 3ae:	95 b1       	in	r25, 0x05	; 5
 3b0:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <cds_sensor_val+0x1>
 3b4:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <cds_sensor_val>
 3b8:	08 95       	ret

000003ba <Read_Fire>:
	//필터링 해야됨
}

inline void Read_Fire(){
	ADCSRA |= (1 << ADSC); // ADC 변환 시작
 3ba:	86 b1       	in	r24, 0x06	; 6
 3bc:	80 64       	ori	r24, 0x40	; 64
 3be:	86 b9       	out	0x06, r24	; 6
	while(!(ADCSRA & (1 << ADIF))); // ADC 변환 완료 플래그가 설정될 때까지 기다림
 3c0:	34 9b       	sbis	0x06, 4	; 6
 3c2:	fe cf       	rjmp	.-4      	; 0x3c0 <Read_Fire+0x6>
	ADCSRA |= (1 << ADIF); // ADC 변환 완료 플래그 클리어
 3c4:	86 b1       	in	r24, 0x06	; 6
 3c6:	80 61       	ori	r24, 0x10	; 16
 3c8:	86 b9       	out	0x06, r24	; 6
	//static unsigned short previous_value = 0;
	fire_sensor_val = ADC;//lpf(previous_value, ADC, 0.1);
 3ca:	84 b1       	in	r24, 0x04	; 4
 3cc:	95 b1       	in	r25, 0x05	; 5
 3ce:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <fire_sensor_val+0x1>
 3d2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <fire_sensor_val>
 3d6:	08 95       	ret

000003d8 <Read_PSD>:
	//previous_value = fire_sensor_val;
	//필터링 해야됨
}
inline void Read_PSD(){
	ADCSRA |= (1 << ADSC); // ADC 변환 시작
 3d8:	86 b1       	in	r24, 0x06	; 6
 3da:	80 64       	ori	r24, 0x40	; 64
 3dc:	86 b9       	out	0x06, r24	; 6
	while(!(ADCSRA & (1 << ADIF))); // ADC 변환 완료 플래그가 설정될 때까지 기다림
 3de:	34 9b       	sbis	0x06, 4	; 6
 3e0:	fe cf       	rjmp	.-4      	; 0x3de <Read_PSD+0x6>
	ADCSRA |= (1 << ADIF); // ADC 변환 완료 플래그 클리어
 3e2:	86 b1       	in	r24, 0x06	; 6
 3e4:	80 61       	ori	r24, 0x10	; 16
 3e6:	86 b9       	out	0x06, r24	; 6
	//static unsigned short previous_value = 0;
	psd_sensor_val = ADC;//lpf(previous_value, ADC, 0.1);
 3e8:	84 b1       	in	r24, 0x04	; 4
 3ea:	95 b1       	in	r25, 0x05	; 5
 3ec:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <psd_sensor_val+0x1>
 3f0:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <psd_sensor_val>
 3f4:	08 95       	ret

000003f6 <Read_Pressure>:
	//previous_value = psd_sensor_val;
	//필터링 해야됨
}

inline void Read_Pressure(){
	ADCSRA |= (1 << ADSC); // ADC 변환 시작
 3f6:	86 b1       	in	r24, 0x06	; 6
 3f8:	80 64       	ori	r24, 0x40	; 64
 3fa:	86 b9       	out	0x06, r24	; 6
	while(!(ADCSRA & (1 << ADIF))); // ADC 변환 완료 플래그가 설정될 때까지 기다림
 3fc:	34 9b       	sbis	0x06, 4	; 6
 3fe:	fe cf       	rjmp	.-4      	; 0x3fc <Read_Pressure+0x6>
	ADCSRA |= (1 << ADIF); // ADC 변환 완료 플래그 클리어
 400:	86 b1       	in	r24, 0x06	; 6
 402:	80 61       	ori	r24, 0x10	; 16
 404:	86 b9       	out	0x06, r24	; 6
	//static uint16_t previous_value = 0;
	pressure_sensor_val = ADC;//lpf(previous_value, ADC, 1);
 406:	84 b1       	in	r24, 0x04	; 4
 408:	95 b1       	in	r25, 0x05	; 5
 40a:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <pressure_sensor_val+0x1>
 40e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <pressure_sensor_val>
 412:	08 95       	ret

00000414 <Read_Thermister>:
	//previous_value = pressure_sensor_val;
	//필터링 해야됨
}

inline void Read_Thermister(){
	ADCSRA |= (1 << ADSC); // ADC 변환 시작
 414:	86 b1       	in	r24, 0x06	; 6
 416:	80 64       	ori	r24, 0x40	; 64
 418:	86 b9       	out	0x06, r24	; 6
	while(!(ADCSRA & (1 << ADIF))); // ADC 변환 완료 플래그가 설정될 때까지 기다림
 41a:	34 9b       	sbis	0x06, 4	; 6
 41c:	fe cf       	rjmp	.-4      	; 0x41a <Read_Thermister+0x6>
	ADCSRA |= (1 << ADIF); // ADC 변환 완료 플래그 클리어
 41e:	86 b1       	in	r24, 0x06	; 6
 420:	80 61       	ori	r24, 0x10	; 16
 422:	86 b9       	out	0x06, r24	; 6
	//static unsigned short previous_value = 0;
	temp_sensor_val = ADC;//lpf(previous_value, ADC, 1);
 424:	84 b1       	in	r24, 0x04	; 4
 426:	95 b1       	in	r25, 0x05	; 5
 428:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <temp_sensor_val+0x1>
 42c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <temp_sensor_val>
 430:	08 95       	ret

00000432 <Read_Shock>:
	//previous_value = temp_sensor_val;
	//필터링 해야됨
}

inline void Read_Shock(){
	ADCSRA |= (1 << ADSC); // ADC 변환 시작
 432:	86 b1       	in	r24, 0x06	; 6
 434:	80 64       	ori	r24, 0x40	; 64
 436:	86 b9       	out	0x06, r24	; 6
	while(!(ADCSRA & (1 << ADIF))); // ADC 변환 완료 플래그가 설정될 때까지 기다림
 438:	34 9b       	sbis	0x06, 4	; 6
 43a:	fe cf       	rjmp	.-4      	; 0x438 <Read_Shock+0x6>
	ADCSRA |= (1 << ADIF); // ADC 변환 완료 플래그 클리어
 43c:	86 b1       	in	r24, 0x06	; 6
 43e:	80 61       	ori	r24, 0x10	; 16
 440:	86 b9       	out	0x06, r24	; 6
	//static unsigned short previous_value = 0;
	shk_sensor_val = ADC;//hpf(previous_value, ADC, 1);
 442:	84 b1       	in	r24, 0x04	; 4
 444:	95 b1       	in	r25, 0x05	; 5
 446:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <shk_sensor_val+0x1>
 44a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <shk_sensor_val>
 44e:	08 95       	ret

00000450 <Reset_sensor_val>:
	//previous_value = shk_sensor_val;
	//필터링 해야됨
}

inline void Reset_sensor_val(){
	pressure_sensor_val = 0;
 450:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <pressure_sensor_val+0x1>
 454:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <pressure_sensor_val>
	cds_sensor_val	= 0;
 458:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <cds_sensor_val+0x1>
 45c:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <cds_sensor_val>
	temp_sensor_val = 0;	temp_en = 0;
 460:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <temp_sensor_val+0x1>
 464:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <temp_sensor_val>
 468:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <temp_en+0x1>
 46c:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <temp_en>
	shk_sensor_val	= 0;	shk_detected = 0;
 470:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <shk_sensor_val+0x1>
 474:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <shk_sensor_val>
 478:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <shk_detected>
	psd_sensor_val	= 0;
 47c:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <psd_sensor_val+0x1>
 480:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <psd_sensor_val>
	fire_sensor_val	= 0;
 484:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <fire_sensor_val+0x1>
 488:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <fire_sensor_val>
 48c:	08 95       	ret

0000048e <__umulhisi3>:
 48e:	a2 9f       	mul	r26, r18
 490:	b0 01       	movw	r22, r0
 492:	b3 9f       	mul	r27, r19
 494:	c0 01       	movw	r24, r0
 496:	a3 9f       	mul	r26, r19
 498:	70 0d       	add	r23, r0
 49a:	81 1d       	adc	r24, r1
 49c:	11 24       	eor	r1, r1
 49e:	91 1d       	adc	r25, r1
 4a0:	b2 9f       	mul	r27, r18
 4a2:	70 0d       	add	r23, r0
 4a4:	81 1d       	adc	r24, r1
 4a6:	11 24       	eor	r1, r1
 4a8:	91 1d       	adc	r25, r1
 4aa:	08 95       	ret

000004ac <_exit>:
 4ac:	f8 94       	cli

000004ae <__stop_program>:
 4ae:	ff cf       	rjmp	.-2      	; 0x4ae <__stop_program>
