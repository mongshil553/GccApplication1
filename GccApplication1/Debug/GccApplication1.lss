
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000586  0000061a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000586  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  00800102  00800102  0000061c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000064c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d49  00000000  00000000  00000708  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f6  00000000  00000000  00001451  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000643  00000000  00000000  00001d47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  0000238c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ba  00000000  00000000  000024a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000262  00000000  00000000  00002a5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002cbc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	43 c0       	rjmp	.+134    	; 0xc8 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	4a c0       	rjmp	.+148    	; 0x10e <__vector_30>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e8       	ldi	r30, 0x86	; 134
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	af 31       	cpi	r26, 0x1F	; 31
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	71 d1       	rcall	.+738    	; 0x3a6 <main>
  c4:	5e c2       	rjmp	.+1212   	; 0x582 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_16>:
	UDR1 = msg; //send msg
	
	return true;
}

void Calculate_Servo_Rotate_Angle(){
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d8:	81 30       	cpi	r24, 0x01	; 1
  da:	99 f0       	breq	.+38     	; 0x102 <__vector_16+0x3a>
  dc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <temp_en>
  e0:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <shk_sensor_val>
  e4:	82 33       	cpi	r24, 0x32	; 50
  e6:	18 f0       	brcs	.+6      	; 0xee <__vector_16+0x26>
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <shk_detected>
  ee:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <psd_sensor_val>
  f2:	82 33       	cpi	r24, 0x32	; 50
  f4:	20 f0       	brcs	.+8      	; 0xfe <__vector_16+0x36>
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <PSD_Detected>
  fc:	02 c0       	rjmp	.+4      	; 0x102 <__vector_16+0x3a>
  fe:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <PSD_Detected>
 102:	8f 91       	pop	r24
 104:	0f 90       	pop	r0
 106:	0f be       	out	0x3f, r0	; 63
 108:	0f 90       	pop	r0
 10a:	1f 90       	pop	r1
 10c:	18 95       	reti

0000010e <__vector_30>:
 10e:	1f 92       	push	r1
 110:	0f 92       	push	r0
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
 118:	2f 93       	push	r18
 11a:	3f 93       	push	r19
 11c:	8f 93       	push	r24
 11e:	9f 93       	push	r25
 120:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 124:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <rdata>
 128:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <rdata>
 12c:	8a 32       	cpi	r24, 0x2A	; 42
 12e:	09 f4       	brne	.+2      	; 0x132 <__vector_30+0x24>
 130:	87 c0       	rjmp	.+270    	; 0x240 <__vector_30+0x132>
 132:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <key.1822>
 136:	81 30       	cpi	r24, 0x01	; 1
 138:	69 f1       	breq	.+90     	; 0x194 <__vector_30+0x86>
 13a:	20 f0       	brcs	.+8      	; 0x144 <__vector_30+0x36>
 13c:	82 30       	cpi	r24, 0x02	; 2
 13e:	09 f4       	brne	.+2      	; 0x142 <__vector_30+0x34>
 140:	55 c0       	rjmp	.+170    	; 0x1ec <__vector_30+0xde>
 142:	7e c0       	rjmp	.+252    	; 0x240 <__vector_30+0x132>
 144:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <rdata>
 148:	9c 32       	cpi	r25, 0x2C	; 44
 14a:	61 f4       	brne	.+24     	; 0x164 <__vector_30+0x56>
 14c:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <tmp.1823>
 150:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <marble>
 154:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <tmp.1823+0x1>
 158:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <tmp.1823>
 15c:	8f 5f       	subi	r24, 0xFF	; 255
 15e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <key.1822>
 162:	6e c0       	rjmp	.+220    	; 0x240 <__vector_30+0x132>
 164:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <tmp.1823>
 168:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <tmp.1823+0x1>
 16c:	9c 01       	movw	r18, r24
 16e:	22 0f       	add	r18, r18
 170:	33 1f       	adc	r19, r19
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	82 0f       	add	r24, r18
 180:	93 1f       	adc	r25, r19
 182:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <rdata>
 186:	82 0f       	add	r24, r18
 188:	91 1d       	adc	r25, r1
 18a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <tmp.1823+0x1>
 18e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <tmp.1823>
 192:	56 c0       	rjmp	.+172    	; 0x240 <__vector_30+0x132>
 194:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <rdata>
 198:	9c 32       	cpi	r25, 0x2C	; 44
 19a:	81 f4       	brne	.+32     	; 0x1bc <__vector_30+0xae>
 19c:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <tmp.1823>
 1a0:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <tmp.1823+0x1>
 1a4:	30 93 0f 01 	sts	0x010F, r19	; 0x80010f <marble+0x2>
 1a8:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <marble+0x1>
 1ac:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <tmp.1823+0x1>
 1b0:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <tmp.1823>
 1b4:	8f 5f       	subi	r24, 0xFF	; 255
 1b6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <key.1822>
 1ba:	42 c0       	rjmp	.+132    	; 0x240 <__vector_30+0x132>
 1bc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <tmp.1823>
 1c0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <tmp.1823+0x1>
 1c4:	9c 01       	movw	r18, r24
 1c6:	22 0f       	add	r18, r18
 1c8:	33 1f       	adc	r19, r19
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	82 0f       	add	r24, r18
 1d8:	93 1f       	adc	r25, r19
 1da:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <rdata>
 1de:	82 0f       	add	r24, r18
 1e0:	91 1d       	adc	r25, r1
 1e2:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <tmp.1823+0x1>
 1e6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <tmp.1823>
 1ea:	2a c0       	rjmp	.+84     	; 0x240 <__vector_30+0x132>
 1ec:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <rdata>
 1f0:	8e 32       	cpi	r24, 0x2E	; 46
 1f2:	79 f4       	brne	.+30     	; 0x212 <__vector_30+0x104>
 1f4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <tmp.1823>
 1f8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <tmp.1823+0x1>
 1fc:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <marble+0x4>
 200:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <marble+0x3>
 204:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <tmp.1823+0x1>
 208:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <tmp.1823>
 20c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <key.1822>
 210:	17 c0       	rjmp	.+46     	; 0x240 <__vector_30+0x132>
 212:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <tmp.1823>
 216:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <tmp.1823+0x1>
 21a:	9c 01       	movw	r18, r24
 21c:	22 0f       	add	r18, r18
 21e:	33 1f       	adc	r19, r19
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	88 0f       	add	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	82 0f       	add	r24, r18
 22e:	93 1f       	adc	r25, r19
 230:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <rdata>
 234:	82 0f       	add	r24, r18
 236:	91 1d       	adc	r25, r1
 238:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <tmp.1823+0x1>
 23c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <tmp.1823>
 240:	9f 91       	pop	r25
 242:	8f 91       	pop	r24
 244:	3f 91       	pop	r19
 246:	2f 91       	pop	r18
 248:	0f 90       	pop	r0
 24a:	0f be       	out	0x3f, r0	; 63
 24c:	0f 90       	pop	r0
 24e:	1f 90       	pop	r1
 250:	18 95       	reti

00000252 <init_serial>:
 252:	1b b8       	out	0x0b, r1	; 11
 254:	88 e1       	ldi	r24, 0x18	; 24
 256:	8a b9       	out	0x0a, r24	; 10
 258:	86 e0       	ldi	r24, 0x06	; 6
 25a:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 25e:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 262:	8a e0       	ldi	r24, 0x0A	; 10
 264:	89 b9       	out	0x09, r24	; 9
 266:	08 95       	ret

00000268 <Servo_Move>:
}

void Servo_Move(){
	static unsigned short tmp = 0;
	
	if(++tmp == Servo_increment_threshold) Servo_pos += Servo_step;
 268:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 26c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 270:	01 96       	adiw	r24, 0x01	; 1
 272:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 276:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 27a:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <Servo_increment_threshold>
 27e:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <Servo_increment_threshold+0x1>
 282:	82 17       	cp	r24, r18
 284:	93 07       	cpc	r25, r19
 286:	71 f4       	brne	.+28     	; 0x2a4 <Servo_Move+0x3c>
 288:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <Servo_pos>
 28c:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <Servo_pos+0x1>
 290:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <Servo_step>
 294:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <Servo_step+0x1>
 298:	82 0f       	add	r24, r18
 29a:	93 1f       	adc	r25, r19
 29c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <Servo_pos+0x1>
 2a0:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <Servo_pos>
 2a4:	08 95       	ret

000002a6 <Servo_Home>:
	//Set Servo PWM Value
	//OCR2 = ...
	
}
void Servo_Home(){
	Servo_Rotate_Angle = 0;
 2a6:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <Servo_Rotate_Angle+0x1>
 2aa:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <Servo_Rotate_Angle>
	
	if(Servo_pos >= Servo_Rotate_Angle) Servo_step = -1;
 2ae:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <Servo_pos>
 2b2:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <Servo_pos+0x1>
 2b6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <Servo_Rotate_Angle>
 2ba:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <Servo_Rotate_Angle+0x1>
 2be:	28 17       	cp	r18, r24
 2c0:	39 07       	cpc	r19, r25
 2c2:	38 f0       	brcs	.+14     	; 0x2d2 <Servo_Home+0x2c>
 2c4:	8f ef       	ldi	r24, 0xFF	; 255
 2c6:	9f ef       	ldi	r25, 0xFF	; 255
 2c8:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <Servo_step+0x1>
 2cc:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <Servo_step>
 2d0:	06 c0       	rjmp	.+12     	; 0x2de <Servo_Home+0x38>
	else Servo_step = 1;
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <Servo_step+0x1>
 2da:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <Servo_step>
	
	Servo_Move();
 2de:	c4 cf       	rjmp	.-120    	; 0x268 <Servo_Move>
 2e0:	08 95       	ret

000002e2 <Servo_Catch_Marble>:
}
void Servo_Catch_Marble(){
	if(Servo_pos >= Servo_Rotate_Angle) Servo_step = -1;
 2e2:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <Servo_pos>
 2e6:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <Servo_pos+0x1>
 2ea:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <Servo_Rotate_Angle>
 2ee:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <Servo_Rotate_Angle+0x1>
 2f2:	28 17       	cp	r18, r24
 2f4:	39 07       	cpc	r19, r25
 2f6:	38 f0       	brcs	.+14     	; 0x306 <Servo_Catch_Marble+0x24>
 2f8:	8f ef       	ldi	r24, 0xFF	; 255
 2fa:	9f ef       	ldi	r25, 0xFF	; 255
 2fc:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <Servo_step+0x1>
 300:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <Servo_step>
 304:	06 c0       	rjmp	.+12     	; 0x312 <Servo_Catch_Marble+0x30>
	else Servo_step = 1;
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <Servo_step+0x1>
 30e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <Servo_step>
	
	Servo_Move();
 312:	aa cf       	rjmp	.-172    	; 0x268 <Servo_Move>
 314:	08 95       	ret

00000316 <Servo_Drop_Marble>:
}
void Servo_Drop_Marble(){
	Servo_Rotate_Angle = 30;
 316:	8e e1       	ldi	r24, 0x1E	; 30
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <Servo_Rotate_Angle+0x1>
 31e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <Servo_Rotate_Angle>
	
	if(Servo_pos >= Servo_Rotate_Angle) Servo_step = -1;
 322:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <Servo_pos>
 326:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <Servo_pos+0x1>
 32a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <Servo_Rotate_Angle>
 32e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <Servo_Rotate_Angle+0x1>
 332:	28 17       	cp	r18, r24
 334:	39 07       	cpc	r19, r25
 336:	38 f0       	brcs	.+14     	; 0x346 <Servo_Drop_Marble+0x30>
 338:	8f ef       	ldi	r24, 0xFF	; 255
 33a:	9f ef       	ldi	r25, 0xFF	; 255
 33c:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <Servo_step+0x1>
 340:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <Servo_step>
 344:	06 c0       	rjmp	.+12     	; 0x352 <Servo_Drop_Marble+0x3c>
	else Servo_step = 1;
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <Servo_step+0x1>
 34e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <Servo_step>
	
	Servo_Move();
 352:	8a cf       	rjmp	.-236    	; 0x268 <Servo_Move>
 354:	08 95       	ret

00000356 <LED_Set>:
	//Consider using demux
	//By using demux, we can select 1 of 3 LEDs with 1 output OC2 pin
	//need to wait for demux to set
	//output 4 pins, R,G,B,None
	
	switch(marble.color){
 356:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <marble>
 35a:	82 30       	cpi	r24, 0x02	; 2
 35c:	99 f0       	breq	.+38     	; 0x384 <LED_Set+0x2e>
 35e:	28 f4       	brcc	.+10     	; 0x36a <LED_Set+0x14>
 360:	88 23       	and	r24, r24
 362:	41 f0       	breq	.+16     	; 0x374 <LED_Set+0x1e>
 364:	81 30       	cpi	r24, 0x01	; 1
 366:	51 f0       	breq	.+20     	; 0x37c <LED_Set+0x26>
 368:	18 c0       	rjmp	.+48     	; 0x39a <LED_Set+0x44>
 36a:	83 30       	cpi	r24, 0x03	; 3
 36c:	79 f0       	breq	.+30     	; 0x38c <LED_Set+0x36>
 36e:	84 30       	cpi	r24, 0x04	; 4
 370:	89 f0       	breq	.+34     	; 0x394 <LED_Set+0x3e>
 372:	13 c0       	rjmp	.+38     	; 0x39a <LED_Set+0x44>
		case 0x00: //LED Off
			led_select = 0x04;
 374:	84 e0       	ldi	r24, 0x04	; 4
 376:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <led_select>
		break;
 37a:	0f c0       	rjmp	.+30     	; 0x39a <LED_Set+0x44>
		
		case 0x01: //Red
			led_select = 0x01;
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <led_select>
		break;
 382:	0b c0       	rjmp	.+22     	; 0x39a <LED_Set+0x44>
		
		case 0x02: //Green
			led_select = 0x02;
 384:	82 e0       	ldi	r24, 0x02	; 2
 386:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <led_select>
		break;
 38a:	07 c0       	rjmp	.+14     	; 0x39a <LED_Set+0x44>
		
		case 0x03: //Blue
			led_select = 0x03;
 38c:	83 e0       	ldi	r24, 0x03	; 3
 38e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <led_select>
		break;
 392:	03 c0       	rjmp	.+6      	; 0x39a <LED_Set+0x44>
		
		case 0x04: //None <- LED Off
			led_select = 0x04;
 394:	84 e0       	ldi	r24, 0x04	; 4
 396:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <led_select>
		break;
	}
	
	OCR2 = led_pwm_value; //Set PWM Value
 39a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <led_pwm_value>
 39e:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <led_pwm_value+0x1>
 3a2:	83 bd       	out	0x23, r24	; 35
 3a4:	08 95       	ret

000003a6 <main>:
int main(void)
{
	pin_init(); //Pin Setup
	init();		//Interrupt, Timer, Register
	
	init_serial();
 3a6:	55 df       	rcall	.-342    	; 0x252 <init_serial>
	
	marble.color = 0x00;
 3a8:	ed e0       	ldi	r30, 0x0D	; 13
 3aa:	f1 e0       	ldi	r31, 0x01	; 1
 3ac:	10 82       	st	Z, r1
	marble.posX = -1;
 3ae:	8f ef       	ldi	r24, 0xFF	; 255
 3b0:	9f ef       	ldi	r25, 0xFF	; 255
 3b2:	92 83       	std	Z+2, r25	; 0x02
 3b4:	81 83       	std	Z+1, r24	; 0x01
	marble.posY = -1;
 3b6:	94 83       	std	Z+4, r25	; 0x04
	
	LED_Set();
 3b8:	83 83       	std	Z+3, r24	; 0x03
	
	Servo_Home(); //Move Servo to Home Position
 3ba:	cd df       	rcall	.-102    	; 0x356 <LED_Set>
 3bc:	74 df       	rcall	.-280    	; 0x2a6 <Servo_Home>
	//This is for just in case bluetooth fails at presentation
	
	volatile short i;
	
    while (1) {
		switch(state){
 3be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3c2:	84 30       	cpi	r24, 0x04	; 4
 3c4:	b9 f1       	breq	.+110    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 3c6:	28 f4       	brcc	.+10     	; 0x3d2 <main+0x2c>
 3c8:	81 30       	cpi	r24, 0x01	; 1
 3ca:	51 f0       	breq	.+20     	; 0x3e0 <main+0x3a>
 3cc:	82 30       	cpi	r24, 0x02	; 2
 3ce:	89 f0       	breq	.+34     	; 0x3f2 <main+0x4c>
 3d0:	f6 cf       	rjmp	.-20     	; 0x3be <main+0x18>
 3d2:	88 30       	cpi	r24, 0x08	; 8
 3d4:	09 f4       	brne	.+2      	; 0x3d8 <main+0x32>
 3d6:	58 c0       	rjmp	.+176    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 3d8:	80 31       	cpi	r24, 0x10	; 16
 3da:	09 f4       	brne	.+2      	; 0x3de <main+0x38>
 3dc:	cd c0       	rjmp	.+410    	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
 3de:	ef cf       	rjmp	.-34     	; 0x3be <main+0x18>
			case 0b00000001:					//not started
				if(pressure_sensor_val >= 50)	//pressure threshold is 50(just guessing)
 3e0:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <pressure_sensor_val>
 3e4:	82 33       	cpi	r24, 0x32	; 50
 3e6:	28 f0       	brcs	.+10     	; 0x3f2 <main+0x4c>
					state <<= 1;				//Change state
 3e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3ec:	88 0f       	add	r24, r24
 3ee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				
			case 0b00000010:	//wait for Marble data to arrive from the server
				if(marble.color != 0x00 && marble.posX >= 0 && marble.posY >= 0){
 3f2:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <marble>
 3f6:	88 23       	and	r24, r24
 3f8:	11 f3       	breq	.-60     	; 0x3be <main+0x18>
 3fa:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <marble+0x1>
 3fe:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <marble+0x2>
 402:	99 23       	and	r25, r25
 404:	e4 f2       	brlt	.-72     	; 0x3be <main+0x18>
 406:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <marble+0x3>
 40a:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <marble+0x4>
 40e:	99 23       	and	r25, r25
 410:	b4 f2       	brlt	.-84     	; 0x3be <main+0x18>
					//Marble Data has arrived from the server
					Calculate_Servo_Rotate_Angle();
					state <<= 1;
 412:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 416:	88 0f       	add	r24, r24
 418:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				}
				break;
				
			case 0b00000100:	//Catch & Drop Marble
				while(Servo_pos != Servo_Rotate_Angle){
					Servo_Catch_Marble(); //Rotate Servo to Marble to catch marble
 41c:	d0 cf       	rjmp	.-96     	; 0x3be <main+0x18>
 41e:	61 df       	rcall	.-318    	; 0x2e2 <Servo_Catch_Marble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 420:	89 ef       	ldi	r24, 0xF9	; 249
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	01 97       	sbiw	r24, 0x01	; 1
 426:	f1 f7       	brne	.-4      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 428:	00 c0       	rjmp	.+0      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 42a:	00 00       	nop
					_delay_ms(1);
					while(PSD_Detected);
 42c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <PSD_Detected>
 430:	81 11       	cpse	r24, r1
 432:	fc cf       	rjmp	.-8      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
					state <<= 1;
				}
				break;
				
			case 0b00000100:	//Catch & Drop Marble
				while(Servo_pos != Servo_Rotate_Angle){
 434:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <Servo_pos>
 438:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <Servo_pos+0x1>
 43c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <Servo_Rotate_Angle>
 440:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <Servo_Rotate_Angle+0x1>
 444:	28 17       	cp	r18, r24
 446:	39 07       	cpc	r19, r25
 448:	51 f7       	brne	.-44     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
				//Turn on ElectroMagnet
				//Alter Port for this action
				
				//Rotate Servo to Marble Box
				while(Servo_pos != Servo_Rotate_Angle){
					Servo_Drop_Marble(); //Rotate Servo to Marble Collecting Box
 44a:	0b c0       	rjmp	.+22     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 44c:	64 df       	rcall	.-312    	; 0x316 <Servo_Drop_Marble>
 44e:	89 ef       	ldi	r24, 0xF9	; 249
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	01 97       	sbiw	r24, 0x01	; 1
 454:	f1 f7       	brne	.-4      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 456:	00 c0       	rjmp	.+0      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 458:	00 00       	nop
					_delay_ms(1);
					while(PSD_Detected);
 45a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <PSD_Detected>
 45e:	81 11       	cpse	r24, r1
 460:	fc cf       	rjmp	.-8      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
				//Servo Reached Destination				
				//Turn on ElectroMagnet
				//Alter Port for this action
				
				//Rotate Servo to Marble Box
				while(Servo_pos != Servo_Rotate_Angle){
 462:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <Servo_pos>
 466:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <Servo_pos+0x1>
 46a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <Servo_Rotate_Angle>
 46e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <Servo_Rotate_Angle+0x1>
 472:	28 17       	cp	r18, r24
 474:	39 07       	cpc	r19, r25
 476:	51 f7       	brne	.-44     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>

				//Servo Reached Destination
				//Turn of ElectroMagnet to drop marble
				//Alter Port for this action
				
				shk_detected = 0x00;
 478:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <shk_detected>
				//wait for some time for Shock Sensor to detect
				
				state <<= 1;
 47c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 480:	88 0f       	add	r24, r24
 482:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				
				//Set LED
				//Set OCR with Timer for PWM Control
				break;
 486:	9b cf       	rjmp	.-202    	; 0x3be <main+0x18>
				
			case 0b00001000: //Marble success or retry
				if(shk_detected == 0x01){ //Marble was succefully dropped
 488:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <shk_detected>
 48c:	81 30       	cpi	r24, 0x01	; 1
					shk_detected = 0x00;
 48e:	51 f5       	brne	.+84     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 490:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <shk_detected>
					
					//Move servo to home
					while(Servo_pos != Servo_Rotate_Angle){
						Servo_Home(); //Rotate Servo to Home
 494:	0b c0       	rjmp	.+22     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 496:	07 df       	rcall	.-498    	; 0x2a6 <Servo_Home>
 498:	89 ef       	ldi	r24, 0xF9	; 249
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	01 97       	sbiw	r24, 0x01	; 1
 49e:	f1 f7       	brne	.-4      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 4a2:	00 00       	nop
						_delay_ms(1);
						while(PSD_Detected);
 4a4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <PSD_Detected>
 4a8:	81 11       	cpse	r24, r1
 4aa:	fc cf       	rjmp	.-8      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
			case 0b00001000: //Marble success or retry
				if(shk_detected == 0x01){ //Marble was succefully dropped
					shk_detected = 0x00;
					
					//Move servo to home
					while(Servo_pos != Servo_Rotate_Angle){
 4ac:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <Servo_pos>
 4b0:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <Servo_pos+0x1>
 4b4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <Servo_Rotate_Angle>
 4b8:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <Servo_Rotate_Angle+0x1>
 4bc:	28 17       	cp	r18, r24
 4be:	39 07       	cpc	r19, r25
 4c0:	51 f7       	brne	.-44     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
						Servo_Home(); //Rotate Servo to Home
						_delay_ms(1);
						while(PSD_Detected);
					}
					
					state <<= 1;
 4c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4c6:	88 0f       	add	r24, r24
 4c8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				}
				else{ //Marble failed
					//Move servo to home
					while(Servo_pos != Servo_Rotate_Angle){
						Servo_Home(); //Rotate Servo to Home
 4cc:	78 cf       	rjmp	.-272    	; 0x3be <main+0x18>
 4ce:	eb de       	rcall	.-554    	; 0x2a6 <Servo_Home>
 4d0:	89 ef       	ldi	r24, 0xF9	; 249
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	01 97       	sbiw	r24, 0x01	; 1
 4d6:	f1 f7       	brne	.-4      	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 4d8:	00 c0       	rjmp	.+0      	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 4da:	00 00       	nop
						_delay_ms(1);
						while(PSD_Detected);
 4dc:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <PSD_Detected>
 4e0:	81 11       	cpse	r24, r1
 4e2:	fc cf       	rjmp	.-8      	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
					
					state <<= 1;
				}
				else{ //Marble failed
					//Move servo to home
					while(Servo_pos != Servo_Rotate_Angle){
 4e4:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <Servo_pos>
 4e8:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <Servo_pos+0x1>
 4ec:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <Servo_Rotate_Angle>
 4f0:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <Servo_Rotate_Angle+0x1>
 4f4:	28 17       	cp	r18, r24
 4f6:	39 07       	cpc	r19, r25
 4f8:	51 f7       	brne	.-44     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
						while(PSD_Detected);
					}
					
					//Turn on Electro Magnet
					
					temp_en = 0x00; //temperature sensor does not control servo speed
 4fa:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <temp_en>
					Servo_increment_threshold = 100;
 4fe:	84 e6       	ldi	r24, 0x64	; 100
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <Servo_increment_threshold+0x1>
 506:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <Servo_increment_threshold>
					
					//Move servo to Marble Collecting Box
					while(Servo_pos != Servo_Rotate_Angle){
						Servo_Drop_Marble();
 50a:	0b c0       	rjmp	.+22     	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
 50c:	04 df       	rcall	.-504    	; 0x316 <Servo_Drop_Marble>
 50e:	89 ef       	ldi	r24, 0xF9	; 249
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	01 97       	sbiw	r24, 0x01	; 1
 514:	f1 f7       	brne	.-4      	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
 516:	00 c0       	rjmp	.+0      	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
 518:	00 00       	nop
						_delay_ms(1);
						while(PSD_Detected);
 51a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <PSD_Detected>
 51e:	81 11       	cpse	r24, r1
 520:	fc cf       	rjmp	.-8      	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
					
					temp_en = 0x00; //temperature sensor does not control servo speed
					Servo_increment_threshold = 100;
					
					//Move servo to Marble Collecting Box
					while(Servo_pos != Servo_Rotate_Angle){
 522:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <Servo_pos>
 526:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <Servo_pos+0x1>
 52a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <Servo_Rotate_Angle>
 52e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <Servo_Rotate_Angle+0x1>
 532:	28 17       	cp	r18, r24
 534:	39 07       	cpc	r19, r25
						while(PSD_Detected);
					}
					
					//Turn off Electro Magnet <- Drop Marble
					
					temp_en = 0x01; //temperature sensor controls servo speed
 536:	51 f7       	brne	.-44     	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <temp_en>
					
					//Move servo home
					while(Servo_pos != Servo_Rotate_Angle){
						Servo_Home();
 53e:	0b c0       	rjmp	.+22     	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
 540:	b2 de       	rcall	.-668    	; 0x2a6 <Servo_Home>
 542:	89 ef       	ldi	r24, 0xF9	; 249
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	01 97       	sbiw	r24, 0x01	; 1
 548:	f1 f7       	brne	.-4      	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
 54a:	00 c0       	rjmp	.+0      	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
 54c:	00 00       	nop
						_delay_ms(1);
						while(PSD_Detected);
 54e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <PSD_Detected>
 552:	81 11       	cpse	r24, r1
 554:	fc cf       	rjmp	.-8      	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
					//Turn off Electro Magnet <- Drop Marble
					
					temp_en = 0x01; //temperature sensor controls servo speed
					
					//Move servo home
					while(Servo_pos != Servo_Rotate_Angle){
 556:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <Servo_pos>
 55a:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <Servo_pos+0x1>
 55e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <Servo_Rotate_Angle>
 562:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <Servo_Rotate_Angle+0x1>
 566:	28 17       	cp	r18, r24
 568:	39 07       	cpc	r19, r25
						Servo_Home();
						_delay_ms(1);
						while(PSD_Detected);
					}
					
					state <<= 1;
 56a:	51 f7       	brne	.-44     	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
 56c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 570:	88 0f       	add	r24, r24
 572:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				}
				break;
				
			case 0b00010000:
				LED_Set();
 576:	23 cf       	rjmp	.-442    	; 0x3be <main+0x18>
 578:	ee de       	rcall	.-548    	; 0x356 <LED_Set>
				state = 0x01; //Done, wait for pressure sensor
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				break;
 580:	1e cf       	rjmp	.-452    	; 0x3be <main+0x18>

00000582 <_exit>:
 582:	f8 94       	cli

00000584 <__stop_program>:
 584:	ff cf       	rjmp	.-2      	; 0x584 <__stop_program>
