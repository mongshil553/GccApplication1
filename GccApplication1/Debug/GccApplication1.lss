
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000073e  000007d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000073e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800102  00800102  000007d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000804  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000840  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001092  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009fe  00000000  00000000  0000199a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006ac  00000000  00000000  00002398  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000204  00000000  00000000  00002a44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006c9  00000000  00000000  00002c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003b4  00000000  00000000  00003311  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000036c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	43 c0       	rjmp	.+134    	; 0xc8 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e3       	ldi	r30, 0x3E	; 62
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 32       	cpi	r26, 0x25	; 37
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	74 d0       	rcall	.+232    	; 0x1ac <main>
  c4:	3a c3       	rjmp	.+1652   	; 0x73a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_16>:
	
	return 0;
	
}

ISR(TIMER0_OVF_vect){ //Use Timer0 for collecting sensor value and PWM
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	0b b6       	in	r0, 0x3b	; 59
  d4:	0f 92       	push	r0
  d6:	2f 93       	push	r18
  d8:	3f 93       	push	r19
  da:	4f 93       	push	r20
  dc:	5f 93       	push	r21
  de:	6f 93       	push	r22
  e0:	7f 93       	push	r23
  e2:	8f 93       	push	r24
  e4:	9f 93       	push	r25
  e6:	af 93       	push	r26
  e8:	bf 93       	push	r27
  ea:	ef 93       	push	r30
  ec:	ff 93       	push	r31
	
	//idx = 0x08; //이 부분 주석처리 안 하면 idx에 해당하는 부분만 실행됨. 이 경우 0x08은 PSD이므로 PSD 센서값만 읽음.
	
	static char idx = 0x01;
	
	switch(idx){
  ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f2:	83 30       	cpi	r24, 0x03	; 3
  f4:	d1 f0       	breq	.+52     	; 0x12a <__vector_16+0x62>
  f6:	28 f4       	brcc	.+10     	; 0x102 <__vector_16+0x3a>
  f8:	81 30       	cpi	r24, 0x01	; 1
  fa:	49 f0       	breq	.+18     	; 0x10e <__vector_16+0x46>
  fc:	82 30       	cpi	r24, 0x02	; 2
  fe:	71 f0       	breq	.+28     	; 0x11c <__vector_16+0x54>
 100:	2d c0       	rjmp	.+90     	; 0x15c <__vector_16+0x94>
 102:	85 30       	cpi	r24, 0x05	; 5
 104:	01 f1       	breq	.+64     	; 0x146 <__vector_16+0x7e>
 106:	c0 f0       	brcs	.+48     	; 0x138 <__vector_16+0x70>
 108:	86 30       	cpi	r24, 0x06	; 6
 10a:	21 f1       	breq	.+72     	; 0x154 <__vector_16+0x8c>
 10c:	27 c0       	rjmp	.+78     	; 0x15c <__vector_16+0x94>
	case 0x01:
		Read_CDS();
 10e:	04 d1       	rcall	.+520    	; 0x318 <Read_CDS>
		//current_channel = 0x01;
		//다음 ADC Mux 선택 Fire
		idx++;
 110:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 114:	8f 5f       	subi	r24, 0xFF	; 255
 116:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
		
	case 0x02:
		Read_Fire();
 11a:	20 c0       	rjmp	.+64     	; 0x15c <__vector_16+0x94>
 11c:	12 d1       	rcall	.+548    	; 0x342 <Read_Fire>
		//current_channel = 0x06;
		//Is_Fire_Interrupt(); //Fire Interrupt를 걸까말까
		//다음 ADC Mux 선택 Pressure
		
		idx++;
 11e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 122:	8f 5f       	subi	r24, 0xFF	; 255
 124:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
		
	case 0x03:
		Read_Pressure();
 128:	19 c0       	rjmp	.+50     	; 0x15c <__vector_16+0x94>
 12a:	35 d1       	rcall	.+618    	; 0x396 <Read_Pressure>
		//current_channel = 0x04;
		//다음 ADC Mux 선택 PSD
		
		idx++;
 12c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 130:	8f 5f       	subi	r24, 0xFF	; 255
 132:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
		
	case 0x04:
		Read_PSD();
 136:	12 c0       	rjmp	.+36     	; 0x15c <__vector_16+0x94>
 138:	19 d1       	rcall	.+562    	; 0x36c <Read_PSD>
		//current_channel = 0x07;
		//Is_PSD_Interrupt(); //PSD Interrupt를 걸까말까
		//다음 ADC Mux 선택 진동
		
		idx++;
 13a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 13e:	8f 5f       	subi	r24, 0xFF	; 255
 140:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
		
	case 0x05:
		Read_Shock();
 144:	0b c0       	rjmp	.+22     	; 0x15c <__vector_16+0x94>
 146:	51 d1       	rcall	.+674    	; 0x3ea <Read_Shock>
		//current_channel = 0x05;
		//다음 ADC Mux 선택 써미스터
		
		idx++;
 148:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 14c:	8f 5f       	subi	r24, 0xFF	; 255
 14e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
		
	case 0x06:
		Read_Thermister();
 152:	04 c0       	rjmp	.+8      	; 0x15c <__vector_16+0x94>
 154:	35 d1       	rcall	.+618    	; 0x3c0 <Read_Thermister>
		//current_channel = 0x03;
		//다음 ADC Mux 선택 CDS
		
		idx = 0x01;
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
	}

	//ADC Mux 선택, ADC 시작 시키고 ISR 종료
	ADMUX = (ADMUX & 0xF0) | (idx & 0x0F); //다음 센서 선택
 15c:	87 b1       	in	r24, 0x07	; 7
 15e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 162:	9f 70       	andi	r25, 0x0F	; 15
 164:	80 7f       	andi	r24, 0xF0	; 240
 166:	89 2b       	or	r24, r25
 168:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC); // ADC 변환 시작
 16a:	86 b1       	in	r24, 0x06	; 6
 16c:	80 64       	ori	r24, 0x40	; 64
 16e:	86 b9       	out	0x06, r24	; 6
}
 170:	ff 91       	pop	r31
 172:	ef 91       	pop	r30
 174:	bf 91       	pop	r27
 176:	af 91       	pop	r26
 178:	9f 91       	pop	r25
 17a:	8f 91       	pop	r24
 17c:	7f 91       	pop	r23
 17e:	6f 91       	pop	r22
 180:	5f 91       	pop	r21
 182:	4f 91       	pop	r20
 184:	3f 91       	pop	r19
 186:	2f 91       	pop	r18
 188:	0f 90       	pop	r0
 18a:	0b be       	out	0x3b, r0	; 59
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <adc_init>:

//ADC 입력
//ADC 초기화
void adc_init(void){
	ADMUX=(1<<REFS0); //외부 레퍼런스 접압을 기준 전압으로 선택, 우측정렬, 초기 입력핀은 0번
 196:	80 e4       	ldi	r24, 0x40	; 64
 198:	87 b9       	out	0x07, r24	; 7
	ADCSRA=(1<<ADEN)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //ADC enable, ADC interrupt enable 분주비 128
 19a:	8f e8       	ldi	r24, 0x8F	; 143
 19c:	86 b9       	out	0x06, r24	; 6
 19e:	08 95       	ret

000001a0 <timer0_init>:
	ADCSRA |=(1<<ADSC); //ADC 변화 시작
}*/


void timer0_init(void) {
	TCCR0 = (1 << CS02) | (1 << CS00); // 분주비 1024
 1a0:	85 e0       	ldi	r24, 0x05	; 5
 1a2:	83 bf       	out	0x33, r24	; 51
	TIMSK = (1 << TOIE0); // 타이머0 오버플로우 인터럽트 허용
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	87 bf       	out	0x37, r24	; 55
	TCNT0 = 0; // 타이머 카운터 초기화
 1a8:	12 be       	out	0x32, r1	; 50
 1aa:	08 95       	ret

000001ac <main>:

//**** Debug **************************************************************************************************************************************************//

#if DEBUG_ == 0
//현준이 일하는 곳 맨 위에 #define DEBUG_ 부분을 0으로 바꾸기
int main(void){
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	1f 92       	push	r1
 1b2:	cd b7       	in	r28, 0x3d	; 61
 1b4:	de b7       	in	r29, 0x3e	; 62
	
	volatile unsigned char LED=0xFF;
 1b6:	1f ef       	ldi	r17, 0xFF	; 255
 1b8:	19 83       	std	Y+1, r17	; 0x01
	
	adc_init(); // ADC 초기화
 1ba:	ed df       	rcall	.-38     	; 0x196 <adc_init>
	timer0_init(); // 타이머0 초기화
 1bc:	f1 df       	rcall	.-30     	; 0x1a0 <timer0_init>
	
	Reset_sensor_val(); //센서 변수 초기화
 1be:	2a d1       	rcall	.+596    	; 0x414 <Reset_sensor_val>
 1c0:	78 94       	sei
	
	sei(); // 전역 인터럽트 허용
 1c2:	1a bb       	out	0x1a, r17	; 26

	DDRA=0xFF;
 1c4:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRF=0x00;
 1c8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <cds_sensor_val>
	
	while (1) {
		// ADC 채널 값을 읽고 필요한 변수에 저장
		
		if (cds_sensor_val > 100) { //CDS
 1cc:	85 36       	cpi	r24, 0x65	; 101
 1ce:	20 f0       	brcs	.+8      	; 0x1d8 <main+0x2c>
 1d0:	89 81       	ldd	r24, Y+1	; 0x01
			LED &= 0xFE; //CDS에 해당하는 LED만 켜기
 1d2:	8e 7f       	andi	r24, 0xFE	; 254
 1d4:	89 83       	std	Y+1, r24	; 0x01
 1d6:	03 c0       	rjmp	.+6      	; 0x1de <main+0x32>
 1d8:	89 81       	ldd	r24, Y+1	; 0x01
		}
		else {
			LED |= ~0xFE; //CDS에 해단하는 LED만 끄기
 1da:	81 60       	ori	r24, 0x01	; 1
 1dc:	89 83       	std	Y+1, r24	; 0x01
 1de:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <fire_sensor_val>
		}
		
		if (fire_sensor_val > 200) {
 1e2:	89 3c       	cpi	r24, 0xC9	; 201
 1e4:	20 f0       	brcs	.+8      	; 0x1ee <main+0x42>
 1e6:	89 81       	ldd	r24, Y+1	; 0x01
			LED &= 0xFD;
 1e8:	8d 7f       	andi	r24, 0xFD	; 253
 1ea:	89 83       	std	Y+1, r24	; 0x01
 1ec:	03 c0       	rjmp	.+6      	; 0x1f4 <main+0x48>
 1ee:	89 81       	ldd	r24, Y+1	; 0x01
		}
		else {
			LED |= ~0xFD;
 1f0:	82 60       	ori	r24, 0x02	; 2
 1f2:	89 83       	std	Y+1, r24	; 0x01
 1f4:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <pressure_sensor_val>
		}
		
		if (pressure_sensor_val > 200) {
 1f8:	89 3c       	cpi	r24, 0xC9	; 201
 1fa:	20 f0       	brcs	.+8      	; 0x204 <main+0x58>
 1fc:	89 81       	ldd	r24, Y+1	; 0x01
			LED &= 0xFC;
 1fe:	8c 7f       	andi	r24, 0xFC	; 252
 200:	89 83       	std	Y+1, r24	; 0x01
 202:	03 c0       	rjmp	.+6      	; 0x20a <main+0x5e>
 204:	89 81       	ldd	r24, Y+1	; 0x01
		}
		else {
			LED |= ~0xFC;
 206:	83 60       	ori	r24, 0x03	; 3
 208:	89 83       	std	Y+1, r24	; 0x01
 20a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <psd_sensor_val>
		}
		
		if (psd_sensor_val > 100) {
 20e:	85 36       	cpi	r24, 0x65	; 101
 210:	20 f0       	brcs	.+8      	; 0x21a <main+0x6e>
 212:	89 81       	ldd	r24, Y+1	; 0x01
			LED &= 0xFB;
 214:	8b 7f       	andi	r24, 0xFB	; 251
 216:	89 83       	std	Y+1, r24	; 0x01
 218:	03 c0       	rjmp	.+6      	; 0x220 <main+0x74>
 21a:	89 81       	ldd	r24, Y+1	; 0x01
		}
		else {
			LED |= ~0xFB;
 21c:	84 60       	ori	r24, 0x04	; 4
 21e:	89 83       	std	Y+1, r24	; 0x01
 220:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <shk_sensor_val>
		}
		
		if (shk_sensor_val > 100) {
 224:	85 36       	cpi	r24, 0x65	; 101
 226:	20 f0       	brcs	.+8      	; 0x230 <main+0x84>
 228:	89 81       	ldd	r24, Y+1	; 0x01
			LED &= 0xFA;
 22a:	8a 7f       	andi	r24, 0xFA	; 250
 22c:	89 83       	std	Y+1, r24	; 0x01
 22e:	03 c0       	rjmp	.+6      	; 0x236 <main+0x8a>
 230:	89 81       	ldd	r24, Y+1	; 0x01
		}
		else {
			LED |= ~0xFA;
 232:	85 60       	ori	r24, 0x05	; 5
 234:	89 83       	std	Y+1, r24	; 0x01
 236:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <temp_sensor_val>
		}
		
		if (temp_sensor_val > 100) {
 23a:	85 36       	cpi	r24, 0x65	; 101
 23c:	18 f0       	brcs	.+6      	; 0x244 <main+0x98>
 23e:	8f e7       	ldi	r24, 0x7F	; 127
			LED = 0x7F;
 240:	89 83       	std	Y+1, r24	; 0x01
 242:	02 c0       	rjmp	.+4      	; 0x248 <main+0x9c>
 244:	8f ef       	ldi	r24, 0xFF	; 255
		}
		else {
			LED = 0xFF;
 246:	89 83       	std	Y+1, r24	; 0x01
 248:	89 81       	ldd	r24, Y+1	; 0x01
		}
		
		PORTA=LED;
 24a:	8b bb       	out	0x1b, r24	; 27
 24c:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24e:	80 e7       	ldi	r24, 0x70	; 112
 250:	92 e0       	ldi	r25, 0x02	; 2
 252:	21 50       	subi	r18, 0x01	; 1
 254:	80 40       	sbci	r24, 0x00	; 0
 256:	90 40       	sbci	r25, 0x00	; 0
 258:	e1 f7       	brne	.-8      	; 0x252 <main+0xa6>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <main+0xb0>
 25c:	00 00       	nop
 25e:	b4 cf       	rjmp	.-152    	; 0x1c8 <main+0x1c>

00000260 <lpf>:
 260:	8f 92       	push	r8
 262:	9f 92       	push	r9
 264:	af 92       	push	r10
 266:	bf 92       	push	r11
 268:	cf 92       	push	r12
 26a:	df 92       	push	r13
 26c:	ef 92       	push	r14
 26e:	ff 92       	push	r15
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
 274:	ec 01       	movw	r28, r24
 276:	69 01       	movw	r12, r18
 278:	7a 01       	movw	r14, r20
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	6c d1       	rcall	.+728    	; 0x558 <__floatunsisf>
 280:	a7 01       	movw	r20, r14
 282:	96 01       	movw	r18, r12
 284:	f7 d1       	rcall	.+1006   	; 0x674 <__mulsf3>
 286:	4b 01       	movw	r8, r22
 288:	5c 01       	movw	r10, r24
 28a:	a7 01       	movw	r20, r14
 28c:	96 01       	movw	r18, r12
 28e:	60 e0       	ldi	r22, 0x00	; 0
 290:	70 e0       	ldi	r23, 0x00	; 0
 292:	80 e8       	ldi	r24, 0x80	; 128
 294:	9f e3       	ldi	r25, 0x3F	; 63
 296:	cf d0       	rcall	.+414    	; 0x436 <__subsf3>
 298:	6b 01       	movw	r12, r22
 29a:	7c 01       	movw	r14, r24
 29c:	be 01       	movw	r22, r28
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	5a d1       	rcall	.+692    	; 0x558 <__floatunsisf>
 2a4:	a7 01       	movw	r20, r14
 2a6:	96 01       	movw	r18, r12
 2a8:	e5 d1       	rcall	.+970    	; 0x674 <__mulsf3>
 2aa:	9b 01       	movw	r18, r22
 2ac:	ac 01       	movw	r20, r24
 2ae:	c5 01       	movw	r24, r10
 2b0:	b4 01       	movw	r22, r8
 2b2:	c2 d0       	rcall	.+388    	; 0x438 <__addsf3>
 2b4:	25 d1       	rcall	.+586    	; 0x500 <__fixunssfsi>
 2b6:	cb 01       	movw	r24, r22
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	ff 90       	pop	r15
 2be:	ef 90       	pop	r14
 2c0:	df 90       	pop	r13
 2c2:	cf 90       	pop	r12
 2c4:	bf 90       	pop	r11
 2c6:	af 90       	pop	r10
 2c8:	9f 90       	pop	r9
 2ca:	8f 90       	pop	r8
 2cc:	08 95       	ret

000002ce <hpf>:
 2ce:	cf 92       	push	r12
 2d0:	df 92       	push	r13
 2d2:	ef 92       	push	r14
 2d4:	ff 92       	push	r15
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
 2da:	ec 01       	movw	r28, r24
 2dc:	69 01       	movw	r12, r18
 2de:	7a 01       	movw	r14, r20
 2e0:	68 0f       	add	r22, r24
 2e2:	79 1f       	adc	r23, r25
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	37 d1       	rcall	.+622    	; 0x558 <__floatunsisf>
 2ea:	a7 01       	movw	r20, r14
 2ec:	96 01       	movw	r18, r12
 2ee:	c2 d1       	rcall	.+900    	; 0x674 <__mulsf3>
 2f0:	6b 01       	movw	r12, r22
 2f2:	7c 01       	movw	r14, r24
 2f4:	be 01       	movw	r22, r28
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	2e d1       	rcall	.+604    	; 0x558 <__floatunsisf>
 2fc:	9b 01       	movw	r18, r22
 2fe:	ac 01       	movw	r20, r24
 300:	c7 01       	movw	r24, r14
 302:	b6 01       	movw	r22, r12
 304:	98 d0       	rcall	.+304    	; 0x436 <__subsf3>
 306:	fc d0       	rcall	.+504    	; 0x500 <__fixunssfsi>
 308:	cb 01       	movw	r24, r22
 30a:	df 91       	pop	r29
 30c:	cf 91       	pop	r28
 30e:	ff 90       	pop	r15
 310:	ef 90       	pop	r14
 312:	df 90       	pop	r13
 314:	cf 90       	pop	r12
 316:	08 95       	ret

00000318 <Read_CDS>:
 318:	64 b1       	in	r22, 0x04	; 4
 31a:	75 b1       	in	r23, 0x05	; 5
 31c:	2d ec       	ldi	r18, 0xCD	; 205
 31e:	3c ec       	ldi	r19, 0xCC	; 204
 320:	4c ec       	ldi	r20, 0xCC	; 204
 322:	5d e3       	ldi	r21, 0x3D	; 61
 324:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <previous_value.1628>
 328:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <previous_value.1628+0x1>
 32c:	99 df       	rcall	.-206    	; 0x260 <lpf>
 32e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <cds_sensor_val>
 332:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <cds_sensor_val>
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <previous_value.1628+0x1>
 33c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <previous_value.1628>
 340:	08 95       	ret

00000342 <Read_Fire>:
 342:	64 b1       	in	r22, 0x04	; 4
 344:	75 b1       	in	r23, 0x05	; 5
 346:	2d ec       	ldi	r18, 0xCD	; 205
 348:	3c ec       	ldi	r19, 0xCC	; 204
 34a:	4c ec       	ldi	r20, 0xCC	; 204
 34c:	5d e3       	ldi	r21, 0x3D	; 61
 34e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <previous_value.1631>
 352:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <previous_value.1631+0x1>
 356:	84 df       	rcall	.-248    	; 0x260 <lpf>
 358:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <fire_sensor_val>
 35c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <fire_sensor_val>
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <previous_value.1631+0x1>
 366:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <previous_value.1631>
 36a:	08 95       	ret

0000036c <Read_PSD>:
 36c:	64 b1       	in	r22, 0x04	; 4
 36e:	75 b1       	in	r23, 0x05	; 5
 370:	2d ec       	ldi	r18, 0xCD	; 205
 372:	3c ec       	ldi	r19, 0xCC	; 204
 374:	4c ec       	ldi	r20, 0xCC	; 204
 376:	5d e3       	ldi	r21, 0x3D	; 61
 378:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <previous_value.1634>
 37c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <previous_value.1634+0x1>
 380:	6f df       	rcall	.-290    	; 0x260 <lpf>
 382:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <psd_sensor_val>
 386:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <psd_sensor_val>
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <previous_value.1634+0x1>
 390:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <previous_value.1634>
 394:	08 95       	ret

00000396 <Read_Pressure>:
 396:	64 b1       	in	r22, 0x04	; 4
 398:	75 b1       	in	r23, 0x05	; 5
 39a:	2d ec       	ldi	r18, 0xCD	; 205
 39c:	3c ec       	ldi	r19, 0xCC	; 204
 39e:	4c ec       	ldi	r20, 0xCC	; 204
 3a0:	5d e3       	ldi	r21, 0x3D	; 61
 3a2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <previous_value.1637>
 3a6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <previous_value.1637+0x1>
 3aa:	91 df       	rcall	.-222    	; 0x2ce <hpf>
 3ac:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <pressure_sensor_val>
 3b0:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <pressure_sensor_val>
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <previous_value.1637+0x1>
 3ba:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <previous_value.1637>
 3be:	08 95       	ret

000003c0 <Read_Thermister>:
 3c0:	64 b1       	in	r22, 0x04	; 4
 3c2:	75 b1       	in	r23, 0x05	; 5
 3c4:	2d ec       	ldi	r18, 0xCD	; 205
 3c6:	3c ec       	ldi	r19, 0xCC	; 204
 3c8:	4c ec       	ldi	r20, 0xCC	; 204
 3ca:	5d e3       	ldi	r21, 0x3D	; 61
 3cc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <previous_value.1640>
 3d0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <previous_value.1640+0x1>
 3d4:	45 df       	rcall	.-374    	; 0x260 <lpf>
 3d6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <temp_sensor_val>
 3da:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <temp_sensor_val>
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <previous_value.1640+0x1>
 3e4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <previous_value.1640>
 3e8:	08 95       	ret

000003ea <Read_Shock>:
 3ea:	64 b1       	in	r22, 0x04	; 4
 3ec:	75 b1       	in	r23, 0x05	; 5
 3ee:	2d ec       	ldi	r18, 0xCD	; 205
 3f0:	3c ec       	ldi	r19, 0xCC	; 204
 3f2:	4c ec       	ldi	r20, 0xCC	; 204
 3f4:	5d e3       	ldi	r21, 0x3D	; 61
 3f6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 3fa:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 3fe:	67 df       	rcall	.-306    	; 0x2ce <hpf>
 400:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <shk_sensor_val>
 404:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <shk_sensor_val>
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 40e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 412:	08 95       	ret

00000414 <Reset_sensor_val>:
 414:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <pressure_sensor_val>
 418:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <cds_sensor_val>
 41c:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <temp_sensor_val>
 420:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <temp_en>
 424:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <shk_sensor_val>
 428:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <shk_detected>
 42c:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <psd_sensor_val>
 430:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <fire_sensor_val>
 434:	08 95       	ret

00000436 <__subsf3>:
 436:	50 58       	subi	r21, 0x80	; 128

00000438 <__addsf3>:
 438:	bb 27       	eor	r27, r27
 43a:	aa 27       	eor	r26, r26
 43c:	0e d0       	rcall	.+28     	; 0x45a <__addsf3x>
 43e:	e0 c0       	rjmp	.+448    	; 0x600 <__fp_round>
 440:	d1 d0       	rcall	.+418    	; 0x5e4 <__fp_pscA>
 442:	30 f0       	brcs	.+12     	; 0x450 <__addsf3+0x18>
 444:	d6 d0       	rcall	.+428    	; 0x5f2 <__fp_pscB>
 446:	20 f0       	brcs	.+8      	; 0x450 <__addsf3+0x18>
 448:	31 f4       	brne	.+12     	; 0x456 <__addsf3+0x1e>
 44a:	9f 3f       	cpi	r25, 0xFF	; 255
 44c:	11 f4       	brne	.+4      	; 0x452 <__addsf3+0x1a>
 44e:	1e f4       	brtc	.+6      	; 0x456 <__addsf3+0x1e>
 450:	c6 c0       	rjmp	.+396    	; 0x5de <__fp_nan>
 452:	0e f4       	brtc	.+2      	; 0x456 <__addsf3+0x1e>
 454:	e0 95       	com	r30
 456:	e7 fb       	bst	r30, 7
 458:	bc c0       	rjmp	.+376    	; 0x5d2 <__fp_inf>

0000045a <__addsf3x>:
 45a:	e9 2f       	mov	r30, r25
 45c:	e2 d0       	rcall	.+452    	; 0x622 <__fp_split3>
 45e:	80 f3       	brcs	.-32     	; 0x440 <__addsf3+0x8>
 460:	ba 17       	cp	r27, r26
 462:	62 07       	cpc	r22, r18
 464:	73 07       	cpc	r23, r19
 466:	84 07       	cpc	r24, r20
 468:	95 07       	cpc	r25, r21
 46a:	18 f0       	brcs	.+6      	; 0x472 <__addsf3x+0x18>
 46c:	71 f4       	brne	.+28     	; 0x48a <__addsf3x+0x30>
 46e:	9e f5       	brtc	.+102    	; 0x4d6 <__addsf3x+0x7c>
 470:	fa c0       	rjmp	.+500    	; 0x666 <__fp_zero>
 472:	0e f4       	brtc	.+2      	; 0x476 <__addsf3x+0x1c>
 474:	e0 95       	com	r30
 476:	0b 2e       	mov	r0, r27
 478:	ba 2f       	mov	r27, r26
 47a:	a0 2d       	mov	r26, r0
 47c:	0b 01       	movw	r0, r22
 47e:	b9 01       	movw	r22, r18
 480:	90 01       	movw	r18, r0
 482:	0c 01       	movw	r0, r24
 484:	ca 01       	movw	r24, r20
 486:	a0 01       	movw	r20, r0
 488:	11 24       	eor	r1, r1
 48a:	ff 27       	eor	r31, r31
 48c:	59 1b       	sub	r21, r25
 48e:	99 f0       	breq	.+38     	; 0x4b6 <__addsf3x+0x5c>
 490:	59 3f       	cpi	r21, 0xF9	; 249
 492:	50 f4       	brcc	.+20     	; 0x4a8 <__addsf3x+0x4e>
 494:	50 3e       	cpi	r21, 0xE0	; 224
 496:	68 f1       	brcs	.+90     	; 0x4f2 <__addsf3x+0x98>
 498:	1a 16       	cp	r1, r26
 49a:	f0 40       	sbci	r31, 0x00	; 0
 49c:	a2 2f       	mov	r26, r18
 49e:	23 2f       	mov	r18, r19
 4a0:	34 2f       	mov	r19, r20
 4a2:	44 27       	eor	r20, r20
 4a4:	58 5f       	subi	r21, 0xF8	; 248
 4a6:	f3 cf       	rjmp	.-26     	; 0x48e <__addsf3x+0x34>
 4a8:	46 95       	lsr	r20
 4aa:	37 95       	ror	r19
 4ac:	27 95       	ror	r18
 4ae:	a7 95       	ror	r26
 4b0:	f0 40       	sbci	r31, 0x00	; 0
 4b2:	53 95       	inc	r21
 4b4:	c9 f7       	brne	.-14     	; 0x4a8 <__addsf3x+0x4e>
 4b6:	7e f4       	brtc	.+30     	; 0x4d6 <__addsf3x+0x7c>
 4b8:	1f 16       	cp	r1, r31
 4ba:	ba 0b       	sbc	r27, r26
 4bc:	62 0b       	sbc	r22, r18
 4be:	73 0b       	sbc	r23, r19
 4c0:	84 0b       	sbc	r24, r20
 4c2:	ba f0       	brmi	.+46     	; 0x4f2 <__addsf3x+0x98>
 4c4:	91 50       	subi	r25, 0x01	; 1
 4c6:	a1 f0       	breq	.+40     	; 0x4f0 <__addsf3x+0x96>
 4c8:	ff 0f       	add	r31, r31
 4ca:	bb 1f       	adc	r27, r27
 4cc:	66 1f       	adc	r22, r22
 4ce:	77 1f       	adc	r23, r23
 4d0:	88 1f       	adc	r24, r24
 4d2:	c2 f7       	brpl	.-16     	; 0x4c4 <__addsf3x+0x6a>
 4d4:	0e c0       	rjmp	.+28     	; 0x4f2 <__addsf3x+0x98>
 4d6:	ba 0f       	add	r27, r26
 4d8:	62 1f       	adc	r22, r18
 4da:	73 1f       	adc	r23, r19
 4dc:	84 1f       	adc	r24, r20
 4de:	48 f4       	brcc	.+18     	; 0x4f2 <__addsf3x+0x98>
 4e0:	87 95       	ror	r24
 4e2:	77 95       	ror	r23
 4e4:	67 95       	ror	r22
 4e6:	b7 95       	ror	r27
 4e8:	f7 95       	ror	r31
 4ea:	9e 3f       	cpi	r25, 0xFE	; 254
 4ec:	08 f0       	brcs	.+2      	; 0x4f0 <__addsf3x+0x96>
 4ee:	b3 cf       	rjmp	.-154    	; 0x456 <__addsf3+0x1e>
 4f0:	93 95       	inc	r25
 4f2:	88 0f       	add	r24, r24
 4f4:	08 f0       	brcs	.+2      	; 0x4f8 <__addsf3x+0x9e>
 4f6:	99 27       	eor	r25, r25
 4f8:	ee 0f       	add	r30, r30
 4fa:	97 95       	ror	r25
 4fc:	87 95       	ror	r24
 4fe:	08 95       	ret

00000500 <__fixunssfsi>:
 500:	98 d0       	rcall	.+304    	; 0x632 <__fp_splitA>
 502:	88 f0       	brcs	.+34     	; 0x526 <__fixunssfsi+0x26>
 504:	9f 57       	subi	r25, 0x7F	; 127
 506:	90 f0       	brcs	.+36     	; 0x52c <__fixunssfsi+0x2c>
 508:	b9 2f       	mov	r27, r25
 50a:	99 27       	eor	r25, r25
 50c:	b7 51       	subi	r27, 0x17	; 23
 50e:	a0 f0       	brcs	.+40     	; 0x538 <__fixunssfsi+0x38>
 510:	d1 f0       	breq	.+52     	; 0x546 <__fixunssfsi+0x46>
 512:	66 0f       	add	r22, r22
 514:	77 1f       	adc	r23, r23
 516:	88 1f       	adc	r24, r24
 518:	99 1f       	adc	r25, r25
 51a:	1a f0       	brmi	.+6      	; 0x522 <__fixunssfsi+0x22>
 51c:	ba 95       	dec	r27
 51e:	c9 f7       	brne	.-14     	; 0x512 <__fixunssfsi+0x12>
 520:	12 c0       	rjmp	.+36     	; 0x546 <__fixunssfsi+0x46>
 522:	b1 30       	cpi	r27, 0x01	; 1
 524:	81 f0       	breq	.+32     	; 0x546 <__fixunssfsi+0x46>
 526:	9f d0       	rcall	.+318    	; 0x666 <__fp_zero>
 528:	b1 e0       	ldi	r27, 0x01	; 1
 52a:	08 95       	ret
 52c:	9c c0       	rjmp	.+312    	; 0x666 <__fp_zero>
 52e:	67 2f       	mov	r22, r23
 530:	78 2f       	mov	r23, r24
 532:	88 27       	eor	r24, r24
 534:	b8 5f       	subi	r27, 0xF8	; 248
 536:	39 f0       	breq	.+14     	; 0x546 <__fixunssfsi+0x46>
 538:	b9 3f       	cpi	r27, 0xF9	; 249
 53a:	cc f3       	brlt	.-14     	; 0x52e <__fixunssfsi+0x2e>
 53c:	86 95       	lsr	r24
 53e:	77 95       	ror	r23
 540:	67 95       	ror	r22
 542:	b3 95       	inc	r27
 544:	d9 f7       	brne	.-10     	; 0x53c <__fixunssfsi+0x3c>
 546:	3e f4       	brtc	.+14     	; 0x556 <__fixunssfsi+0x56>
 548:	90 95       	com	r25
 54a:	80 95       	com	r24
 54c:	70 95       	com	r23
 54e:	61 95       	neg	r22
 550:	7f 4f       	sbci	r23, 0xFF	; 255
 552:	8f 4f       	sbci	r24, 0xFF	; 255
 554:	9f 4f       	sbci	r25, 0xFF	; 255
 556:	08 95       	ret

00000558 <__floatunsisf>:
 558:	e8 94       	clt
 55a:	09 c0       	rjmp	.+18     	; 0x56e <__floatsisf+0x12>

0000055c <__floatsisf>:
 55c:	97 fb       	bst	r25, 7
 55e:	3e f4       	brtc	.+14     	; 0x56e <__floatsisf+0x12>
 560:	90 95       	com	r25
 562:	80 95       	com	r24
 564:	70 95       	com	r23
 566:	61 95       	neg	r22
 568:	7f 4f       	sbci	r23, 0xFF	; 255
 56a:	8f 4f       	sbci	r24, 0xFF	; 255
 56c:	9f 4f       	sbci	r25, 0xFF	; 255
 56e:	99 23       	and	r25, r25
 570:	a9 f0       	breq	.+42     	; 0x59c <__floatsisf+0x40>
 572:	f9 2f       	mov	r31, r25
 574:	96 e9       	ldi	r25, 0x96	; 150
 576:	bb 27       	eor	r27, r27
 578:	93 95       	inc	r25
 57a:	f6 95       	lsr	r31
 57c:	87 95       	ror	r24
 57e:	77 95       	ror	r23
 580:	67 95       	ror	r22
 582:	b7 95       	ror	r27
 584:	f1 11       	cpse	r31, r1
 586:	f8 cf       	rjmp	.-16     	; 0x578 <__floatsisf+0x1c>
 588:	fa f4       	brpl	.+62     	; 0x5c8 <__floatsisf+0x6c>
 58a:	bb 0f       	add	r27, r27
 58c:	11 f4       	brne	.+4      	; 0x592 <__floatsisf+0x36>
 58e:	60 ff       	sbrs	r22, 0
 590:	1b c0       	rjmp	.+54     	; 0x5c8 <__floatsisf+0x6c>
 592:	6f 5f       	subi	r22, 0xFF	; 255
 594:	7f 4f       	sbci	r23, 0xFF	; 255
 596:	8f 4f       	sbci	r24, 0xFF	; 255
 598:	9f 4f       	sbci	r25, 0xFF	; 255
 59a:	16 c0       	rjmp	.+44     	; 0x5c8 <__floatsisf+0x6c>
 59c:	88 23       	and	r24, r24
 59e:	11 f0       	breq	.+4      	; 0x5a4 <__floatsisf+0x48>
 5a0:	96 e9       	ldi	r25, 0x96	; 150
 5a2:	11 c0       	rjmp	.+34     	; 0x5c6 <__floatsisf+0x6a>
 5a4:	77 23       	and	r23, r23
 5a6:	21 f0       	breq	.+8      	; 0x5b0 <__floatsisf+0x54>
 5a8:	9e e8       	ldi	r25, 0x8E	; 142
 5aa:	87 2f       	mov	r24, r23
 5ac:	76 2f       	mov	r23, r22
 5ae:	05 c0       	rjmp	.+10     	; 0x5ba <__floatsisf+0x5e>
 5b0:	66 23       	and	r22, r22
 5b2:	71 f0       	breq	.+28     	; 0x5d0 <__floatsisf+0x74>
 5b4:	96 e8       	ldi	r25, 0x86	; 134
 5b6:	86 2f       	mov	r24, r22
 5b8:	70 e0       	ldi	r23, 0x00	; 0
 5ba:	60 e0       	ldi	r22, 0x00	; 0
 5bc:	2a f0       	brmi	.+10     	; 0x5c8 <__floatsisf+0x6c>
 5be:	9a 95       	dec	r25
 5c0:	66 0f       	add	r22, r22
 5c2:	77 1f       	adc	r23, r23
 5c4:	88 1f       	adc	r24, r24
 5c6:	da f7       	brpl	.-10     	; 0x5be <__floatsisf+0x62>
 5c8:	88 0f       	add	r24, r24
 5ca:	96 95       	lsr	r25
 5cc:	87 95       	ror	r24
 5ce:	97 f9       	bld	r25, 7
 5d0:	08 95       	ret

000005d2 <__fp_inf>:
 5d2:	97 f9       	bld	r25, 7
 5d4:	9f 67       	ori	r25, 0x7F	; 127
 5d6:	80 e8       	ldi	r24, 0x80	; 128
 5d8:	70 e0       	ldi	r23, 0x00	; 0
 5da:	60 e0       	ldi	r22, 0x00	; 0
 5dc:	08 95       	ret

000005de <__fp_nan>:
 5de:	9f ef       	ldi	r25, 0xFF	; 255
 5e0:	80 ec       	ldi	r24, 0xC0	; 192
 5e2:	08 95       	ret

000005e4 <__fp_pscA>:
 5e4:	00 24       	eor	r0, r0
 5e6:	0a 94       	dec	r0
 5e8:	16 16       	cp	r1, r22
 5ea:	17 06       	cpc	r1, r23
 5ec:	18 06       	cpc	r1, r24
 5ee:	09 06       	cpc	r0, r25
 5f0:	08 95       	ret

000005f2 <__fp_pscB>:
 5f2:	00 24       	eor	r0, r0
 5f4:	0a 94       	dec	r0
 5f6:	12 16       	cp	r1, r18
 5f8:	13 06       	cpc	r1, r19
 5fa:	14 06       	cpc	r1, r20
 5fc:	05 06       	cpc	r0, r21
 5fe:	08 95       	ret

00000600 <__fp_round>:
 600:	09 2e       	mov	r0, r25
 602:	03 94       	inc	r0
 604:	00 0c       	add	r0, r0
 606:	11 f4       	brne	.+4      	; 0x60c <__fp_round+0xc>
 608:	88 23       	and	r24, r24
 60a:	52 f0       	brmi	.+20     	; 0x620 <__fp_round+0x20>
 60c:	bb 0f       	add	r27, r27
 60e:	40 f4       	brcc	.+16     	; 0x620 <__fp_round+0x20>
 610:	bf 2b       	or	r27, r31
 612:	11 f4       	brne	.+4      	; 0x618 <__fp_round+0x18>
 614:	60 ff       	sbrs	r22, 0
 616:	04 c0       	rjmp	.+8      	; 0x620 <__fp_round+0x20>
 618:	6f 5f       	subi	r22, 0xFF	; 255
 61a:	7f 4f       	sbci	r23, 0xFF	; 255
 61c:	8f 4f       	sbci	r24, 0xFF	; 255
 61e:	9f 4f       	sbci	r25, 0xFF	; 255
 620:	08 95       	ret

00000622 <__fp_split3>:
 622:	57 fd       	sbrc	r21, 7
 624:	90 58       	subi	r25, 0x80	; 128
 626:	44 0f       	add	r20, r20
 628:	55 1f       	adc	r21, r21
 62a:	59 f0       	breq	.+22     	; 0x642 <__fp_splitA+0x10>
 62c:	5f 3f       	cpi	r21, 0xFF	; 255
 62e:	71 f0       	breq	.+28     	; 0x64c <__fp_splitA+0x1a>
 630:	47 95       	ror	r20

00000632 <__fp_splitA>:
 632:	88 0f       	add	r24, r24
 634:	97 fb       	bst	r25, 7
 636:	99 1f       	adc	r25, r25
 638:	61 f0       	breq	.+24     	; 0x652 <__fp_splitA+0x20>
 63a:	9f 3f       	cpi	r25, 0xFF	; 255
 63c:	79 f0       	breq	.+30     	; 0x65c <__fp_splitA+0x2a>
 63e:	87 95       	ror	r24
 640:	08 95       	ret
 642:	12 16       	cp	r1, r18
 644:	13 06       	cpc	r1, r19
 646:	14 06       	cpc	r1, r20
 648:	55 1f       	adc	r21, r21
 64a:	f2 cf       	rjmp	.-28     	; 0x630 <__fp_split3+0xe>
 64c:	46 95       	lsr	r20
 64e:	f1 df       	rcall	.-30     	; 0x632 <__fp_splitA>
 650:	08 c0       	rjmp	.+16     	; 0x662 <__fp_splitA+0x30>
 652:	16 16       	cp	r1, r22
 654:	17 06       	cpc	r1, r23
 656:	18 06       	cpc	r1, r24
 658:	99 1f       	adc	r25, r25
 65a:	f1 cf       	rjmp	.-30     	; 0x63e <__fp_splitA+0xc>
 65c:	86 95       	lsr	r24
 65e:	71 05       	cpc	r23, r1
 660:	61 05       	cpc	r22, r1
 662:	08 94       	sec
 664:	08 95       	ret

00000666 <__fp_zero>:
 666:	e8 94       	clt

00000668 <__fp_szero>:
 668:	bb 27       	eor	r27, r27
 66a:	66 27       	eor	r22, r22
 66c:	77 27       	eor	r23, r23
 66e:	cb 01       	movw	r24, r22
 670:	97 f9       	bld	r25, 7
 672:	08 95       	ret

00000674 <__mulsf3>:
 674:	0b d0       	rcall	.+22     	; 0x68c <__mulsf3x>
 676:	c4 cf       	rjmp	.-120    	; 0x600 <__fp_round>
 678:	b5 df       	rcall	.-150    	; 0x5e4 <__fp_pscA>
 67a:	28 f0       	brcs	.+10     	; 0x686 <__mulsf3+0x12>
 67c:	ba df       	rcall	.-140    	; 0x5f2 <__fp_pscB>
 67e:	18 f0       	brcs	.+6      	; 0x686 <__mulsf3+0x12>
 680:	95 23       	and	r25, r21
 682:	09 f0       	breq	.+2      	; 0x686 <__mulsf3+0x12>
 684:	a6 cf       	rjmp	.-180    	; 0x5d2 <__fp_inf>
 686:	ab cf       	rjmp	.-170    	; 0x5de <__fp_nan>
 688:	11 24       	eor	r1, r1
 68a:	ee cf       	rjmp	.-36     	; 0x668 <__fp_szero>

0000068c <__mulsf3x>:
 68c:	ca df       	rcall	.-108    	; 0x622 <__fp_split3>
 68e:	a0 f3       	brcs	.-24     	; 0x678 <__mulsf3+0x4>

00000690 <__mulsf3_pse>:
 690:	95 9f       	mul	r25, r21
 692:	d1 f3       	breq	.-12     	; 0x688 <__mulsf3+0x14>
 694:	95 0f       	add	r25, r21
 696:	50 e0       	ldi	r21, 0x00	; 0
 698:	55 1f       	adc	r21, r21
 69a:	62 9f       	mul	r22, r18
 69c:	f0 01       	movw	r30, r0
 69e:	72 9f       	mul	r23, r18
 6a0:	bb 27       	eor	r27, r27
 6a2:	f0 0d       	add	r31, r0
 6a4:	b1 1d       	adc	r27, r1
 6a6:	63 9f       	mul	r22, r19
 6a8:	aa 27       	eor	r26, r26
 6aa:	f0 0d       	add	r31, r0
 6ac:	b1 1d       	adc	r27, r1
 6ae:	aa 1f       	adc	r26, r26
 6b0:	64 9f       	mul	r22, r20
 6b2:	66 27       	eor	r22, r22
 6b4:	b0 0d       	add	r27, r0
 6b6:	a1 1d       	adc	r26, r1
 6b8:	66 1f       	adc	r22, r22
 6ba:	82 9f       	mul	r24, r18
 6bc:	22 27       	eor	r18, r18
 6be:	b0 0d       	add	r27, r0
 6c0:	a1 1d       	adc	r26, r1
 6c2:	62 1f       	adc	r22, r18
 6c4:	73 9f       	mul	r23, r19
 6c6:	b0 0d       	add	r27, r0
 6c8:	a1 1d       	adc	r26, r1
 6ca:	62 1f       	adc	r22, r18
 6cc:	83 9f       	mul	r24, r19
 6ce:	a0 0d       	add	r26, r0
 6d0:	61 1d       	adc	r22, r1
 6d2:	22 1f       	adc	r18, r18
 6d4:	74 9f       	mul	r23, r20
 6d6:	33 27       	eor	r19, r19
 6d8:	a0 0d       	add	r26, r0
 6da:	61 1d       	adc	r22, r1
 6dc:	23 1f       	adc	r18, r19
 6de:	84 9f       	mul	r24, r20
 6e0:	60 0d       	add	r22, r0
 6e2:	21 1d       	adc	r18, r1
 6e4:	82 2f       	mov	r24, r18
 6e6:	76 2f       	mov	r23, r22
 6e8:	6a 2f       	mov	r22, r26
 6ea:	11 24       	eor	r1, r1
 6ec:	9f 57       	subi	r25, 0x7F	; 127
 6ee:	50 40       	sbci	r21, 0x00	; 0
 6f0:	8a f0       	brmi	.+34     	; 0x714 <__mulsf3_pse+0x84>
 6f2:	e1 f0       	breq	.+56     	; 0x72c <__mulsf3_pse+0x9c>
 6f4:	88 23       	and	r24, r24
 6f6:	4a f0       	brmi	.+18     	; 0x70a <__mulsf3_pse+0x7a>
 6f8:	ee 0f       	add	r30, r30
 6fa:	ff 1f       	adc	r31, r31
 6fc:	bb 1f       	adc	r27, r27
 6fe:	66 1f       	adc	r22, r22
 700:	77 1f       	adc	r23, r23
 702:	88 1f       	adc	r24, r24
 704:	91 50       	subi	r25, 0x01	; 1
 706:	50 40       	sbci	r21, 0x00	; 0
 708:	a9 f7       	brne	.-22     	; 0x6f4 <__mulsf3_pse+0x64>
 70a:	9e 3f       	cpi	r25, 0xFE	; 254
 70c:	51 05       	cpc	r21, r1
 70e:	70 f0       	brcs	.+28     	; 0x72c <__mulsf3_pse+0x9c>
 710:	60 cf       	rjmp	.-320    	; 0x5d2 <__fp_inf>
 712:	aa cf       	rjmp	.-172    	; 0x668 <__fp_szero>
 714:	5f 3f       	cpi	r21, 0xFF	; 255
 716:	ec f3       	brlt	.-6      	; 0x712 <__mulsf3_pse+0x82>
 718:	98 3e       	cpi	r25, 0xE8	; 232
 71a:	dc f3       	brlt	.-10     	; 0x712 <__mulsf3_pse+0x82>
 71c:	86 95       	lsr	r24
 71e:	77 95       	ror	r23
 720:	67 95       	ror	r22
 722:	b7 95       	ror	r27
 724:	f7 95       	ror	r31
 726:	e7 95       	ror	r30
 728:	9f 5f       	subi	r25, 0xFF	; 255
 72a:	c1 f7       	brne	.-16     	; 0x71c <__mulsf3_pse+0x8c>
 72c:	fe 2b       	or	r31, r30
 72e:	88 0f       	add	r24, r24
 730:	91 1d       	adc	r25, r1
 732:	96 95       	lsr	r25
 734:	87 95       	ror	r24
 736:	97 f9       	bld	r25, 7
 738:	08 95       	ret

0000073a <_exit>:
 73a:	f8 94       	cli

0000073c <__stop_program>:
 73c:	ff cf       	rjmp	.-2      	; 0x73c <__stop_program>
