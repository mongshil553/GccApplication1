
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000170  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000001e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000de4  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a07  00000000  00000000  000010cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000058e  00000000  00000000  00001ad3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  00002064  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000067a  00000000  00000000  0000219c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001a5  00000000  00000000  00002816  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000029bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	7f c0       	rjmp	.+254    	; 0x140 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	39 c0       	rjmp	.+114    	; 0xc8 <__vector_21>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e7       	ldi	r30, 0x70	; 112
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 30       	cpi	r26, 0x03	; 3
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	3d d0       	rcall	.+122    	; 0x13e <main>
  c4:	53 c0       	rjmp	.+166    	; 0x16c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_21>:
//MAIN
volatile char state = 0x01;
volatile char PSD_Detected = 0x00;
volatile uint16_t adc_value =0; //ADC값 저장

ISR(ADC_vect){//인터럽트 사용해서 ADC값 읽어옴
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
	adc_value=ADC; //ADC값 저장
  d6:	84 b1       	in	r24, 0x04	; 4
  d8:	95 b1       	in	r25, 0x05	; 5
  da:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <adc_value+0x1>
  de:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <adc_value>
}
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <adc_init>:

//ADC 입력
//ADC 초기화
void adc_init(void){
	ADMUX=(1<<REFS0); //외부 레퍼런스 접압을 기준 전압으로 선택, 우측정렬, 초기 입력핀은 0번
  f0:	80 e4       	ldi	r24, 0x40	; 64
  f2:	87 b9       	out	0x07, r24	; 7
	ADCSRA=(1<<ADEN)|(7<<ADPS0)|(1<<ADIE); //ADC enable, ADC interrupt enable 분주비 128
  f4:	8f e8       	ldi	r24, 0x8F	; 143
  f6:	86 b9       	out	0x06, r24	; 6
  f8:	08 95       	ret

000000fa <start_adc_conversion>:
}

void start_adc_conversion(void){//인터럽트 사용할때 ADC 변화
	ADCSRA |=(1<<ADSC); //ADC 변화 시작
  fa:	86 b1       	in	r24, 0x06	; 6
  fc:	80 64       	ori	r24, 0x40	; 64
  fe:	86 b9       	out	0x06, r24	; 6
 100:	08 95       	ret

00000102 <read_adc_channel>:
	//return ADC;
//}

uint16_t read_adc_channel(uint8_t ch) {
	
	ADMUX = (ADMUX & 0xF8) | (ch & 0x07);// ADC 채널 선택
 102:	97 b1       	in	r25, 0x07	; 7
 104:	98 7f       	andi	r25, 0xF8	; 248
 106:	87 70       	andi	r24, 0x07	; 7
 108:	89 2b       	or	r24, r25
 10a:	87 b9       	out	0x07, r24	; 7
	start_adc_conversion();
 10c:	f6 df       	rcall	.-20     	; 0xfa <start_adc_conversion>
	while (ADCSRA & (1 << ADSC)); // 변환 완료 대기
 10e:	36 99       	sbic	0x06, 6	; 6
 110:	fe cf       	rjmp	.-4      	; 0x10e <read_adc_channel+0xc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 112:	8f e3       	ldi	r24, 0x3F	; 63
 114:	9c e9       	ldi	r25, 0x9C	; 156
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <read_adc_channel+0x14>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <read_adc_channel+0x1a>
 11c:	00 00       	nop
	_delay_ms(10); // 약간의 시간 대기
	return adc_value; // ADC 값 반환
 11e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <adc_value>
 122:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <adc_value+0x1>
}
 126:	08 95       	ret

00000128 <adc_read>:

void adc_read(){
	
	adc_init();//ADC 초기화
 128:	e3 df       	rcall	.-58     	; 0xf0 <adc_init>
	sei();
 12a:	78 94       	sei
	uint16_t psd_sensor_value = 0;
	uint16_t fire_sensor_value = 0;	
	
	while (1) {
		// ADC 채널 4 (압력 센서) 값 읽기
		pressure_sensor_value = read_adc_channel(4);
 12c:	84 e0       	ldi	r24, 0x04	; 4
 12e:	e9 df       	rcall	.-46     	; 0x102 <read_adc_channel>
		
		// ADC 채널 5 (진동 감지 센서) 값 읽기
		vibration_sensor_value = read_adc_channel(5);
 130:	85 e0       	ldi	r24, 0x05	; 5
 132:	e7 df       	rcall	.-50     	; 0x102 <read_adc_channel>
		
		// ADC 채널 6 (불꽃 감지 센서) 값 읽기
		fire_sensor_value = read_adc_channel(6);
 134:	86 e0       	ldi	r24, 0x06	; 6
 136:	e5 df       	rcall	.-54     	; 0x102 <read_adc_channel>
		
		// ADC 채널 7 (PSD 센서) 값 읽기
		psd_sensor_value = read_adc_channel(7);
 138:	87 e0       	ldi	r24, 0x07	; 7
 13a:	e3 df       	rcall	.-58     	; 0x102 <read_adc_channel>
 13c:	f7 cf       	rjmp	.-18     	; 0x12c <adc_read+0x4>

0000013e <main>:
 13e:	f4 df       	rcall	.-24     	; 0x128 <adc_read>

00000140 <__vector_16>:
	
	}
	
}

ISR(TIMER0_OVF_vect){ //Use Timer0 for collecting sensor value and PWM
 140:	1f 92       	push	r1
 142:	0f 92       	push	r0
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	0f 92       	push	r0
 148:	11 24       	eor	r1, r1
 14a:	8f 93       	push	r24
	
	volatile static char key = 0;
	
	if(key == 0) ElectroMagnet_On();
 14c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 150:	81 11       	cpse	r24, r1
 152:	03 c0       	rjmp	.+6      	; 0x15a <__vector_16+0x1a>
	DDRC = (1<<ElectroMagnet);
	//DDRC = 0xFF;
}

inline void ElectroMagnet_On(){
	PORTC &= (0 << ElectroMagnet);
 154:	85 b3       	in	r24, 0x15	; 21
 156:	15 ba       	out	0x15, r1	; 21
 158:	03 c0       	rjmp	.+6      	; 0x160 <__vector_16+0x20>
	//PORTC = 0x7F;
}

inline void ElectroMagnet_Off(){
	PORTC |=  (1 << ElectroMagnet);
 15a:	85 b3       	in	r24, 0x15	; 21
 15c:	80 68       	ori	r24, 0x80	; 128
 15e:	85 bb       	out	0x15, r24	; 21
	}
	
	//always get Fire sensor value
	//Need to Control Fire Sensor
	*/
}
 160:	8f 91       	pop	r24
 162:	0f 90       	pop	r0
 164:	0f be       	out	0x3f, r0	; 63
 166:	0f 90       	pop	r0
 168:	1f 90       	pop	r1
 16a:	18 95       	reti

0000016c <_exit>:
 16c:	f8 94       	cli

0000016e <__stop_program>:
 16e:	ff cf       	rjmp	.-2      	; 0x16e <__stop_program>
