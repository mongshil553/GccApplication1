
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000600  00000694  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000600  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  00800102  00800102  00000696  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000696  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000704  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011be  00000000  00000000  0000081c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ab8  00000000  00000000  000019da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009eb  00000000  00000000  00002492  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002cc  00000000  00000000  00002e80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000073e  00000000  00000000  0000314c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000578  00000000  00000000  0000388a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00003e02  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	a8 c1       	rjmp	.+848    	; 0x392 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	49 c0       	rjmp	.+146    	; 0xe4 <__vector_20>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e0       	ldi	r30, 0x00	; 0
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 32       	cpi	r26, 0x20	; 32
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	a7 d0       	rcall	.+334    	; 0x212 <main>
  c4:	9b c2       	rjmp	.+1334   	; 0x5fc <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Select_Item>:
#include <avr/io.h>
#include <util/delay.h>
#include "Item.h"

void Select_Item(char item){
	PORTC = (PORTC & 0xF0) | item;
  c8:	95 b3       	in	r25, 0x15	; 21
  ca:	90 7f       	andi	r25, 0xF0	; 240
  cc:	89 2b       	or	r24, r25
  ce:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	2f ef       	ldi	r18, 0xFF	; 255
  d2:	81 ee       	ldi	r24, 0xE1	; 225
  d4:	94 e0       	ldi	r25, 0x04	; 4
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	80 40       	sbci	r24, 0x00	; 0
  da:	90 40       	sbci	r25, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <Select_Item+0xe>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <Select_Item+0x18>
  e0:	00 00       	nop
  e2:	08 95       	ret

000000e4 <__vector_20>:
		case 0x04: //None <- LED Off
			led_select = 0x04;
		break;
	}
	
	OCR2 = led_pwm_value; //Set PWM Value
  e4:	5d 9b       	sbis	0x0b, 5	; 11
  e6:	fe cf       	rjmp	.-4      	; 0xe4 <__vector_20>
  e8:	8c b9       	out	0x0c, r24	; 12
  ea:	08 95       	ret

000000ec <USART0_NUM>:
  ec:	ef 92       	push	r14
  ee:	ff 92       	push	r15
  f0:	0f 93       	push	r16
  f2:	1f 93       	push	r17
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	ec 01       	movw	r28, r24
  fa:	7c 01       	movw	r14, r24
  fc:	f6 94       	lsr	r15
  fe:	e7 94       	ror	r14
 100:	f6 94       	lsr	r15
 102:	e7 94       	ror	r14
 104:	f6 94       	lsr	r15
 106:	e7 94       	ror	r14
 108:	97 01       	movw	r18, r14
 10a:	a5 ec       	ldi	r26, 0xC5	; 197
 10c:	b0 e2       	ldi	r27, 0x20	; 32
 10e:	67 d2       	rcall	.+1230   	; 0x5de <__umulhisi3>
 110:	8c 01       	movw	r16, r24
 112:	12 95       	swap	r17
 114:	02 95       	swap	r16
 116:	0f 70       	andi	r16, 0x0F	; 15
 118:	01 27       	eor	r16, r17
 11a:	1f 70       	andi	r17, 0x0F	; 15
 11c:	01 27       	eor	r16, r17
 11e:	80 e3       	ldi	r24, 0x30	; 48
 120:	80 0f       	add	r24, r16
 122:	e0 df       	rcall	.-64     	; 0xe4 <__vector_20>
 124:	28 ee       	ldi	r18, 0xE8	; 232
 126:	33 e0       	ldi	r19, 0x03	; 3
 128:	02 9f       	mul	r16, r18
 12a:	c0 01       	movw	r24, r0
 12c:	03 9f       	mul	r16, r19
 12e:	90 0d       	add	r25, r0
 130:	12 9f       	mul	r17, r18
 132:	90 0d       	add	r25, r0
 134:	11 24       	eor	r1, r1
 136:	9e 01       	movw	r18, r28
 138:	28 1b       	sub	r18, r24
 13a:	39 0b       	sbc	r19, r25
 13c:	36 95       	lsr	r19
 13e:	27 95       	ror	r18
 140:	36 95       	lsr	r19
 142:	27 95       	ror	r18
 144:	ab e7       	ldi	r26, 0x7B	; 123
 146:	b4 e1       	ldi	r27, 0x14	; 20
 148:	4a d2       	rcall	.+1172   	; 0x5de <__umulhisi3>
 14a:	96 95       	lsr	r25
 14c:	87 95       	ror	r24
 14e:	80 5d       	subi	r24, 0xD0	; 208
 150:	c9 df       	rcall	.-110    	; 0xe4 <__vector_20>
 152:	9e 01       	movw	r18, r28
 154:	36 95       	lsr	r19
 156:	27 95       	ror	r18
 158:	36 95       	lsr	r19
 15a:	27 95       	ror	r18
 15c:	ab e7       	ldi	r26, 0x7B	; 123
 15e:	b4 e1       	ldi	r27, 0x14	; 20
 160:	3e d2       	rcall	.+1148   	; 0x5de <__umulhisi3>
 162:	9c 01       	movw	r18, r24
 164:	36 95       	lsr	r19
 166:	27 95       	ror	r18
 168:	44 e6       	ldi	r20, 0x64	; 100
 16a:	42 9f       	mul	r20, r18
 16c:	c0 01       	movw	r24, r0
 16e:	43 9f       	mul	r20, r19
 170:	90 0d       	add	r25, r0
 172:	11 24       	eor	r1, r1
 174:	9e 01       	movw	r18, r28
 176:	28 1b       	sub	r18, r24
 178:	39 0b       	sbc	r19, r25
 17a:	ad ec       	ldi	r26, 0xCD	; 205
 17c:	bc ec       	ldi	r27, 0xCC	; 204
 17e:	2f d2       	rcall	.+1118   	; 0x5de <__umulhisi3>
 180:	96 95       	lsr	r25
 182:	87 95       	ror	r24
 184:	96 95       	lsr	r25
 186:	87 95       	ror	r24
 188:	96 95       	lsr	r25
 18a:	87 95       	ror	r24
 18c:	80 5d       	subi	r24, 0xD0	; 208
 18e:	aa df       	rcall	.-172    	; 0xe4 <__vector_20>
 190:	9e 01       	movw	r18, r28
 192:	ad ec       	ldi	r26, 0xCD	; 205
 194:	bc ec       	ldi	r27, 0xCC	; 204
 196:	23 d2       	rcall	.+1094   	; 0x5de <__umulhisi3>
 198:	96 95       	lsr	r25
 19a:	87 95       	ror	r24
 19c:	96 95       	lsr	r25
 19e:	87 95       	ror	r24
 1a0:	96 95       	lsr	r25
 1a2:	87 95       	ror	r24
 1a4:	9c 01       	movw	r18, r24
 1a6:	22 0f       	add	r18, r18
 1a8:	33 1f       	adc	r19, r19
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	82 0f       	add	r24, r18
 1b8:	93 1f       	adc	r25, r19
 1ba:	9e 01       	movw	r18, r28
 1bc:	28 1b       	sub	r18, r24
 1be:	39 0b       	sbc	r19, r25
 1c0:	c9 01       	movw	r24, r18
 1c2:	80 5d       	subi	r24, 0xD0	; 208
 1c4:	8f df       	rcall	.-226    	; 0xe4 <__vector_20>
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	1f 91       	pop	r17
 1cc:	0f 91       	pop	r16
 1ce:	ff 90       	pop	r15
 1d0:	ef 90       	pop	r14
 1d2:	08 95       	ret

000001d4 <timer0_init>:
 1d4:	83 b7       	in	r24, 0x33	; 51
 1d6:	87 60       	ori	r24, 0x07	; 7
 1d8:	83 bf       	out	0x33, r24	; 51
 1da:	87 b7       	in	r24, 0x37	; 55
 1dc:	81 60       	ori	r24, 0x01	; 1
 1de:	87 bf       	out	0x37, r24	; 55
 1e0:	12 be       	out	0x32, r1	; 50
 1e2:	08 95       	ret

000001e4 <timer1_init>:
 1e4:	82 e8       	ldi	r24, 0x82	; 130
 1e6:	8f bd       	out	0x2f, r24	; 47
 1e8:	8b e1       	ldi	r24, 0x1B	; 27
 1ea:	8e bd       	out	0x2e, r24	; 46
 1ec:	87 e8       	ldi	r24, 0x87	; 135
 1ee:	93 e1       	ldi	r25, 0x13	; 19
 1f0:	97 bd       	out	0x27, r25	; 39
 1f2:	86 bd       	out	0x26, r24	; 38
 1f4:	08 95       	ret

000001f6 <port_setup>:
 1f6:	8f ef       	ldi	r24, 0xFF	; 255
 1f8:	8a bb       	out	0x1a, r24	; 26
 1fa:	11 ba       	out	0x11, r1	; 17
 1fc:	87 bb       	out	0x17, r24	; 23
 1fe:	84 bb       	out	0x14, r24	; 20
 200:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 204:	12 b8       	out	0x02, r1	; 2
 206:	08 95       	ret

00000208 <adc_init>:
 208:	80 e4       	ldi	r24, 0x40	; 64
 20a:	87 b9       	out	0x07, r24	; 7
 20c:	87 e8       	ldi	r24, 0x87	; 135
 20e:	86 b9       	out	0x06, r24	; 6
 210:	08 95       	ret

00000212 <main>:
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	1f 92       	push	r1
 218:	cd b7       	in	r28, 0x3d	; 61
 21a:	de b7       	in	r29, 0x3e	; 62
 21c:	8f ef       	ldi	r24, 0xFF	; 255
 21e:	89 83       	std	Y+1, r24	; 0x01
 220:	8a bb       	out	0x1a, r24	; 26
 222:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 226:	f0 df       	rcall	.-32     	; 0x208 <adc_init>
 228:	d5 df       	rcall	.-86     	; 0x1d4 <timer0_init>
 22a:	dc df       	rcall	.-72     	; 0x1e4 <timer1_init>
 22c:	b9 d1       	rcall	.+882    	; 0x5a0 <Reset_sensor_val>
 22e:	87 e6       	ldi	r24, 0x67	; 103
 230:	89 b9       	out	0x09, r24	; 9
 232:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 236:	1b b8       	out	0x0b, r1	; 11
 238:	88 e1       	ldi	r24, 0x18	; 24
 23a:	8a b9       	out	0x0a, r24	; 10
 23c:	87 e8       	ldi	r24, 0x87	; 135
 23e:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 242:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <shk_detected>
 246:	78 94       	sei
 248:	83 e0       	ldi	r24, 0x03	; 3
 24a:	3e df       	rcall	.-388    	; 0xc8 <Select_Item>
 24c:	d4 df       	rcall	.-88     	; 0x1f6 <port_setup>
 24e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <cds_sensor_val>
 252:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <cds_sensor_val+0x1>
 256:	85 36       	cpi	r24, 0x65	; 101
 258:	91 05       	cpc	r25, r1
 25a:	20 f0       	brcs	.+8      	; 0x264 <main+0x52>
 25c:	89 81       	ldd	r24, Y+1	; 0x01
 25e:	8e 7f       	andi	r24, 0xFE	; 254
 260:	89 83       	std	Y+1, r24	; 0x01
 262:	03 c0       	rjmp	.+6      	; 0x26a <main+0x58>
 264:	89 81       	ldd	r24, Y+1	; 0x01
 266:	81 60       	ori	r24, 0x01	; 1
 268:	89 83       	std	Y+1, r24	; 0x01
 26a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <temp_sensor_val>
 26e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <temp_sensor_val+0x1>
 272:	89 3c       	cpi	r24, 0xC9	; 201
 274:	91 05       	cpc	r25, r1
 276:	20 f0       	brcs	.+8      	; 0x280 <main+0x6e>
 278:	89 81       	ldd	r24, Y+1	; 0x01
 27a:	8d 7f       	andi	r24, 0xFD	; 253
 27c:	89 83       	std	Y+1, r24	; 0x01
 27e:	03 c0       	rjmp	.+6      	; 0x286 <main+0x74>
 280:	89 81       	ldd	r24, Y+1	; 0x01
 282:	82 60       	ori	r24, 0x02	; 2
 284:	89 83       	std	Y+1, r24	; 0x01
 286:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <pressure_sensor_val>
 28a:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <pressure_sensor_val+0x1>
 28e:	85 38       	cpi	r24, 0x85	; 133
 290:	93 40       	sbci	r25, 0x03	; 3
 292:	20 f0       	brcs	.+8      	; 0x29c <main+0x8a>
 294:	89 81       	ldd	r24, Y+1	; 0x01
 296:	8b 7f       	andi	r24, 0xFB	; 251
 298:	89 83       	std	Y+1, r24	; 0x01
 29a:	03 c0       	rjmp	.+6      	; 0x2a2 <main+0x90>
 29c:	89 81       	ldd	r24, Y+1	; 0x01
 29e:	84 60       	ori	r24, 0x04	; 4
 2a0:	89 83       	std	Y+1, r24	; 0x01
 2a2:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <shk_detected>
 2a6:	88 23       	and	r24, r24
 2a8:	21 f0       	breq	.+8      	; 0x2b2 <main+0xa0>
 2aa:	89 81       	ldd	r24, Y+1	; 0x01
 2ac:	87 7f       	andi	r24, 0xF7	; 247
 2ae:	89 83       	std	Y+1, r24	; 0x01
 2b0:	03 c0       	rjmp	.+6      	; 0x2b8 <main+0xa6>
 2b2:	89 81       	ldd	r24, Y+1	; 0x01
 2b4:	88 60       	ori	r24, 0x08	; 8
 2b6:	89 83       	std	Y+1, r24	; 0x01
 2b8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <fire_sensor_val>
 2bc:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <fire_sensor_val+0x1>
 2c0:	85 36       	cpi	r24, 0x65	; 101
 2c2:	91 05       	cpc	r25, r1
 2c4:	20 f0       	brcs	.+8      	; 0x2ce <main+0xbc>
 2c6:	89 81       	ldd	r24, Y+1	; 0x01
 2c8:	8f 7e       	andi	r24, 0xEF	; 239
 2ca:	89 83       	std	Y+1, r24	; 0x01
 2cc:	03 c0       	rjmp	.+6      	; 0x2d4 <main+0xc2>
 2ce:	89 81       	ldd	r24, Y+1	; 0x01
 2d0:	80 61       	ori	r24, 0x10	; 16
 2d2:	89 83       	std	Y+1, r24	; 0x01
 2d4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <psd_sensor_val>
 2d8:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <psd_sensor_val+0x1>
 2dc:	89 30       	cpi	r24, 0x09	; 9
 2de:	92 40       	sbci	r25, 0x02	; 2
 2e0:	20 f0       	brcs	.+8      	; 0x2ea <main+0xd8>
 2e2:	89 81       	ldd	r24, Y+1	; 0x01
 2e4:	8f 7b       	andi	r24, 0xBF	; 191
 2e6:	89 83       	std	Y+1, r24	; 0x01
 2e8:	03 c0       	rjmp	.+6      	; 0x2f0 <main+0xde>
 2ea:	89 81       	ldd	r24, Y+1	; 0x01
 2ec:	80 64       	ori	r24, 0x40	; 64
 2ee:	89 83       	std	Y+1, r24	; 0x01
 2f0:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <shk_sensor_val>
 2f4:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <shk_sensor_val+0x1>
 2f8:	f9 de       	rcall	.-526    	; 0xec <USART0_NUM>
 2fa:	8a e0       	ldi	r24, 0x0A	; 10
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	f2 de       	rcall	.-540    	; 0xe4 <__vector_20>
 300:	8d e0       	ldi	r24, 0x0D	; 13
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	ef de       	rcall	.-546    	; 0xe4 <__vector_20>
 306:	80 b3       	in	r24, 0x10	; 16
 308:	83 70       	andi	r24, 0x03	; 3
 30a:	81 30       	cpi	r24, 0x01	; 1
 30c:	19 f0       	breq	.+6      	; 0x314 <main+0x102>
 30e:	82 30       	cpi	r24, 0x02	; 2
 310:	89 f0       	breq	.+34     	; 0x334 <main+0x122>
 312:	1f c0       	rjmp	.+62     	; 0x352 <main+0x140>
 314:	82 e3       	ldi	r24, 0x32	; 50
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	97 bd       	out	0x27, r25	; 39
 31a:	86 bd       	out	0x26, r24	; 38
 31c:	26 b5       	in	r18, 0x26	; 38
 31e:	37 b5       	in	r19, 0x27	; 39
 320:	ad ec       	ldi	r26, 0xCD	; 205
 322:	bc ec       	ldi	r27, 0xCC	; 204
 324:	5c d1       	rcall	.+696    	; 0x5de <__umulhisi3>
 326:	96 95       	lsr	r25
 328:	87 95       	ror	r24
 32a:	96 95       	lsr	r25
 32c:	87 95       	ror	r24
 32e:	9b bd       	out	0x2b, r25	; 43
 330:	8a bd       	out	0x2a, r24	; 42
 332:	0f c0       	rjmp	.+30     	; 0x352 <main+0x140>
 334:	86 e4       	ldi	r24, 0x46	; 70
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	97 bd       	out	0x27, r25	; 39
 33a:	86 bd       	out	0x26, r24	; 38
 33c:	26 b5       	in	r18, 0x26	; 38
 33e:	37 b5       	in	r19, 0x27	; 39
 340:	ad ec       	ldi	r26, 0xCD	; 205
 342:	bc ec       	ldi	r27, 0xCC	; 204
 344:	4c d1       	rcall	.+664    	; 0x5de <__umulhisi3>
 346:	96 95       	lsr	r25
 348:	87 95       	ror	r24
 34a:	96 95       	lsr	r25
 34c:	87 95       	ror	r24
 34e:	9b bd       	out	0x2b, r25	; 43
 350:	8a bd       	out	0x2a, r24	; 42
 352:	89 81       	ldd	r24, Y+1	; 0x01
 354:	8b bb       	out	0x1b, r24	; 27
 356:	85 e0       	ldi	r24, 0x05	; 5
 358:	8a 95       	dec	r24
 35a:	f1 f7       	brne	.-4      	; 0x358 <main+0x146>
 35c:	00 00       	nop
 35e:	77 cf       	rjmp	.-274    	; 0x24e <main+0x3c>

00000360 <Is_Shock_Interrupt>:
}

void Is_Shock_Interrupt(){
	if(shk_sensor_val <= 900)
 360:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <shk_sensor_val>
 364:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <shk_sensor_val+0x1>
 368:	85 38       	cpi	r24, 0x85	; 133
 36a:	93 40       	sbci	r25, 0x03	; 3
 36c:	18 f4       	brcc	.+6      	; 0x374 <Is_Shock_Interrupt+0x14>
		shk_detected = 0x01;
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <shk_detected>
 374:	08 95       	ret

00000376 <Is_PSD_Interrupt>:
}

void Is_PSD_Interrupt(){
	if ( (psd_sensor_val> 520)) {
 376:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <psd_sensor_val>
 37a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <psd_sensor_val+0x1>
 37e:	89 30       	cpi	r24, 0x09	; 9
 380:	92 40       	sbci	r25, 0x02	; 2
 382:	18 f0       	brcs	.+6      	; 0x38a <Is_PSD_Interrupt+0x14>
		//PORTC |= 0x20; //0010 0000
		//PORTA &= 0xBF;
		Servo_Allowed = 0x00;
 384:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <Servo_Allowed>
 388:	08 95       	ret
	}
	else {
		//PORTC &= ~(0x20); //0100 0000
		//PORTA |= ~0xBF;
		Servo_Allowed = 0x01;
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <Servo_Allowed>
 390:	08 95       	ret

00000392 <__vector_16>:
void adc_init(void){
	ADMUX=(1<<REFS0); //외부 레퍼런스 접압을 기준 전압으로 선택, 우측정렬, 초기 입력핀은 0번
	ADCSRA=(1<<ADEN)|(0<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //ADC enable, ADC interrupt enable 분주비 128
}

ISR(TIMER0_OVF_vect){ //Use Timer0 for collecting sensor value
 392:	1f 92       	push	r1
 394:	0f 92       	push	r0
 396:	0f b6       	in	r0, 0x3f	; 63
 398:	0f 92       	push	r0
 39a:	11 24       	eor	r1, r1
 39c:	0b b6       	in	r0, 0x3b	; 59
 39e:	0f 92       	push	r0
 3a0:	2f 93       	push	r18
 3a2:	3f 93       	push	r19
 3a4:	4f 93       	push	r20
 3a6:	5f 93       	push	r21
 3a8:	6f 93       	push	r22
 3aa:	7f 93       	push	r23
 3ac:	8f 93       	push	r24
 3ae:	9f 93       	push	r25
 3b0:	af 93       	push	r26
 3b2:	bf 93       	push	r27
 3b4:	ef 93       	push	r30
 3b6:	ff 93       	push	r31
	static char idx = 0x01;
	
	switch(idx){
 3b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3bc:	84 30       	cpi	r24, 0x04	; 4
 3be:	b1 f0       	breq	.+44     	; 0x3ec <__vector_16+0x5a>
 3c0:	28 f4       	brcc	.+10     	; 0x3cc <__vector_16+0x3a>
 3c2:	81 30       	cpi	r24, 0x01	; 1
 3c4:	49 f0       	breq	.+18     	; 0x3d8 <__vector_16+0x46>
 3c6:	82 30       	cpi	r24, 0x02	; 2
 3c8:	61 f0       	breq	.+24     	; 0x3e2 <__vector_16+0x50>
 3ca:	25 c0       	rjmp	.+74     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3cc:	86 30       	cpi	r24, 0x06	; 6
 3ce:	c9 f0       	breq	.+50     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3d0:	90 f0       	brcs	.+36     	; 0x3f6 <__vector_16+0x64>
 3d2:	87 30       	cpi	r24, 0x07	; 7
 3d4:	d9 f0       	breq	.+54     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3d6:	1f c0       	rjmp	.+62     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
		case 0x01:
		Read_CDS();
 3d8:	89 d0       	rcall	.+274    	; 0x4ec <Read_CDS>
		idx=0x02;
 3da:	82 e0       	ldi	r24, 0x02	; 2
 3dc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
		
		case 0x02:
		
		Read_Thermister();
 3e0:	1a c0       	rjmp	.+52     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3e2:	c0 d0       	rcall	.+384    	; 0x564 <Read_Thermister>
		
		//Servo_Set_Speed();
		idx=0x04;
 3e4:	84 e0       	ldi	r24, 0x04	; 4
 3e6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
		
		case 0x04:
		
		Read_Pressure();
 3ea:	15 c0       	rjmp	.+42     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3ec:	ac d0       	rcall	.+344    	; 0x546 <Read_Pressure>
		idx=0x05;
 3ee:	85 e0       	ldi	r24, 0x05	; 5
 3f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
		
		case 0x05:
		
		Read_Shock();
 3f4:	10 c0       	rjmp	.+32     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3f6:	c5 d0       	rcall	.+394    	; 0x582 <Read_Shock>
		Is_Shock_Interrupt(); //Shock Interrupt를 걸까말까
 3f8:	b3 df       	rcall	.-154    	; 0x360 <Is_Shock_Interrupt>
		idx=0x06;
 3fa:	86 e0       	ldi	r24, 0x06	; 6
 3fc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		break;
 400:	0a c0       	rjmp	.+20     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
		
		case 0x06:
		
		Read_Fire();
 402:	83 d0       	rcall	.+262    	; 0x50a <Read_Fire>
		idx = 0x07;
 404:	87 e0       	ldi	r24, 0x07	; 7
 406:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
 40a:	05 c0       	rjmp	.+10     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
		
		case 0x07:
		
		Read_PSD();
 40c:	8d d0       	rcall	.+282    	; 0x528 <Read_PSD>
 40e:	b3 df       	rcall	.-154    	; 0x376 <Is_PSD_Interrupt>
		Is_PSD_Interrupt();
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		idx = 0x01;
 416:	87 b1       	in	r24, 0x07	; 7
 418:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
	}
	
	//ADC Mux 선택, ADC 시작 시키고 ISR 종료
	ADMUX = (ADMUX & 0x40) | (idx & 0x0F); //다음 센서 선택
 41c:	9f 70       	andi	r25, 0x0F	; 15
 41e:	80 74       	andi	r24, 0x40	; 64
 420:	89 2b       	or	r24, r25
 422:	87 b9       	out	0x07, r24	; 7
 424:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <cds_sensor_val>
	//ADCSRA |= (1 << ADSC); // ADC 변환 시작
	
	if (cds_sensor_val > 100) { //CDS
 428:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <cds_sensor_val+0x1>
 42c:	85 36       	cpi	r24, 0x65	; 101
 42e:	91 05       	cpc	r25, r1
 430:	20 f0       	brcs	.+8      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 432:	8b b3       	in	r24, 0x1b	; 27
 434:	8e 7f       	andi	r24, 0xFE	; 254
		PORTA &= 0xFE; //CDS에 해당하는 LED만 켜기 //1111 1110
 436:	8b bb       	out	0x1b, r24	; 27
 438:	03 c0       	rjmp	.+6      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 43a:	8b b3       	in	r24, 0x1b	; 27
 43c:	81 60       	ori	r24, 0x01	; 1
	}
	else {
		PORTA |= ~0xFE; //CDS에 해단하는 LED만 끄기
 43e:	8b bb       	out	0x1b, r24	; 27
 440:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <temp_sensor_val>
	}
	
	if (temp_sensor_val > 200) {
 444:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <temp_sensor_val+0x1>
 448:	89 3c       	cpi	r24, 0xC9	; 201
 44a:	91 05       	cpc	r25, r1
 44c:	20 f0       	brcs	.+8      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 44e:	8b b3       	in	r24, 0x1b	; 27
 450:	8d 7f       	andi	r24, 0xFD	; 253
		PORTA &= 0xFD; // 1111 1101
 452:	8b bb       	out	0x1b, r24	; 27
 454:	03 c0       	rjmp	.+6      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 456:	8b b3       	in	r24, 0x1b	; 27
 458:	82 60       	ori	r24, 0x02	; 2
	}
	else {
		PORTA |= ~0xFD;
 45a:	8b bb       	out	0x1b, r24	; 27
 45c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <pressure_sensor_val>
	}
	
	
	
	if (pressure_sensor_val > 900) {//보류 -
 460:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <pressure_sensor_val+0x1>
 464:	85 38       	cpi	r24, 0x85	; 133
 466:	93 40       	sbci	r25, 0x03	; 3
 468:	20 f0       	brcs	.+8      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 46a:	8b b3       	in	r24, 0x1b	; 27
 46c:	8b 7f       	andi	r24, 0xFB	; 251
		PORTA &= 0xFB; //1111 1011
 46e:	8b bb       	out	0x1b, r24	; 27
 470:	03 c0       	rjmp	.+6      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 472:	8b b3       	in	r24, 0x1b	; 27
 474:	84 60       	ori	r24, 0x04	; 4
	}
	else {
		PORTA |= ~0xFB;
 476:	8b bb       	out	0x1b, r24	; 27
 478:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <shk_detected>
	}
	
	if ( shk_detected) {
 47c:	88 23       	and	r24, r24
 47e:	21 f0       	breq	.+8      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 480:	8b b3       	in	r24, 0x1b	; 27
 482:	87 7f       	andi	r24, 0xF7	; 247
		PORTA &= 0xF7;
 484:	8b bb       	out	0x1b, r24	; 27
 486:	03 c0       	rjmp	.+6      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 488:	8b b3       	in	r24, 0x1b	; 27
 48a:	88 60       	ori	r24, 0x08	; 8
		//shk_detected = 0x00;
	}
	else {
		PORTA |= ~0xF7;
 48c:	8b bb       	out	0x1b, r24	; 27
 48e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <fire_sensor_val>
	}
	
	if (fire_sensor_val > 100) {//-
 492:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <fire_sensor_val+0x1>
 496:	85 36       	cpi	r24, 0x65	; 101
 498:	91 05       	cpc	r25, r1
 49a:	20 f0       	brcs	.+8      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 49c:	8b b3       	in	r24, 0x1b	; 27
 49e:	8f 7e       	andi	r24, 0xEF	; 239
		PORTA &= 0xEF;
 4a0:	8b bb       	out	0x1b, r24	; 27
 4a2:	03 c0       	rjmp	.+6      	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 4a4:	8b b3       	in	r24, 0x1b	; 27
 4a6:	80 61       	ori	r24, 0x10	; 16
	}
	else {
		PORTA |= ~0xEF;
 4a8:	8b bb       	out	0x1b, r24	; 27
 4aa:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <psd_sensor_val>
	}
	
	
	if ( (psd_sensor_val> 520)) {
 4ae:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <psd_sensor_val+0x1>
 4b2:	89 30       	cpi	r24, 0x09	; 9
 4b4:	92 40       	sbci	r25, 0x02	; 2
 4b6:	20 f0       	brcs	.+8      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 4b8:	8b b3       	in	r24, 0x1b	; 27
 4ba:	8f 7b       	andi	r24, 0xBF	; 191
		
		PORTA &= 0xBF;
 4bc:	8b bb       	out	0x1b, r24	; 27
 4be:	03 c0       	rjmp	.+6      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4c0:	8b b3       	in	r24, 0x1b	; 27
 4c2:	80 64       	ori	r24, 0x40	; 64
	}
	else {
		PORTA |= ~0xBF;
 4c4:	8b bb       	out	0x1b, r24	; 27
 4c6:	ff 91       	pop	r31
 4c8:	ef 91       	pop	r30
	}
}
 4ca:	bf 91       	pop	r27
 4cc:	af 91       	pop	r26
 4ce:	9f 91       	pop	r25
 4d0:	8f 91       	pop	r24
 4d2:	7f 91       	pop	r23
 4d4:	6f 91       	pop	r22
 4d6:	5f 91       	pop	r21
 4d8:	4f 91       	pop	r20
 4da:	3f 91       	pop	r19
 4dc:	2f 91       	pop	r18
 4de:	0f 90       	pop	r0
 4e0:	0b be       	out	0x3b, r0	; 59
 4e2:	0f 90       	pop	r0
 4e4:	0f be       	out	0x3f, r0	; 63
 4e6:	0f 90       	pop	r0
 4e8:	1f 90       	pop	r1
 4ea:	18 95       	reti

000004ec <Read_CDS>:
 4ec:	86 b1       	in	r24, 0x06	; 6
 4ee:	80 64       	ori	r24, 0x40	; 64
 4f0:	86 b9       	out	0x06, r24	; 6
 4f2:	34 9b       	sbis	0x06, 4	; 6
 4f4:	fe cf       	rjmp	.-4      	; 0x4f2 <Read_CDS+0x6>
 4f6:	86 b1       	in	r24, 0x06	; 6
 4f8:	80 61       	ori	r24, 0x10	; 16
 4fa:	86 b9       	out	0x06, r24	; 6
 4fc:	84 b1       	in	r24, 0x04	; 4
 4fe:	95 b1       	in	r25, 0x05	; 5
 500:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <cds_sensor_val+0x1>
 504:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <cds_sensor_val>
 508:	08 95       	ret

0000050a <Read_Fire>:
 50a:	86 b1       	in	r24, 0x06	; 6
 50c:	80 64       	ori	r24, 0x40	; 64
 50e:	86 b9       	out	0x06, r24	; 6
 510:	34 9b       	sbis	0x06, 4	; 6
 512:	fe cf       	rjmp	.-4      	; 0x510 <Read_Fire+0x6>
 514:	86 b1       	in	r24, 0x06	; 6
 516:	80 61       	ori	r24, 0x10	; 16
 518:	86 b9       	out	0x06, r24	; 6
 51a:	84 b1       	in	r24, 0x04	; 4
 51c:	95 b1       	in	r25, 0x05	; 5
 51e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <fire_sensor_val+0x1>
 522:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <fire_sensor_val>
 526:	08 95       	ret

00000528 <Read_PSD>:
 528:	86 b1       	in	r24, 0x06	; 6
 52a:	80 64       	ori	r24, 0x40	; 64
 52c:	86 b9       	out	0x06, r24	; 6
 52e:	34 9b       	sbis	0x06, 4	; 6
 530:	fe cf       	rjmp	.-4      	; 0x52e <Read_PSD+0x6>
 532:	86 b1       	in	r24, 0x06	; 6
 534:	80 61       	ori	r24, 0x10	; 16
 536:	86 b9       	out	0x06, r24	; 6
 538:	84 b1       	in	r24, 0x04	; 4
 53a:	95 b1       	in	r25, 0x05	; 5
 53c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <psd_sensor_val+0x1>
 540:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <psd_sensor_val>
 544:	08 95       	ret

00000546 <Read_Pressure>:
 546:	86 b1       	in	r24, 0x06	; 6
 548:	80 64       	ori	r24, 0x40	; 64
 54a:	86 b9       	out	0x06, r24	; 6
 54c:	34 9b       	sbis	0x06, 4	; 6
 54e:	fe cf       	rjmp	.-4      	; 0x54c <Read_Pressure+0x6>
 550:	86 b1       	in	r24, 0x06	; 6
 552:	80 61       	ori	r24, 0x10	; 16
 554:	86 b9       	out	0x06, r24	; 6
 556:	84 b1       	in	r24, 0x04	; 4
 558:	95 b1       	in	r25, 0x05	; 5
 55a:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <pressure_sensor_val+0x1>
 55e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <pressure_sensor_val>
 562:	08 95       	ret

00000564 <Read_Thermister>:
 564:	86 b1       	in	r24, 0x06	; 6
 566:	80 64       	ori	r24, 0x40	; 64
 568:	86 b9       	out	0x06, r24	; 6
 56a:	34 9b       	sbis	0x06, 4	; 6
 56c:	fe cf       	rjmp	.-4      	; 0x56a <Read_Thermister+0x6>
 56e:	86 b1       	in	r24, 0x06	; 6
 570:	80 61       	ori	r24, 0x10	; 16
 572:	86 b9       	out	0x06, r24	; 6
 574:	84 b1       	in	r24, 0x04	; 4
 576:	95 b1       	in	r25, 0x05	; 5
 578:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <temp_sensor_val+0x1>
 57c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <temp_sensor_val>
 580:	08 95       	ret

00000582 <Read_Shock>:
 582:	86 b1       	in	r24, 0x06	; 6
 584:	80 64       	ori	r24, 0x40	; 64
 586:	86 b9       	out	0x06, r24	; 6
 588:	34 9b       	sbis	0x06, 4	; 6
 58a:	fe cf       	rjmp	.-4      	; 0x588 <Read_Shock+0x6>
 58c:	86 b1       	in	r24, 0x06	; 6
 58e:	80 61       	ori	r24, 0x10	; 16
 590:	86 b9       	out	0x06, r24	; 6
 592:	84 b1       	in	r24, 0x04	; 4
 594:	95 b1       	in	r25, 0x05	; 5
 596:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <shk_sensor_val+0x1>
 59a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <shk_sensor_val>
 59e:	08 95       	ret

000005a0 <Reset_sensor_val>:
 5a0:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <pressure_sensor_val+0x1>
 5a4:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <pressure_sensor_val>
 5a8:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <cds_sensor_val+0x1>
 5ac:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <cds_sensor_val>
 5b0:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <temp_sensor_val+0x1>
 5b4:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <temp_sensor_val>
 5b8:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <temp_en+0x1>
 5bc:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <temp_en>
 5c0:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <shk_sensor_val+0x1>
 5c4:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <shk_sensor_val>
 5c8:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <shk_detected>
 5cc:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <psd_sensor_val+0x1>
 5d0:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <psd_sensor_val>
 5d4:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <fire_sensor_val+0x1>
 5d8:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <fire_sensor_val>
 5dc:	08 95       	ret

000005de <__umulhisi3>:
 5de:	a2 9f       	mul	r26, r18
 5e0:	b0 01       	movw	r22, r0
 5e2:	b3 9f       	mul	r27, r19
 5e4:	c0 01       	movw	r24, r0
 5e6:	a3 9f       	mul	r26, r19
 5e8:	70 0d       	add	r23, r0
 5ea:	81 1d       	adc	r24, r1
 5ec:	11 24       	eor	r1, r1
 5ee:	91 1d       	adc	r25, r1
 5f0:	b2 9f       	mul	r27, r18
 5f2:	70 0d       	add	r23, r0
 5f4:	81 1d       	adc	r24, r1
 5f6:	11 24       	eor	r1, r1
 5f8:	91 1d       	adc	r25, r1
 5fa:	08 95       	ret

000005fc <_exit>:
 5fc:	f8 94       	cli

000005fe <__stop_program>:
 5fe:	ff cf       	rjmp	.-2      	; 0x5fe <__stop_program>
