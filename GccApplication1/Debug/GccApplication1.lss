
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000096  00800100  00001cd2  00001d66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cd2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ba  00800196  00800196  00001dfc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001dfc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001e2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  00001e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000024ef  00000000  00000000  00002090  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f67  00000000  00000000  0000457f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013f7  00000000  00000000  000054e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005e4  00000000  00000000  000068e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008e4  00000000  00000000  00006ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cfb  00000000  00000000  000077a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  000084a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	86 c0       	rjmp	.+268    	; 0x10e <__ctors_end>
       2:	00 00       	nop
       4:	a2 c0       	rjmp	.+324    	; 0x14a <__bad_interrupt>
       6:	00 00       	nop
       8:	a0 c0       	rjmp	.+320    	; 0x14a <__bad_interrupt>
       a:	00 00       	nop
       c:	9e c0       	rjmp	.+316    	; 0x14a <__bad_interrupt>
       e:	00 00       	nop
      10:	9c c0       	rjmp	.+312    	; 0x14a <__bad_interrupt>
      12:	00 00       	nop
      14:	9a c0       	rjmp	.+308    	; 0x14a <__bad_interrupt>
      16:	00 00       	nop
      18:	98 c0       	rjmp	.+304    	; 0x14a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	96 c0       	rjmp	.+300    	; 0x14a <__bad_interrupt>
      1e:	00 00       	nop
      20:	94 c0       	rjmp	.+296    	; 0x14a <__bad_interrupt>
      22:	00 00       	nop
      24:	92 c0       	rjmp	.+292    	; 0x14a <__bad_interrupt>
      26:	00 00       	nop
      28:	42 c4       	rjmp	.+2180   	; 0x8ae <__vector_10>
      2a:	00 00       	nop
      2c:	8e c0       	rjmp	.+284    	; 0x14a <__bad_interrupt>
      2e:	00 00       	nop
      30:	8c c0       	rjmp	.+280    	; 0x14a <__bad_interrupt>
      32:	00 00       	nop
      34:	8a c0       	rjmp	.+276    	; 0x14a <__bad_interrupt>
      36:	00 00       	nop
      38:	ec c2       	rjmp	.+1496   	; 0x612 <__vector_14>
      3a:	00 00       	nop
      3c:	86 c0       	rjmp	.+268    	; 0x14a <__bad_interrupt>
      3e:	00 00       	nop
      40:	85 c2       	rjmp	.+1290   	; 0x54c <__vector_16>
      42:	00 00       	nop
      44:	82 c0       	rjmp	.+260    	; 0x14a <__bad_interrupt>
      46:	00 00       	nop
      48:	80 c0       	rjmp	.+256    	; 0x14a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7e c0       	rjmp	.+252    	; 0x14a <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 5f 0a 	jmp	0x14be	; 0x14be <__vector_20>
      54:	7a c0       	rjmp	.+244    	; 0x14a <__bad_interrupt>
      56:	00 00       	nop
      58:	78 c0       	rjmp	.+240    	; 0x14a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	76 c0       	rjmp	.+236    	; 0x14a <__bad_interrupt>
      5e:	00 00       	nop
      60:	74 c0       	rjmp	.+232    	; 0x14a <__bad_interrupt>
      62:	00 00       	nop
      64:	72 c0       	rjmp	.+228    	; 0x14a <__bad_interrupt>
      66:	00 00       	nop
      68:	70 c0       	rjmp	.+224    	; 0x14a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6e c0       	rjmp	.+220    	; 0x14a <__bad_interrupt>
      6e:	00 00       	nop
      70:	6c c0       	rjmp	.+216    	; 0x14a <__bad_interrupt>
      72:	00 00       	nop
      74:	6a c0       	rjmp	.+212    	; 0x14a <__bad_interrupt>
      76:	00 00       	nop
      78:	68 c0       	rjmp	.+208    	; 0x14a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	66 c0       	rjmp	.+204    	; 0x14a <__bad_interrupt>
      7e:	00 00       	nop
      80:	64 c0       	rjmp	.+200    	; 0x14a <__bad_interrupt>
      82:	00 00       	nop
      84:	62 c0       	rjmp	.+196    	; 0x14a <__bad_interrupt>
      86:	00 00       	nop
      88:	60 c0       	rjmp	.+192    	; 0x14a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	08 00       	.word	0x0008	; ????
      8e:	00 00       	nop
      90:	be 92       	st	-X, r11
      92:	24 49       	sbci	r18, 0x94	; 148
      94:	12 3e       	cpi	r17, 0xE2	; 226
      96:	ab aa       	std	Y+51, r10	; 0x33
      98:	aa 2a       	or	r10, r26
      9a:	be cd       	rjmp	.-1156   	; 0xfffffc18 <__eeprom_end+0xff7efc18>
      9c:	cc cc       	rjmp	.-1640   	; 0xfffffa36 <__eeprom_end+0xff7efa36>
      9e:	4c 3e       	cpi	r20, 0xEC	; 236
      a0:	00 00       	nop
      a2:	00 80       	ld	r0, Z
      a4:	be ab       	std	Y+54, r27	; 0x36
      a6:	aa aa       	std	Y+50, r10	; 0x32
      a8:	aa 3e       	cpi	r26, 0xEA	; 234
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	bf 00       	.word	0x00bf	; ????
      b0:	00 00       	nop
      b2:	80 3f       	cpi	r24, 0xF0	; 240
      b4:	00 00       	nop
      b6:	00 00       	nop
      b8:	00 08       	sbc	r0, r0
      ba:	41 78       	andi	r20, 0x81	; 129
      bc:	d3 bb       	out	0x13, r29	; 19
      be:	43 87       	std	Z+11, r20	; 0x0b
      c0:	d1 13       	cpse	r29, r17
      c2:	3d 19       	sub	r19, r13
      c4:	0e 3c       	cpi	r16, 0xCE	; 206
      c6:	c3 bd       	out	0x23, r28	; 35
      c8:	42 82       	std	Z+2, r4	; 0x02
      ca:	ad 2b       	or	r26, r29
      cc:	3e 68       	ori	r19, 0x8E	; 142
      ce:	ec 82       	std	Y+4, r14	; 0x04
      d0:	76 be       	out	0x36, r7	; 54
      d2:	d9 8f       	std	Y+25, r29	; 0x19
      d4:	e1 a9       	ldd	r30, Z+49	; 0x31
      d6:	3e 4c       	sbci	r19, 0xCE	; 206
      d8:	80 ef       	ldi	r24, 0xF0	; 240
      da:	ff be       	out	0x3f, r15	; 63
      dc:	01 c4       	rjmp	.+2050   	; 0x8e0 <__vector_10+0x32>
      de:	ff 7f       	andi	r31, 0xFF	; 255
      e0:	3f 00       	.word	0x003f	; ????
      e2:	00 00       	nop
      e4:	00 00       	nop
      e6:	07 63       	ori	r16, 0x37	; 55
      e8:	42 36       	cpi	r20, 0x62	; 98
      ea:	b7 9b       	sbis	0x16, 7	; 22
      ec:	d8 a7       	std	Y+40, r29	; 0x28
      ee:	1a 39       	cpi	r17, 0x9A	; 154
      f0:	68 56       	subi	r22, 0x68	; 104
      f2:	18 ae       	std	Y+56, r1	; 0x38
      f4:	ba ab       	std	Y+50, r27	; 0x32
      f6:	55 8c       	ldd	r5, Z+29	; 0x1d
      f8:	1d 3c       	cpi	r17, 0xCD	; 205
      fa:	b7 cc       	rjmp	.-1682   	; 0xfffffa6a <__eeprom_end+0xff7efa6a>
      fc:	57 63       	ori	r21, 0x37	; 55
      fe:	bd 6d       	ori	r27, 0xDD	; 221
     100:	ed fd       	.word	0xfded	; ????
     102:	75 3e       	cpi	r23, 0xE5	; 229
     104:	f6 17       	cp	r31, r22
     106:	72 31       	cpi	r23, 0x12	; 18
     108:	bf 00       	.word	0x00bf	; ????
     10a:	00 00       	nop
     10c:	80 3f       	cpi	r24, 0xF0	; 240

0000010e <__ctors_end>:
     10e:	11 24       	eor	r1, r1
     110:	1f be       	out	0x3f, r1	; 63
     112:	cf ef       	ldi	r28, 0xFF	; 255
     114:	d0 e1       	ldi	r29, 0x10	; 16
     116:	de bf       	out	0x3e, r29	; 62
     118:	cd bf       	out	0x3d, r28	; 61

0000011a <__do_copy_data>:
     11a:	11 e0       	ldi	r17, 0x01	; 1
     11c:	a0 e0       	ldi	r26, 0x00	; 0
     11e:	b1 e0       	ldi	r27, 0x01	; 1
     120:	e2 ed       	ldi	r30, 0xD2	; 210
     122:	fc e1       	ldi	r31, 0x1C	; 28
     124:	00 e0       	ldi	r16, 0x00	; 0
     126:	0b bf       	out	0x3b, r16	; 59
     128:	02 c0       	rjmp	.+4      	; 0x12e <__do_copy_data+0x14>
     12a:	07 90       	elpm	r0, Z+
     12c:	0d 92       	st	X+, r0
     12e:	a6 39       	cpi	r26, 0x96	; 150
     130:	b1 07       	cpc	r27, r17
     132:	d9 f7       	brne	.-10     	; 0x12a <__do_copy_data+0x10>

00000134 <__do_clear_bss>:
     134:	22 e0       	ldi	r18, 0x02	; 2
     136:	a6 e9       	ldi	r26, 0x96	; 150
     138:	b1 e0       	ldi	r27, 0x01	; 1
     13a:	01 c0       	rjmp	.+2      	; 0x13e <.do_clear_bss_start>

0000013c <.do_clear_bss_loop>:
     13c:	1d 92       	st	X+, r1

0000013e <.do_clear_bss_start>:
     13e:	a0 35       	cpi	r26, 0x50	; 80
     140:	b2 07       	cpc	r27, r18
     142:	e1 f7       	brne	.-8      	; 0x13c <.do_clear_bss_loop>
     144:	7e d2       	rcall	.+1276   	; 0x642 <main>
     146:	0c 94 67 0e 	jmp	0x1cce	; 0x1cce <_exit>

0000014a <__bad_interrupt>:
     14a:	5a cf       	rjmp	.-332    	; 0x0 <__vectors>

0000014c <init_BT>:
#include "Bluetooth.h"
#include "Marble.h"
#include <avr/io.h>

void init_BT(){
	UCSR1A = 0x00;
     14c:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
	UCSR1B = 0x18;
     150:	88 e1       	ldi	r24, 0x18	; 24
     152:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	UCSR1C = 0x06;
     156:	86 e0       	ldi	r24, 0x06	; 6
     158:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
	
	UBRR1H = 0x00;
     15c:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 103;
     160:	87 e6       	ldi	r24, 0x67	; 103
     162:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     166:	08 95       	ret

00000168 <BT_send>:
	return 0x00;
}

void BT_send(char msg){
	//send msg
	while(!(UCSR1A & (1<<UDRE))); //Wait for buffer to clear
     168:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     16c:	95 ff       	sbrs	r25, 5
     16e:	fc cf       	rjmp	.-8      	; 0x168 <BT_send>
	UDR1 = msg; //send msg
     170:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     174:	08 95       	ret

00000176 <BT_Receive>:
char BT_Receive(){
	
	static char step = 0;
	static char tmp = 0;
	
	if(!(UCSR1A&(1<<RXC1))) return 0x00;
     176:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     17a:	88 23       	and	r24, r24
     17c:	0c f0       	brlt	.+2      	; 0x180 <BT_Receive+0xa>
     17e:	83 c0       	rjmp	.+262    	; 0x286 <BT_Receive+0x110>
	
	rdata = UDR1;
     180:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     184:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <rdata>
	
	switch(step){
     188:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <__data_end>
     18c:	82 30       	cpi	r24, 0x02	; 2
     18e:	a9 f0       	breq	.+42     	; 0x1ba <BT_Receive+0x44>
     190:	83 30       	cpi	r24, 0x03	; 3
     192:	a1 f1       	breq	.+104    	; 0x1fc <BT_Receive+0x86>
     194:	81 30       	cpi	r24, 0x01	; 1
     196:	09 f0       	breq	.+2      	; 0x19a <BT_Receive+0x24>
     198:	51 c0       	rjmp	.+162    	; 0x23c <BT_Receive+0xc6>
		case 1:
		if(rdata == '.') {
     19a:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <rdata>
     19e:	8e 32       	cpi	r24, 0x2E	; 46
     1a0:	31 f4       	brne	.+12     	; 0x1ae <BT_Receive+0x38>
			step = 0;
     1a2:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <__data_end>
			BT_send(1);
     1a6:	81 e0       	ldi	r24, 0x01	; 1
     1a8:	df df       	rcall	.-66     	; 0x168 <BT_send>
			//ElectroMagnet_On();
			return 0x00;
     1aa:	80 e0       	ldi	r24, 0x00	; 0
     1ac:	08 95       	ret
		}
		else marble.color = rdata - '0';
     1ae:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <rdata>
     1b2:	80 53       	subi	r24, 0x30	; 48
     1b4:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <marble>
		break;
     1b8:	41 c0       	rjmp	.+130    	; 0x23c <BT_Receive+0xc6>
		
		case 2:
		if(rdata == '.') {
     1ba:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <rdata>
     1be:	8e 32       	cpi	r24, 0x2E	; 46
     1c0:	31 f4       	brne	.+12     	; 0x1ce <BT_Receive+0x58>
			step = 0;
     1c2:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <__data_end>
			BT_send(1);
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	cf df       	rcall	.-98     	; 0x168 <BT_send>
			//ElectroMagnet_On();
			return 0x00;
     1ca:	80 e0       	ldi	r24, 0x00	; 0
     1cc:	08 95       	ret
		}
		else marble.posX = marble.posX * 10 + rdata - '0';
     1ce:	ec e1       	ldi	r30, 0x1C	; 28
     1d0:	f2 e0       	ldi	r31, 0x02	; 2
     1d2:	81 81       	ldd	r24, Z+1	; 0x01
     1d4:	92 81       	ldd	r25, Z+2	; 0x02
     1d6:	9c 01       	movw	r18, r24
     1d8:	22 0f       	add	r18, r18
     1da:	33 1f       	adc	r19, r19
     1dc:	88 0f       	add	r24, r24
     1de:	99 1f       	adc	r25, r25
     1e0:	88 0f       	add	r24, r24
     1e2:	99 1f       	adc	r25, r25
     1e4:	88 0f       	add	r24, r24
     1e6:	99 1f       	adc	r25, r25
     1e8:	82 0f       	add	r24, r18
     1ea:	93 1f       	adc	r25, r19
     1ec:	20 91 1b 02 	lds	r18, 0x021B	; 0x80021b <rdata>
     1f0:	82 0f       	add	r24, r18
     1f2:	91 1d       	adc	r25, r1
     1f4:	c0 97       	sbiw	r24, 0x30	; 48
     1f6:	92 83       	std	Z+2, r25	; 0x02
     1f8:	81 83       	std	Z+1, r24	; 0x01
		break;
     1fa:	20 c0       	rjmp	.+64     	; 0x23c <BT_Receive+0xc6>
		
		case 3:
		if(rdata == '.') {
     1fc:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <rdata>
     200:	8e 32       	cpi	r24, 0x2E	; 46
     202:	31 f4       	brne	.+12     	; 0x210 <BT_Receive+0x9a>
			step = 0;
     204:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <__data_end>
			BT_send(1);
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	ae df       	rcall	.-164    	; 0x168 <BT_send>
			//ElectroMagnet_Off();
			return 0x01;
     20c:	81 e0       	ldi	r24, 0x01	; 1
     20e:	08 95       	ret
		}
		else marble.posY = marble.posY * 10 + rdata -'0';
     210:	ec e1       	ldi	r30, 0x1C	; 28
     212:	f2 e0       	ldi	r31, 0x02	; 2
     214:	83 81       	ldd	r24, Z+3	; 0x03
     216:	94 81       	ldd	r25, Z+4	; 0x04
     218:	9c 01       	movw	r18, r24
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	88 0f       	add	r24, r24
     220:	99 1f       	adc	r25, r25
     222:	88 0f       	add	r24, r24
     224:	99 1f       	adc	r25, r25
     226:	88 0f       	add	r24, r24
     228:	99 1f       	adc	r25, r25
     22a:	82 0f       	add	r24, r18
     22c:	93 1f       	adc	r25, r19
     22e:	20 91 1b 02 	lds	r18, 0x021B	; 0x80021b <rdata>
     232:	82 0f       	add	r24, r18
     234:	91 1d       	adc	r25, r1
     236:	c0 97       	sbiw	r24, 0x30	; 48
     238:	94 83       	std	Z+4, r25	; 0x04
     23a:	83 83       	std	Z+3, r24	; 0x03
		break;
	}
	
	if(rdata == '#') {
     23c:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <rdata>
     240:	83 32       	cpi	r24, 0x23	; 35
     242:	31 f4       	brne	.+12     	; 0x250 <BT_Receive+0xda>
		marble.color = 0;
     244:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <marble>
		step = 1;
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <__data_end>
     24e:	17 c0       	rjmp	.+46     	; 0x27e <BT_Receive+0x108>
	}
	else if(rdata == '!'){
     250:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <rdata>
     254:	81 32       	cpi	r24, 0x21	; 33
     256:	41 f4       	brne	.+16     	; 0x268 <BT_Receive+0xf2>
		marble.posX = 0;
     258:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <marble+0x2>
     25c:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <marble+0x1>
		step = 2;
     260:	82 e0       	ldi	r24, 0x02	; 2
     262:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <__data_end>
     266:	0b c0       	rjmp	.+22     	; 0x27e <BT_Receive+0x108>
	}
	else if(rdata == '*'){
     268:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <rdata>
     26c:	8a 32       	cpi	r24, 0x2A	; 42
     26e:	39 f4       	brne	.+14     	; 0x27e <BT_Receive+0x108>
		marble.posY = 0;
     270:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <marble+0x4>
     274:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <marble+0x3>
		step = 3;
     278:	83 e0       	ldi	r24, 0x03	; 3
     27a:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <__data_end>
	}
	
	BT_send(1);
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	73 df       	rcall	.-282    	; 0x168 <BT_send>

	return 0x00;
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	08 95       	ret
char BT_Receive(){
	
	static char step = 0;
	static char tmp = 0;
	
	if(!(UCSR1A&(1<<RXC1))) return 0x00;
     286:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	BT_send(1);

	return 0x00;
}
     288:	08 95       	ret

0000028a <Select_Item>:
	ICR1 = key;
	OCR1A = ICR1 / 2;
	Select_Item(ITEM_SPEAKER);
}
void Buzzer_off(){
	Select_Item(ITEM_NONE);
     28a:	95 b3       	in	r25, 0x15	; 21
     28c:	90 7f       	andi	r25, 0xF0	; 240
     28e:	89 2b       	or	r24, r25
     290:	85 bb       	out	0x15, r24	; 21
     292:	2f ef       	ldi	r18, 0xFF	; 255
     294:	81 ee       	ldi	r24, 0xE1	; 225
     296:	94 e0       	ldi	r25, 0x04	; 4
     298:	21 50       	subi	r18, 0x01	; 1
     29a:	80 40       	sbci	r24, 0x00	; 0
     29c:	90 40       	sbci	r25, 0x00	; 0
     29e:	e1 f7       	brne	.-8      	; 0x298 <Select_Item+0xe>
     2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <Select_Item+0x18>
     2a2:	00 00       	nop
     2a4:	08 95       	ret

000002a6 <Calculate_Servo_Rotate_Angle>:
     2a6:	2b e0       	ldi	r18, 0x0B	; 11
     2a8:	30 e0       	ldi	r19, 0x00	; 0
     2aa:	14 c0       	rjmp	.+40     	; 0x2d4 <Calculate_Servo_Rotate_Angle+0x2e>
     2ac:	f9 01       	movw	r30, r18
     2ae:	ee 0f       	add	r30, r30
     2b0:	ff 1f       	adc	r31, r31
     2b2:	e8 5e       	subi	r30, 0xE8	; 232
     2b4:	fe 4f       	sbci	r31, 0xFE	; 254
     2b6:	40 81       	ld	r20, Z
     2b8:	51 81       	ldd	r21, Z+1	; 0x01
     2ba:	48 17       	cp	r20, r24
     2bc:	59 07       	cpc	r21, r25
     2be:	44 f4       	brge	.+16     	; 0x2d0 <Calculate_Servo_Rotate_Angle+0x2a>
     2c0:	22 0f       	add	r18, r18
     2c2:	33 1f       	adc	r19, r19
     2c4:	f9 01       	movw	r30, r18
     2c6:	e0 50       	subi	r30, 0x00	; 0
     2c8:	ff 4f       	sbci	r31, 0xFF	; 255
     2ca:	80 81       	ld	r24, Z
     2cc:	91 81       	ldd	r25, Z+1	; 0x01
     2ce:	08 95       	ret
     2d0:	21 50       	subi	r18, 0x01	; 1
     2d2:	31 09       	sbc	r19, r1
     2d4:	33 23       	and	r19, r19
     2d6:	54 f7       	brge	.-44     	; 0x2ac <Calculate_Servo_Rotate_Angle+0x6>
     2d8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__DATA_REGION_ORIGIN__+0x16>
     2dc:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__DATA_REGION_ORIGIN__+0x17>
     2e0:	08 95       	ret

000002e2 <Servo_Act>:
     2e2:	40 e0       	ldi	r20, 0x00	; 0
     2e4:	50 e0       	ldi	r21, 0x00	; 0
     2e6:	21 c0       	rjmp	.+66     	; 0x32a <Servo_Act+0x48>
     2e8:	20 91 37 02 	lds	r18, 0x0237	; 0x800237 <Servo_Allowed>
     2ec:	22 23       	and	r18, r18
     2ee:	b9 f0       	breq	.+46     	; 0x31e <Servo_Act+0x3c>
     2f0:	4f 5f       	subi	r20, 0xFF	; 255
     2f2:	5f 4f       	sbci	r21, 0xFF	; 255
     2f4:	20 91 42 02 	lds	r18, 0x0242	; 0x800242 <Servo_increment_threshold>
     2f8:	30 91 43 02 	lds	r19, 0x0243	; 0x800243 <Servo_increment_threshold+0x1>
     2fc:	42 17       	cp	r20, r18
     2fe:	53 07       	cpc	r21, r19
     300:	70 f0       	brcs	.+28     	; 0x31e <Servo_Act+0x3c>
     302:	20 91 47 02 	lds	r18, 0x0247	; 0x800247 <Servo_step>
     306:	30 91 48 02 	lds	r19, 0x0248	; 0x800248 <Servo_step+0x1>
     30a:	82 0f       	add	r24, r18
     30c:	93 1f       	adc	r25, r19
     30e:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <Servo_pos+0x1>
     312:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <Servo_pos>
     316:	9b bd       	out	0x2b, r25	; 43
     318:	8a bd       	out	0x2a, r24	; 42
     31a:	40 e0       	ldi	r20, 0x00	; 0
     31c:	50 e0       	ldi	r21, 0x00	; 0
     31e:	8f e8       	ldi	r24, 0x8F	; 143
     320:	91 e0       	ldi	r25, 0x01	; 1
     322:	01 97       	sbiw	r24, 0x01	; 1
     324:	f1 f7       	brne	.-4      	; 0x322 <Servo_Act+0x40>
     326:	00 c0       	rjmp	.+0      	; 0x328 <Servo_Act+0x46>
     328:	00 00       	nop
     32a:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <Servo_pos>
     32e:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <Servo_pos+0x1>
     332:	20 91 33 02 	lds	r18, 0x0233	; 0x800233 <Servo_target>
     336:	30 91 34 02 	lds	r19, 0x0234	; 0x800234 <Servo_target+0x1>
     33a:	82 17       	cp	r24, r18
     33c:	93 07       	cpc	r25, r19
     33e:	21 f0       	breq	.+8      	; 0x348 <Servo_Act+0x66>
     340:	20 91 4b 02 	lds	r18, 0x024B	; 0x80024b <Fire_Detected>
     344:	22 23       	and	r18, r18
     346:	81 f2       	breq	.-96     	; 0x2e8 <Servo_Act+0x6>
     348:	08 95       	ret

0000034a <Servo_Go_Home>:
     34a:	83 e0       	ldi	r24, 0x03	; 3
     34c:	9e df       	rcall	.-196    	; 0x28a <Select_Item>
     34e:	87 e8       	ldi	r24, 0x87	; 135
     350:	93 e1       	ldi	r25, 0x13	; 19
     352:	97 bd       	out	0x27, r25	; 39
     354:	86 bd       	out	0x26, r24	; 38
     356:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <Servo_pos>
     35a:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <Servo_pos+0x1>
     35e:	9b bd       	out	0x2b, r25	; 43
     360:	8a bd       	out	0x2a, r24	; 42
     362:	8c e6       	ldi	r24, 0x6C	; 108
     364:	92 e0       	ldi	r25, 0x02	; 2
     366:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <Servo_target+0x1>
     36a:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <Servo_target>
     36e:	20 91 3e 02 	lds	r18, 0x023E	; 0x80023e <Servo_pos>
     372:	30 91 3f 02 	lds	r19, 0x023F	; 0x80023f <Servo_pos+0x1>
     376:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <Servo_target>
     37a:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <Servo_target+0x1>
     37e:	28 17       	cp	r18, r24
     380:	39 07       	cpc	r19, r25
     382:	38 f0       	brcs	.+14     	; 0x392 <Servo_Go_Home+0x48>
     384:	8f ef       	ldi	r24, 0xFF	; 255
     386:	9f ef       	ldi	r25, 0xFF	; 255
     388:	90 93 48 02 	sts	0x0248, r25	; 0x800248 <Servo_step+0x1>
     38c:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <Servo_step>
     390:	06 c0       	rjmp	.+12     	; 0x39e <Servo_Go_Home+0x54>
     392:	81 e0       	ldi	r24, 0x01	; 1
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	90 93 48 02 	sts	0x0248, r25	; 0x800248 <Servo_step+0x1>
     39a:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <Servo_step>
     39e:	82 e0       	ldi	r24, 0x02	; 2
     3a0:	74 df       	rcall	.-280    	; 0x28a <Select_Item>
     3a2:	9f cf       	rjmp	.-194    	; 0x2e2 <Servo_Act>
     3a4:	08 95       	ret

000003a6 <Servo_Go_Box>:
     3a6:	83 e0       	ldi	r24, 0x03	; 3
     3a8:	70 df       	rcall	.-288    	; 0x28a <Select_Item>
     3aa:	87 e8       	ldi	r24, 0x87	; 135
     3ac:	93 e1       	ldi	r25, 0x13	; 19
     3ae:	97 bd       	out	0x27, r25	; 39
     3b0:	86 bd       	out	0x26, r24	; 38
     3b2:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <Servo_pos>
     3b6:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <Servo_pos+0x1>
     3ba:	9b bd       	out	0x2b, r25	; 43
     3bc:	8a bd       	out	0x2a, r24	; 42
     3be:	82 e8       	ldi	r24, 0x82	; 130
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <Servo_target+0x1>
     3c6:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <Servo_target>
     3ca:	20 91 3e 02 	lds	r18, 0x023E	; 0x80023e <Servo_pos>
     3ce:	30 91 3f 02 	lds	r19, 0x023F	; 0x80023f <Servo_pos+0x1>
     3d2:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <Servo_target>
     3d6:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <Servo_target+0x1>
     3da:	28 17       	cp	r18, r24
     3dc:	39 07       	cpc	r19, r25
     3de:	38 f0       	brcs	.+14     	; 0x3ee <Servo_Go_Box+0x48>
     3e0:	8f ef       	ldi	r24, 0xFF	; 255
     3e2:	9f ef       	ldi	r25, 0xFF	; 255
     3e4:	90 93 48 02 	sts	0x0248, r25	; 0x800248 <Servo_step+0x1>
     3e8:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <Servo_step>
     3ec:	06 c0       	rjmp	.+12     	; 0x3fa <Servo_Go_Box+0x54>
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	90 93 48 02 	sts	0x0248, r25	; 0x800248 <Servo_step+0x1>
     3f6:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <Servo_step>
     3fa:	82 e0       	ldi	r24, 0x02	; 2
     3fc:	46 df       	rcall	.-372    	; 0x28a <Select_Item>
     3fe:	71 cf       	rjmp	.-286    	; 0x2e2 <Servo_Act>
     400:	08 95       	ret

00000402 <Servo_Goto>:
     402:	cf 93       	push	r28
     404:	df 93       	push	r29
     406:	ec 01       	movw	r28, r24
     408:	83 e0       	ldi	r24, 0x03	; 3
     40a:	3f df       	rcall	.-386    	; 0x28a <Select_Item>
     40c:	87 e8       	ldi	r24, 0x87	; 135
     40e:	93 e1       	ldi	r25, 0x13	; 19
     410:	97 bd       	out	0x27, r25	; 39
     412:	86 bd       	out	0x26, r24	; 38
     414:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <Servo_pos>
     418:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <Servo_pos+0x1>
     41c:	9b bd       	out	0x2b, r25	; 43
     41e:	8a bd       	out	0x2a, r24	; 42
     420:	d0 93 34 02 	sts	0x0234, r29	; 0x800234 <Servo_target+0x1>
     424:	c0 93 33 02 	sts	0x0233, r28	; 0x800233 <Servo_target>
     428:	20 91 3e 02 	lds	r18, 0x023E	; 0x80023e <Servo_pos>
     42c:	30 91 3f 02 	lds	r19, 0x023F	; 0x80023f <Servo_pos+0x1>
     430:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <Servo_target>
     434:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <Servo_target+0x1>
     438:	28 17       	cp	r18, r24
     43a:	39 07       	cpc	r19, r25
     43c:	38 f0       	brcs	.+14     	; 0x44c <Servo_Goto+0x4a>
     43e:	8f ef       	ldi	r24, 0xFF	; 255
     440:	9f ef       	ldi	r25, 0xFF	; 255
     442:	90 93 48 02 	sts	0x0248, r25	; 0x800248 <Servo_step+0x1>
     446:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <Servo_step>
     44a:	06 c0       	rjmp	.+12     	; 0x458 <Servo_Goto+0x56>
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	90 93 48 02 	sts	0x0248, r25	; 0x800248 <Servo_step+0x1>
     454:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <Servo_step>
     458:	82 e0       	ldi	r24, 0x02	; 2
     45a:	17 df       	rcall	.-466    	; 0x28a <Select_Item>
     45c:	42 df       	rcall	.-380    	; 0x2e2 <Servo_Act>
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28
     462:	08 95       	ret

00000464 <Servo_Set_Speed>:
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <Servo_increment_threshold+0x1>
     46a:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <Servo_increment_threshold>
     46e:	08 95       	ret

00000470 <RED_LED_On>:
     470:	cf 93       	push	r28
     472:	df 93       	push	r29
     474:	ec 01       	movw	r28, r24
     476:	83 e0       	ldi	r24, 0x03	; 3
     478:	08 df       	rcall	.-496    	; 0x28a <Select_Item>
     47a:	87 e8       	ldi	r24, 0x87	; 135
     47c:	93 e1       	ldi	r25, 0x13	; 19
     47e:	97 bd       	out	0x27, r25	; 39
     480:	86 bd       	out	0x26, r24	; 38
     482:	db bd       	out	0x2b, r29	; 43
     484:	ca bd       	out	0x2a, r28	; 42
     486:	85 e0       	ldi	r24, 0x05	; 5
     488:	00 df       	rcall	.-512    	; 0x28a <Select_Item>
     48a:	df 91       	pop	r29
     48c:	cf 91       	pop	r28
     48e:	08 95       	ret

00000490 <GREEN_LED_On>:
     490:	cf 93       	push	r28
     492:	df 93       	push	r29
     494:	ec 01       	movw	r28, r24
     496:	83 e0       	ldi	r24, 0x03	; 3
     498:	f8 de       	rcall	.-528    	; 0x28a <Select_Item>
     49a:	87 e8       	ldi	r24, 0x87	; 135
     49c:	93 e1       	ldi	r25, 0x13	; 19
     49e:	97 bd       	out	0x27, r25	; 39
     4a0:	86 bd       	out	0x26, r24	; 38
     4a2:	db bd       	out	0x2b, r29	; 43
     4a4:	ca bd       	out	0x2a, r28	; 42
     4a6:	8d e0       	ldi	r24, 0x0D	; 13
     4a8:	f0 de       	rcall	.-544    	; 0x28a <Select_Item>
     4aa:	df 91       	pop	r29
     4ac:	cf 91       	pop	r28
     4ae:	08 95       	ret

000004b0 <BLUE_LED_On>:
     4b0:	cf 93       	push	r28
     4b2:	df 93       	push	r29
     4b4:	ec 01       	movw	r28, r24
     4b6:	83 e0       	ldi	r24, 0x03	; 3
     4b8:	e8 de       	rcall	.-560    	; 0x28a <Select_Item>
     4ba:	87 e8       	ldi	r24, 0x87	; 135
     4bc:	93 e1       	ldi	r25, 0x13	; 19
     4be:	97 bd       	out	0x27, r25	; 39
     4c0:	86 bd       	out	0x26, r24	; 38
     4c2:	db bd       	out	0x2b, r29	; 43
     4c4:	ca bd       	out	0x2a, r28	; 42
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	e0 de       	rcall	.-576    	; 0x28a <Select_Item>
     4ca:	df 91       	pop	r29
     4cc:	cf 91       	pop	r28
     4ce:	08 95       	ret

000004d0 <Buzzer_on>:
     4d0:	cf 93       	push	r28
     4d2:	df 93       	push	r29
     4d4:	ec 01       	movw	r28, r24
     4d6:	83 e0       	ldi	r24, 0x03	; 3
     4d8:	d8 de       	rcall	.-592    	; 0x28a <Select_Item>
     4da:	d7 bd       	out	0x27, r29	; 39
     4dc:	c6 bd       	out	0x26, r28	; 38
     4de:	86 b5       	in	r24, 0x26	; 38
     4e0:	97 b5       	in	r25, 0x27	; 39
     4e2:	96 95       	lsr	r25
     4e4:	87 95       	ror	r24
     4e6:	9b bd       	out	0x2b, r25	; 43
     4e8:	8a bd       	out	0x2a, r24	; 42
     4ea:	8e e0       	ldi	r24, 0x0E	; 14
     4ec:	ce de       	rcall	.-612    	; 0x28a <Select_Item>
     4ee:	df 91       	pop	r29
     4f0:	cf 91       	pop	r28
     4f2:	08 95       	ret

000004f4 <segment>:



//=========== 7 Segment =======//
void segment(char prox){
	PORTC = (PORTC & 0x0F) | prox;
     4f4:	95 b3       	in	r25, 0x15	; 21
     4f6:	9f 70       	andi	r25, 0x0F	; 15
     4f8:	89 2b       	or	r24, r25
     4fa:	85 bb       	out	0x15, r24	; 21
     4fc:	08 95       	ret

000004fe <timer0_init>:
//************************************************************************************************************************************************************//

void timer0_init(void) {
	//TCCR0 |= (1 << CS02) |(1<<CS01)| (1 << CS00); // 분주비 1024
	
	TCCR0 |= (1<<CS01) | (1 << CS00);
     4fe:	83 b7       	in	r24, 0x33	; 51
     500:	83 60       	ori	r24, 0x03	; 3
     502:	83 bf       	out	0x33, r24	; 51
	
	TIMSK |= (1 << TOIE0); // 타이머0 오버플로우 인터럽트 허용
     504:	87 b7       	in	r24, 0x37	; 55
     506:	81 60       	ori	r24, 0x01	; 1
     508:	87 bf       	out	0x37, r24	; 55
	TCNT0 = 0; // 타이머 카운터 초기화
     50a:	12 be       	out	0x32, r1	; 50
     50c:	08 95       	ret

0000050e <timer2_init>:
}
void timer2_init(void) {
	//TCCR0 |= (1 << CS02) |(1<<CS01)| (1 << CS00); // 분주비 1024
	
	TCCR2 |= (1<<CS02) | (1 << CS00);
     50e:	85 b5       	in	r24, 0x25	; 37
     510:	85 60       	ori	r24, 0x05	; 5
     512:	85 bd       	out	0x25, r24	; 37
	
	TIMSK |= (1 << TOIE2); // 타이머0 오버플로우 인터럽트 허용
     514:	87 b7       	in	r24, 0x37	; 55
     516:	80 64       	ori	r24, 0x40	; 64
     518:	87 bf       	out	0x37, r24	; 55
	TCNT2 = 0; // 타이머 카운터 초기화
     51a:	14 bc       	out	0x24, r1	; 36
     51c:	08 95       	ret

0000051e <timer1_init>:
}

void timer1_init(){
	TCCR1A=0x82;
     51e:	82 e8       	ldi	r24, 0x82	; 130
     520:	8f bd       	out	0x2f, r24	; 47
	TCCR1B=0x1b;
     522:	8b e1       	ldi	r24, 0x1B	; 27
     524:	8e bd       	out	0x2e, r24	; 46
	//TIMSK |= (1 << TOIE1); //타이머1 오버플로우 인터럽트 허용

	ICR1=4999;     //TOP
     526:	87 e8       	ldi	r24, 0x87	; 135
     528:	93 e1       	ldi	r25, 0x13	; 19
     52a:	97 bd       	out	0x27, r25	; 39
     52c:	86 bd       	out	0x26, r24	; 38
     52e:	08 95       	ret

00000530 <port_setup>:
}

void port_setup(){
	DDRA = 0xFF;
     530:	8f ef       	ldi	r24, 0xFF	; 255
     532:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0x00;
     534:	11 ba       	out	0x11, r1	; 17
	DDRB = 0xFF;
     536:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xFF;
     538:	84 bb       	out	0x14, r24	; 20
	DDRF = 0x00;
     53a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRE = 0xFF;
     53e:	82 b9       	out	0x02, r24	; 2
     540:	08 95       	ret

00000542 <adc_init>:
}

//ADC 입력
//ADC 초기화
void adc_init(void){
	ADMUX=(1<<REFS0); //외부 레퍼런스 접압을 기준 전압으로 선택, 우측정렬, 초기 입력핀은 0번
     542:	80 e4       	ldi	r24, 0x40	; 64
     544:	87 b9       	out	0x07, r24	; 7
	ADCSRA=(1<<ADEN)|(0<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //ADC enable, ADC interrupt enable 분주비 128
     546:	87 e8       	ldi	r24, 0x87	; 135
     548:	86 b9       	out	0x06, r24	; 6
     54a:	08 95       	ret

0000054c <__vector_16>:
	else {
		PORTA |= ~0xBF;
	}
}

ISR(TIMER0_OVF_vect){ //Use Timer0 for collecting sensor value
     54c:	1f 92       	push	r1
     54e:	0f 92       	push	r0
     550:	0f b6       	in	r0, 0x3f	; 63
     552:	0f 92       	push	r0
     554:	11 24       	eor	r1, r1
     556:	0b b6       	in	r0, 0x3b	; 59
     558:	0f 92       	push	r0
     55a:	2f 93       	push	r18
     55c:	3f 93       	push	r19
     55e:	4f 93       	push	r20
     560:	5f 93       	push	r21
     562:	6f 93       	push	r22
     564:	7f 93       	push	r23
     566:	8f 93       	push	r24
     568:	9f 93       	push	r25
     56a:	af 93       	push	r26
     56c:	bf 93       	push	r27
     56e:	ef 93       	push	r30
     570:	ff 93       	push	r31
	static char idx = 0x01;
	
	switch(idx){
     572:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <idx.2010>
     576:	84 30       	cpi	r24, 0x04	; 4
     578:	b1 f0       	breq	.+44     	; 0x5a6 <__vector_16+0x5a>
     57a:	28 f4       	brcc	.+10     	; 0x586 <__vector_16+0x3a>
     57c:	81 30       	cpi	r24, 0x01	; 1
     57e:	49 f0       	breq	.+18     	; 0x592 <__vector_16+0x46>
     580:	82 30       	cpi	r24, 0x02	; 2
     582:	61 f0       	breq	.+24     	; 0x59c <__vector_16+0x50>
     584:	23 c0       	rjmp	.+70     	; 0x5cc <__vector_16+0x80>
     586:	86 30       	cpi	r24, 0x06	; 6
     588:	c1 f0       	breq	.+48     	; 0x5ba <__vector_16+0x6e>
     58a:	90 f0       	brcs	.+36     	; 0x5b0 <__vector_16+0x64>
     58c:	87 30       	cpi	r24, 0x07	; 7
     58e:	d1 f0       	breq	.+52     	; 0x5c4 <__vector_16+0x78>
     590:	1d c0       	rjmp	.+58     	; 0x5cc <__vector_16+0x80>
		case 0x01:
			Read_CDS();
     592:	be d1       	rcall	.+892    	; 0x910 <Read_CDS>
			//USART0_NUM(cds_sensor_val);
			idx=0x02;
     594:	82 e0       	ldi	r24, 0x02	; 2
     596:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <idx.2010>
		break;
		
		case 0x02:
			Read_Thermister();
     59a:	18 c0       	rjmp	.+48     	; 0x5cc <__vector_16+0x80>
     59c:	22 d5       	rcall	.+2628   	; 0xfe2 <Read_Thermister>
			//USART0_NUM(temp_sensor_val);
			idx=0x04;
     59e:	84 e0       	ldi	r24, 0x04	; 4
     5a0:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <idx.2010>
		break;
		
		case 0x04:
			Read_Pressure();
     5a4:	13 c0       	rjmp	.+38     	; 0x5cc <__vector_16+0x80>
     5a6:	88 d4       	rcall	.+2320   	; 0xeb8 <Read_Pressure>
			//USART0_NUM(pressure_sensor_val);
			idx=0x05;
     5a8:	85 e0       	ldi	r24, 0x05	; 5
     5aa:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <idx.2010>
		break;
		
		case 0x05:
			Read_Shock();
     5ae:	0e c0       	rjmp	.+28     	; 0x5cc <__vector_16+0x80>
     5b0:	48 d5       	rcall	.+2704   	; 0x1042 <Read_Shock>
			//USART0_NUM(shk_sensor_val);
			idx=0x06;
     5b2:	86 e0       	ldi	r24, 0x06	; 6
     5b4:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <idx.2010>
		break;
		
		case 0x06:
			Read_Fire();
     5b8:	09 c0       	rjmp	.+18     	; 0x5cc <__vector_16+0x80>
			//USART0_NUM(fire_sensor_val);
			idx = 0x07;
     5ba:	cb d2       	rcall	.+1430   	; 0xb52 <Read_Fire>
     5bc:	87 e0       	ldi	r24, 0x07	; 7
     5be:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <idx.2010>
		break;
		
		case 0x07:
			Read_PSD(); //Filtering Done
     5c2:	04 c0       	rjmp	.+8      	; 0x5cc <__vector_16+0x80>
     5c4:	5e d3       	rcall	.+1724   	; 0xc82 <Read_PSD>
			//USART0_NUM(psd_sensor_val);
			idx = 0x01;
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <idx.2010>
		break;
		
	}
	
	//ADC Mux 선택, ADC 시작 시키고 ISR 종료
	ADMUX = (ADMUX & 0x40) | (idx & 0x0F); //다음 센서 선택
     5cc:	87 b1       	in	r24, 0x07	; 7
     5ce:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <idx.2010>
     5d2:	9f 70       	andi	r25, 0x0F	; 15
     5d4:	80 74       	andi	r24, 0x40	; 64
     5d6:	89 2b       	or	r24, r25
     5d8:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC); // ADC 변환 시작
     5da:	86 b1       	in	r24, 0x06	; 6
     5dc:	80 64       	ori	r24, 0x40	; 64
     5de:	86 b9       	out	0x06, r24	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5e0:	8f e8       	ldi	r24, 0x8F	; 143
     5e2:	91 e0       	ldi	r25, 0x01	; 1
     5e4:	01 97       	sbiw	r24, 0x01	; 1
     5e6:	f1 f7       	brne	.-4      	; 0x5e4 <__vector_16+0x98>
     5e8:	00 c0       	rjmp	.+0      	; 0x5ea <__vector_16+0x9e>
     5ea:	00 00       	nop
	_delay_us(100);
	
	//Sensor_show(); //LED A
}
     5ec:	ff 91       	pop	r31
     5ee:	ef 91       	pop	r30
     5f0:	bf 91       	pop	r27
     5f2:	af 91       	pop	r26
     5f4:	9f 91       	pop	r25
     5f6:	8f 91       	pop	r24
     5f8:	7f 91       	pop	r23
     5fa:	6f 91       	pop	r22
     5fc:	5f 91       	pop	r21
     5fe:	4f 91       	pop	r20
     600:	3f 91       	pop	r19
     602:	2f 91       	pop	r18
     604:	0f 90       	pop	r0
     606:	0b be       	out	0x3b, r0	; 59
     608:	0f 90       	pop	r0
     60a:	0f be       	out	0x3f, r0	; 63
     60c:	0f 90       	pop	r0
     60e:	1f 90       	pop	r1
     610:	18 95       	reti

00000612 <__vector_14>:
	If_PSD_Detected();
	
	if(temp_en)
		Servo_Set_Speed(calc_speed());
}
ISR(TIMER1_OVF_vect){
     612:	1f 92       	push	r1
     614:	0f 92       	push	r0
     616:	0f b6       	in	r0, 0x3f	; 63
     618:	0f 92       	push	r0
     61a:	11 24       	eor	r1, r1
     61c:	8f 93       	push	r24
	//PORTC = (PORTC & 0xF0) | next_item;
	cur_item = next_item;
     61e:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <next_item>
     622:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <cur_item>
	//_delay_ms(1);
}
     626:	8f 91       	pop	r24
     628:	0f 90       	pop	r0
     62a:	0f be       	out	0x3f, r0	; 63
     62c:	0f 90       	pop	r0
     62e:	1f 90       	pop	r1
     630:	18 95       	reti

00000632 <ElectroMagnet_On>:

void ElectroMagnet_On(){
	PORTB = (PORTB & ~(1<<0)) | (1<<0);
     632:	88 b3       	in	r24, 0x18	; 24
     634:	81 60       	ori	r24, 0x01	; 1
     636:	88 bb       	out	0x18, r24	; 24
     638:	08 95       	ret

0000063a <ElectroMagnet_Off>:
}

void ElectroMagnet_Off(){
	PORTB = (PORTB & ~(1<<0)) | (0<<0);
     63a:	88 b3       	in	r24, 0x18	; 24
     63c:	8e 7f       	andi	r24, 0xFE	; 254
     63e:	88 bb       	out	0x18, r24	; 24
     640:	08 95       	ret

00000642 <main>:
//**** Not Debug *********************************************************************************************************************************************//
#if DEBUG_ == 2

int main(void)
{	
	port_setup(); //setup port
     642:	76 df       	rcall	.-276    	; 0x530 <port_setup>
	adc_init(); // ADC 초기화
     644:	7e df       	rcall	.-260    	; 0x542 <adc_init>
	timer0_init(); // 타이머0 초기화
     646:	5b df       	rcall	.-330    	; 0x4fe <timer0_init>
	timer1_init(); //타이머 초기화
     648:	6a df       	rcall	.-300    	; 0x51e <timer1_init>
	timer2_init();
     64a:	61 df       	rcall	.-318    	; 0x50e <timer2_init>
     64c:	2d d7       	rcall	.+3674   	; 0x14a8 <UART_init>
	UART_init();
     64e:	7e dd       	rcall	.-1284   	; 0x14c <init_BT>
     650:	83 ec       	ldi	r24, 0xC3	; 195
	
	init_BT();	//Bluetooth Setup
     652:	89 bf       	out	0x39, r24	; 57
     654:	80 ef       	ldi	r24, 0xF0	; 240
	
	EIMSK = 0xC3; //1100 0000
     656:	8a bf       	out	0x3a, r24	; 58
	EICRB = 0xF0; //External Interrupt Control Register(Edge)
     658:	8f e0       	ldi	r24, 0x0F	; 15
     65a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EICRA = 0x0F;
     65e:	0c d6       	rcall	.+3096   	; 0x1278 <Reset_sensor_val>
	Reset_sensor_val(); //센서 변수 초기화
     660:	8b b3       	in	r24, 0x1b	; 27
     662:	80 68       	ori	r24, 0x80	; 128
	
	PORTA |= 0x80;
     664:	8b bb       	out	0x1b, r24	; 27
     666:	e9 df       	rcall	.-46     	; 0x63a <ElectroMagnet_Off>
     668:	ec e1       	ldi	r30, 0x1C	; 28
	ElectroMagnet_Off();
     66a:	f2 e0       	ldi	r31, 0x02	; 2
     66c:	85 e0       	ldi	r24, 0x05	; 5
	
	marble.color = 0x05;
     66e:	80 83       	st	Z, r24
     670:	8f ef       	ldi	r24, 0xFF	; 255
     672:	9f ef       	ldi	r25, 0xFF	; 255
     674:	92 83       	std	Z+2, r25	; 0x02
	marble.posX = -1;
     676:	81 83       	std	Z+1, r24	; 0x01
     678:	94 83       	std	Z+4, r25	; 0x04
     67a:	83 83       	std	Z+3, r24	; 0x03
     67c:	78 94       	sei
	marble.posY = -1;
     67e:	c1 e0       	ldi	r28, 0x01	; 1
     680:	c0 93 37 02 	sts	0x0237, r28	; 0x800237 <Servo_Allowed>
	
	sei(); //Allow Interrupt
	
	Servo_Allowed = 0x01;
     684:	83 e0       	ldi	r24, 0x03	; 3
     686:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <cur_item>
	
	cur_item = ITEM_NONE; next_item = ITEM_NONE;
     68a:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <next_item>
     68e:	82 e3       	ldi	r24, 0x32	; 50
     690:	e9 de       	rcall	.-558    	; 0x464 <Servo_Set_Speed>
	
	Servo_Set_Speed(50);
     692:	8c e6       	ldi	r24, 0x6C	; 108
     694:	92 e0       	ldi	r25, 0x02	; 2
	
	//temp_en = 0x00;
	Servo_pos = SERVO_HOME;
     696:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <Servo_pos+0x1>
     69a:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <Servo_pos>
     69e:	8e ef       	ldi	r24, 0xFE	; 254
     6a0:	91 e0       	ldi	r25, 0x01	; 1
	Servo_Goto(510);
     6a2:	af de       	rcall	.-674    	; 0x402 <Servo_Goto>
     6a4:	52 de       	rcall	.-860    	; 0x34a <Servo_Go_Home>
     6a6:	c0 93 4f 02 	sts	0x024F, r28	; 0x80024f <state>
	Servo_Go_Home();
     6aa:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <state>
	
//	_delay_ms(100);
//	Select_Item(ITEM_NONE);
//	_delay_ms(100);

	state = 0x01;
     6ae:	84 30       	cpi	r24, 0x04	; 4
     6b0:	51 f1       	breq	.+84     	; 0x706 <main+0xc4>
	int pressure_F = 0;
	//Buzzer_on(calc_hz());
	//while(1);
	
    while (1) {
		switch(state){
     6b2:	28 f4       	brcc	.+10     	; 0x6be <main+0x7c>
     6b4:	81 30       	cpi	r24, 0x01	; 1
     6b6:	51 f0       	breq	.+20     	; 0x6cc <main+0x8a>
     6b8:	82 30       	cpi	r24, 0x02	; 2
     6ba:	e1 f0       	breq	.+56     	; 0x6f4 <main+0xb2>
     6bc:	f6 cf       	rjmp	.-20     	; 0x6aa <main+0x68>
     6be:	88 30       	cpi	r24, 0x08	; 8
     6c0:	09 f4       	brne	.+2      	; 0x6c4 <main+0x82>
     6c2:	4d c0       	rjmp	.+154    	; 0x75e <main+0x11c>
     6c4:	80 31       	cpi	r24, 0x10	; 16
     6c6:	09 f4       	brne	.+2      	; 0x6ca <main+0x88>
     6c8:	70 c0       	rjmp	.+224    	; 0x7aa <main+0x168>
     6ca:	ef cf       	rjmp	.-34     	; 0x6aa <main+0x68>
     6cc:	8b b3       	in	r24, 0x1b	; 27
     6ce:	80 68       	ori	r24, 0x80	; 128
			case 0b00000001:					//not started
				PORTA |= 0x80;
     6d0:	8b bb       	out	0x1b, r24	; 27
     6d2:	3a d6       	rcall	.+3188   	; 0x1348 <calc_force>
     6d4:	8d 32       	cpi	r24, 0x2D	; 45
				
				pressure_F = calc_force();
     6d6:	91 40       	sbci	r25, 0x01	; 1
     6d8:	44 f3       	brlt	.-48     	; 0x6aa <main+0x68>
				if(pressure_F > 300){ //pressure 
     6da:	83 e0       	ldi	r24, 0x03	; 3
     6dc:	d6 dd       	rcall	.-1108   	; 0x28a <Select_Item>
     6de:	89 e3       	ldi	r24, 0x39	; 57
					Select_Item(ITEM_NONE);
     6e0:	43 dd       	rcall	.-1402   	; 0x168 <BT_send>
     6e2:	8b b3       	in	r24, 0x1b	; 27
					BT_send('9'); //start signal
     6e4:	8f 77       	andi	r24, 0x7F	; 127
     6e6:	8b bb       	out	0x1b, r24	; 27
     6e8:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <state>
					PORTA &= 0x7F;
     6ec:	88 0f       	add	r24, r24
     6ee:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <state>
					
					state <<= 1;
     6f2:	db cf       	rjmp	.-74     	; 0x6aa <main+0x68>
     6f4:	40 dd       	rcall	.-1408   	; 0x176 <BT_Receive>
     6f6:	88 23       	and	r24, r24
     6f8:	c1 f2       	breq	.-80     	; 0x6aa <main+0x68>
				}
				break;
				
			case 0b00000010:	//wait for Marble data to arrive from the server
				if(BT_Receive()){
     6fa:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <state>
     6fe:	88 0f       	add	r24, r24
					state <<= 1;
     700:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <state>
     704:	d2 cf       	rjmp	.-92     	; 0x6aa <main+0x68>
     706:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <marble+0x3>
     70a:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <marble+0x4>
				}
				break;
				
			case 0b00000100:	//Catch & Drop Marble
				Servo_Goto(Calculate_Servo_Rotate_Angle(marble.posY));
     70e:	cb dd       	rcall	.-1130   	; 0x2a6 <Calculate_Servo_Rotate_Angle>
     710:	78 de       	rcall	.-784    	; 0x402 <Servo_Goto>
     712:	8f df       	rcall	.-226    	; 0x632 <ElectroMagnet_On>
     714:	8f ef       	ldi	r24, 0xFF	; 255
     716:	93 ed       	ldi	r25, 0xD3	; 211
     718:	20 e3       	ldi	r18, 0x30	; 48
				
				//Servo Reached Destination				
				ElectroMagnet_On(); //Turn on ElectroMagnet
     71a:	81 50       	subi	r24, 0x01	; 1
     71c:	90 40       	sbci	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     71e:	20 40       	sbci	r18, 0x00	; 0
     720:	e1 f7       	brne	.-8      	; 0x71a <main+0xd8>
     722:	00 c0       	rjmp	.+0      	; 0x724 <main+0xe2>
     724:	00 00       	nop
     726:	3f de       	rcall	.-898    	; 0x3a6 <Servo_Go_Box>
     728:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <shk_detected>
     72c:	8f ef       	ldi	r24, 0xFF	; 255
				_delay_ms(1000);
				
				//Rotate Servo to Marble Box
				Servo_Go_Box();
     72e:	95 ea       	ldi	r25, 0xA5	; 165
     730:	2e e0       	ldi	r18, 0x0E	; 14

				//Servo Reached Destination
				shk_detected = 0x00; //Reset Shock Flag
     732:	81 50       	subi	r24, 0x01	; 1
     734:	90 40       	sbci	r25, 0x00	; 0
     736:	20 40       	sbci	r18, 0x00	; 0
     738:	e1 f7       	brne	.-8      	; 0x732 <main+0xf0>
     73a:	00 c0       	rjmp	.+0      	; 0x73c <main+0xfa>
     73c:	00 00       	nop
     73e:	7d df       	rcall	.-262    	; 0x63a <ElectroMagnet_Off>
     740:	8f ef       	ldi	r24, 0xFF	; 255
     742:	9f e0       	ldi	r25, 0x0F	; 15
     744:	27 e2       	ldi	r18, 0x27	; 39
     746:	81 50       	subi	r24, 0x01	; 1
				_delay_ms(300);
				ElectroMagnet_Off(); //Drop Marble
     748:	90 40       	sbci	r25, 0x00	; 0
     74a:	20 40       	sbci	r18, 0x00	; 0
     74c:	e1 f7       	brne	.-8      	; 0x746 <main+0x104>
     74e:	00 c0       	rjmp	.+0      	; 0x750 <main+0x10e>
     750:	00 00       	nop
     752:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <state>
     756:	88 0f       	add	r24, r24
     758:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <state>
				
				_delay_ms(800); //Wait 1 seconds for Marble to drop and Shock to be detected

				state <<= 1;
     75c:	a6 cf       	rjmp	.-180    	; 0x6aa <main+0x68>
     75e:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <shk_detected>
				
				break;
     762:	81 30       	cpi	r24, 0x01	; 1
				
			case 0b00001000: //Marble success or retry
				if(shk_detected == 0x01){ //Marble was succefully dropped
     764:	49 f4       	brne	.+18     	; 0x778 <main+0x136>
     766:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <shk_detected>
					shk_detected = 0x00;
     76a:	ef dd       	rcall	.-1058   	; 0x34a <Servo_Go_Home>
					
					Servo_Go_Home();
     76c:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <state>
					
					state <<= 1;
     770:	88 0f       	add	r24, r24
     772:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <state>
     776:	99 cf       	rjmp	.-206    	; 0x6aa <main+0x68>
     778:	84 e1       	ldi	r24, 0x14	; 20
				}
				else{ //Marble failed
					//Move servo to home
					Servo_Set_Speed(20); //temporary
     77a:	74 de       	rcall	.-792    	; 0x464 <Servo_Set_Speed>
     77c:	e6 dd       	rcall	.-1076   	; 0x34a <Servo_Go_Home>
     77e:	59 df       	rcall	.-334    	; 0x632 <ElectroMagnet_On>
					Servo_Go_Home();
     780:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <temp_en+0x1>
					
					//Turn on Electro Magnet
					ElectroMagnet_On();
     784:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <temp_en>
					
					temp_en = 0x00; //temperature sensor does not control servo speed
     788:	80 e5       	ldi	r24, 0x50	; 80
     78a:	6c de       	rcall	.-808    	; 0x464 <Servo_Set_Speed>
					Servo_Set_Speed(80); //Very slowly
     78c:	0c de       	rcall	.-1000   	; 0x3a6 <Servo_Go_Box>
     78e:	55 df       	rcall	.-342    	; 0x63a <ElectroMagnet_Off>
					
					//Move servo to Marble Collecting Box
					Servo_Go_Box();
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	90 e0       	ldi	r25, 0x00	; 0
					
					//Turn off Electro Magnet <- Drop Marble
					ElectroMagnet_Off();
     794:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <temp_en+0x1>
					
					temp_en = 0x01; //temperature sensor controls servo speed
     798:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <temp_en>
     79c:	d6 dd       	rcall	.-1108   	; 0x34a <Servo_Go_Home>
					
					//Servo_Set_Speed();
					Servo_Go_Home(); //Servo returns home
     79e:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <state>
					
					//_delay_ms(100);
					//Select_Item(ITEM_NONE);
					//_delay_ms(50);
					
					state <<= 1;
     7a2:	88 0f       	add	r24, r24
     7a4:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <state>
     7a8:	80 cf       	rjmp	.-256    	; 0x6aa <main+0x68>
     7aa:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <marble>
				
				break;
				
			case 0b00010000:
				
				if(marble.color == 0) RED_LED_On(calc_led());
     7ae:	81 11       	cpse	r24, r1
     7b0:	03 c0       	rjmp	.+6      	; 0x7b8 <main+0x176>
     7b2:	18 d6       	rcall	.+3120   	; 0x13e4 <calc_led>
     7b4:	5d de       	rcall	.-838    	; 0x470 <RED_LED_On>
     7b6:	79 cf       	rjmp	.-270    	; 0x6aa <main+0x68>
     7b8:	81 30       	cpi	r24, 0x01	; 1
     7ba:	19 f4       	brne	.+6      	; 0x7c2 <main+0x180>
     7bc:	13 d6       	rcall	.+3110   	; 0x13e4 <calc_led>
     7be:	68 de       	rcall	.-816    	; 0x490 <GREEN_LED_On>
				else if(marble.color == 1) GREEN_LED_On(calc_led());
     7c0:	74 cf       	rjmp	.-280    	; 0x6aa <main+0x68>
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	19 f4       	brne	.+6      	; 0x7cc <main+0x18a>
     7c6:	0e d6       	rcall	.+3100   	; 0x13e4 <calc_led>
     7c8:	73 de       	rcall	.-794    	; 0x4b0 <BLUE_LED_On>
     7ca:	6f cf       	rjmp	.-290    	; 0x6aa <main+0x68>
     7cc:	83 e0       	ldi	r24, 0x03	; 3
				else if(marble.color == 2) BLUE_LED_On(calc_led());
     7ce:	5d dd       	rcall	.-1350   	; 0x28a <Select_Item>
     7d0:	6c cf       	rjmp	.-296    	; 0x6aa <main+0x68>

000007d2 <If_Shock_Detected>:
     7d2:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <shk_sensor_val>
     7d6:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <shk_sensor_val+0x1>
     7da:	8f 3c       	cpi	r24, 0xCF	; 207
				else Select_Item(ITEM_NONE);
     7dc:	9f 4f       	sbci	r25, 0xFF	; 255
     7de:	1c f4       	brge	.+6      	; 0x7e6 <If_Shock_Detected+0x14>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <shk_detected>
	PORTB = (PORTB & ~(1<<0)) | (0<<0);
}

void If_Shock_Detected(){
	if(shk_sensor_val <= -50)
		shk_detected = 0x01;
     7e6:	08 95       	ret

000007e8 <If_PSD_Detected>:




void If_PSD_Detected(){
	psd_dst = calc_dist();
     7e8:	6a d5       	rcall	.+2772   	; 0x12be <calc_dist>
     7ea:	90 93 4a 02 	sts	0x024A, r25	; 0x80024a <psd_dst+0x1>
     7ee:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <psd_dst>

	if ( psd_dst <= 45) {
     7f2:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <psd_dst>
     7f6:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <psd_dst+0x1>
     7fa:	8e 97       	sbiw	r24, 0x2e	; 46
     7fc:	2c f4       	brge	.+10     	; 0x808 <If_PSD_Detected+0x20>
		Servo_Allowed = 0x00;
     7fe:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <Servo_Allowed>
		segment(prox4);
     802:	80 ef       	ldi	r24, 0xF0	; 240
     804:	77 ce       	rjmp	.-786    	; 0x4f4 <segment>
     806:	08 95       	ret
	}
	else if(psd_dst <= 55){
     808:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <psd_dst>
     80c:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <psd_dst+0x1>
     810:	c8 97       	sbiw	r24, 0x38	; 56
     812:	34 f4       	brge	.+12     	; 0x820 <If_PSD_Detected+0x38>
		Servo_Allowed = 0x01;
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <Servo_Allowed>
		segment(prox3);
     81a:	80 ee       	ldi	r24, 0xE0	; 224
     81c:	6b ce       	rjmp	.-810    	; 0x4f4 <segment>
     81e:	08 95       	ret
	}
	else if(psd_dst <= 70){
     820:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <psd_dst>
     824:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <psd_dst+0x1>
     828:	87 34       	cpi	r24, 0x47	; 71
     82a:	91 05       	cpc	r25, r1
     82c:	34 f4       	brge	.+12     	; 0x83a <If_PSD_Detected+0x52>
		Servo_Allowed = 0x01;
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <Servo_Allowed>
		segment(prox2);
     834:	80 ec       	ldi	r24, 0xC0	; 192
     836:	5e ce       	rjmp	.-836    	; 0x4f4 <segment>
     838:	08 95       	ret
	}
	else if(psd_dst <= 80){
     83a:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <psd_dst>
     83e:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <psd_dst+0x1>
     842:	81 35       	cpi	r24, 0x51	; 81
     844:	91 05       	cpc	r25, r1
     846:	34 f4       	brge	.+12     	; 0x854 <If_PSD_Detected+0x6c>
		Servo_Allowed = 0x01;
     848:	81 e0       	ldi	r24, 0x01	; 1
     84a:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <Servo_Allowed>
		segment(prox1);
     84e:	80 e8       	ldi	r24, 0x80	; 128
     850:	51 ce       	rjmp	.-862    	; 0x4f4 <segment>
     852:	08 95       	ret
	}
	else if(psd_dst <= 120){
     854:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <psd_dst>
     858:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <psd_dst+0x1>
     85c:	89 37       	cpi	r24, 0x79	; 121
     85e:	91 05       	cpc	r25, r1
		Servo_Allowed = 0x01;
     860:	2c f4       	brge	.+10     	; 0x86c <If_PSD_Detected+0x84>
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <Servo_Allowed>
		segment(0x00);
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	44 ce       	rjmp	.-888    	; 0x4f4 <segment>
     86c:	08 95       	ret

0000086e <If_Fire_Detected>:
}

void If_Fire_Detected(){
	static volatile short i = 0; //increment
	
	Fire_Detected = 0x00;
     86e:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <Fire_Detected>
	if(fire_sensor_val <= 800){
     872:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <fire_sensor_val>
     876:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <fire_sensor_val+0x1>
     87a:	81 32       	cpi	r24, 0x21	; 33
     87c:	93 40       	sbci	r25, 0x03	; 3
     87e:	b4 f4       	brge	.+44     	; 0x8ac <If_Fire_Detected+0x3e>
		Fire_Detected = 0x01;
     880:	81 e0       	ldi	r24, 0x01	; 1
     882:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <Fire_Detected>
		state = 0x01;
     886:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <state>
		if(++i >= 15){
     88a:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <i.2038>
     88e:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <i.2038+0x1>
     892:	01 96       	adiw	r24, 0x01	; 1
     894:	90 93 98 01 	sts	0x0198, r25	; 0x800198 <i.2038+0x1>
     898:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <i.2038>
     89c:	0f 97       	sbiw	r24, 0x0f	; 15
     89e:	34 f0       	brlt	.+12     	; 0x8ac <If_Fire_Detected+0x3e>
			i = 0;
     8a0:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <i.2038+0x1>
     8a4:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <i.2038>

			Buzzer_on(calc_hz());
     8a8:	27 d5       	rcall	.+2638   	; 0x12f8 <calc_hz>
     8aa:	12 ce       	rjmp	.-988    	; 0x4d0 <Buzzer_on>
     8ac:	08 95       	ret

000008ae <__vector_10>:
	_delay_us(100);
	
	//Sensor_show(); //LED A
}

ISR(TIMER2_OVF_vect){
     8ae:	1f 92       	push	r1
     8b0:	0f 92       	push	r0
     8b2:	0f b6       	in	r0, 0x3f	; 63
     8b4:	0f 92       	push	r0
     8b6:	11 24       	eor	r1, r1
     8b8:	0b b6       	in	r0, 0x3b	; 59
     8ba:	0f 92       	push	r0
     8bc:	2f 93       	push	r18
     8be:	3f 93       	push	r19
     8c0:	4f 93       	push	r20
     8c2:	5f 93       	push	r21
     8c4:	6f 93       	push	r22
     8c6:	7f 93       	push	r23
     8c8:	8f 93       	push	r24
     8ca:	9f 93       	push	r25
     8cc:	af 93       	push	r26
     8ce:	bf 93       	push	r27
     8d0:	ef 93       	push	r30
     8d2:	ff 93       	push	r31
	If_Shock_Detected();
     8d4:	7e df       	rcall	.-260    	; 0x7d2 <If_Shock_Detected>
	If_Fire_Detected();
     8d6:	cb df       	rcall	.-106    	; 0x86e <If_Fire_Detected>
	If_PSD_Detected();
     8d8:	87 df       	rcall	.-242    	; 0x7e8 <If_PSD_Detected>
     8da:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <temp_en>
	
	if(temp_en)
     8de:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <temp_en+0x1>
     8e2:	89 2b       	or	r24, r25
		Servo_Set_Speed(calc_speed());
     8e4:	11 f0       	breq	.+4      	; 0x8ea <__vector_10+0x3c>
     8e6:	5b d5       	rcall	.+2742   	; 0x139e <calc_speed>
     8e8:	bd dd       	rcall	.-1158   	; 0x464 <Servo_Set_Speed>
     8ea:	ff 91       	pop	r31
}
     8ec:	ef 91       	pop	r30
     8ee:	bf 91       	pop	r27
     8f0:	af 91       	pop	r26
     8f2:	9f 91       	pop	r25
     8f4:	8f 91       	pop	r24
     8f6:	7f 91       	pop	r23
     8f8:	6f 91       	pop	r22
     8fa:	5f 91       	pop	r21
     8fc:	4f 91       	pop	r20
     8fe:	3f 91       	pop	r19
     900:	2f 91       	pop	r18
     902:	0f 90       	pop	r0
     904:	0b be       	out	0x3b, r0	; 59
     906:	0f 90       	pop	r0
     908:	0f be       	out	0x3f, r0	; 63
     90a:	0f 90       	pop	r0
     90c:	1f 90       	pop	r1
     90e:	18 95       	reti

00000910 <Read_CDS>:
     910:	cf 92       	push	r12

short lpf(unsigned short current_value, unsigned short new_value, float alpha) {
	return (short)(alpha * new_value + (1 - alpha) * current_value);
}

inline void Read_CDS(){
     912:	df 92       	push	r13
     914:	ef 92       	push	r14
     916:	ff 92       	push	r15
     918:	0f 93       	push	r16
     91a:	1f 93       	push	r17
     91c:	cf 93       	push	r28
     91e:	df 93       	push	r29
	ADCSRA |= (1<< ADIF); // ADC 변환 완료 플래그 클리어
     920:	86 b1       	in	r24, 0x06	; 6
     922:	80 61       	ori	r24, 0x10	; 16
     924:	86 b9       	out	0x06, r24	; 6
	static long sum = 0;
	static short dataX[3] = {0,0,0};
	static short dataY[2] = {0,0};
	static short iX = 0, jX = 2, iY=0, jY=1;
	
	iX = (iX+1) % 3;
     926:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <iX.1695>
     92a:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <iX.1695+0x1>
     92e:	01 96       	adiw	r24, 0x01	; 1
     930:	e3 e0       	ldi	r30, 0x03	; 3
     932:	f0 e0       	ldi	r31, 0x00	; 0
     934:	bf 01       	movw	r22, r30
     936:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__divmodhi4>
     93a:	9c 01       	movw	r18, r24
     93c:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <iX.1695+0x1>
     940:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <iX.1695>
	jX = (jX+1) % 3;
     944:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <jX.1696>
     948:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <jX.1696+0x1>
     94c:	01 96       	adiw	r24, 0x01	; 1
     94e:	bf 01       	movw	r22, r30
     950:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__divmodhi4>
     954:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <jX.1696+0x1>
     958:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <jX.1696>
	dataX[jX] = ADC;
     95c:	44 b1       	in	r20, 0x04	; 4
     95e:	55 b1       	in	r21, 0x05	; 5
     960:	88 0f       	add	r24, r24
     962:	99 1f       	adc	r25, r25
     964:	fc 01       	movw	r30, r24
     966:	ed 5e       	subi	r30, 0xED	; 237
     968:	fd 4f       	sbci	r31, 0xFD	; 253
     96a:	51 83       	std	Z+1, r21	; 0x01
     96c:	40 83       	st	Z, r20
	
	sum=0;
     96e:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <sum.1692>
     972:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <sum.1692+0x1>
     976:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <sum.1692+0x2>
     97a:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <sum.1692+0x3>
	for(iter0 = 2, iter1 = iX; iter0 >= 0; iter0--){
     97e:	82 e0       	ldi	r24, 0x02	; 2
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <iter0.1690+0x1>
     986:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <iter0.1690>
     98a:	30 93 0c 02 	sts	0x020C, r19	; 0x80020c <iter1.1691+0x1>
     98e:	20 93 0b 02 	sts	0x020B, r18	; 0x80020b <iter1.1691>
     992:	3e c0       	rjmp	.+124    	; 0xa10 <Read_CDS+0x100>
		sum += IIR_low_b[iter0] * dataX[iter1];
     994:	df 01       	movw	r26, r30
     996:	aa 0f       	add	r26, r26
     998:	bb 1f       	adc	r27, r27
     99a:	aa 0f       	add	r26, r26
     99c:	bb 1f       	adc	r27, r27
     99e:	a3 5a       	subi	r26, 0xA3	; 163
     9a0:	be 4f       	sbci	r27, 0xFE	; 254
     9a2:	2d 91       	ld	r18, X+
     9a4:	3d 91       	ld	r19, X+
     9a6:	4d 91       	ld	r20, X+
     9a8:	5c 91       	ld	r21, X
     9aa:	c0 91 0b 02 	lds	r28, 0x020B	; 0x80020b <iter1.1691>
     9ae:	d0 91 0c 02 	lds	r29, 0x020C	; 0x80020c <iter1.1691+0x1>
     9b2:	de 01       	movw	r26, r28
     9b4:	aa 0f       	add	r26, r26
     9b6:	bb 1f       	adc	r27, r27
     9b8:	ad 5e       	subi	r26, 0xED	; 237
     9ba:	bd 4f       	sbci	r27, 0xFD	; 253
     9bc:	0d 90       	ld	r0, X+
     9be:	bc 91       	ld	r27, X
     9c0:	a0 2d       	mov	r26, r0
     9c2:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <__mulshisi3>
     9c6:	00 91 0f 02 	lds	r16, 0x020F	; 0x80020f <sum.1692>
     9ca:	10 91 10 02 	lds	r17, 0x0210	; 0x800210 <sum.1692+0x1>
     9ce:	20 91 11 02 	lds	r18, 0x0211	; 0x800211 <sum.1692+0x2>
     9d2:	30 91 12 02 	lds	r19, 0x0212	; 0x800212 <sum.1692+0x3>
     9d6:	dc 01       	movw	r26, r24
     9d8:	cb 01       	movw	r24, r22
     9da:	80 0f       	add	r24, r16
     9dc:	91 1f       	adc	r25, r17
     9de:	a2 1f       	adc	r26, r18
     9e0:	b3 1f       	adc	r27, r19
     9e2:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <sum.1692>
     9e6:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <sum.1692+0x1>
     9ea:	a0 93 11 02 	sts	0x0211, r26	; 0x800211 <sum.1692+0x2>
     9ee:	b0 93 12 02 	sts	0x0212, r27	; 0x800212 <sum.1692+0x3>
		iter1=(iter1+1)%3;
     9f2:	ce 01       	movw	r24, r28
     9f4:	01 96       	adiw	r24, 0x01	; 1
     9f6:	63 e0       	ldi	r22, 0x03	; 3
     9f8:	70 e0       	ldi	r23, 0x00	; 0
     9fa:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__divmodhi4>
     9fe:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <iter1.1691+0x1>
     a02:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <iter1.1691>
	iX = (iX+1) % 3;
	jX = (jX+1) % 3;
	dataX[jX] = ADC;
	
	sum=0;
	for(iter0 = 2, iter1 = iX; iter0 >= 0; iter0--){
     a06:	31 97       	sbiw	r30, 0x01	; 1
     a08:	f0 93 0e 02 	sts	0x020E, r31	; 0x80020e <iter0.1690+0x1>
     a0c:	e0 93 0d 02 	sts	0x020D, r30	; 0x80020d <iter0.1690>
     a10:	e0 91 0d 02 	lds	r30, 0x020D	; 0x80020d <iter0.1690>
     a14:	f0 91 0e 02 	lds	r31, 0x020E	; 0x80020e <iter0.1690+0x1>
     a18:	ff 23       	and	r31, r31
     a1a:	0c f0       	brlt	.+2      	; 0xa1e <Read_CDS+0x10e>
     a1c:	bb cf       	rjmp	.-138    	; 0x994 <Read_CDS+0x84>
		sum += IIR_low_b[iter0] * dataX[iter1];
		iter1=(iter1+1)%3;
	}
	for(iter0 = 1, iter1 = iY; iter0>=0; iter0--){
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <iter0.1690+0x1>
     a26:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <iter0.1690>
     a2a:	00 91 09 02 	lds	r16, 0x0209	; 0x800209 <iY.1697>
     a2e:	10 91 0a 02 	lds	r17, 0x020A	; 0x80020a <iY.1697+0x1>
     a32:	10 93 0c 02 	sts	0x020C, r17	; 0x80020c <iter1.1691+0x1>
     a36:	00 93 0b 02 	sts	0x020B, r16	; 0x80020b <iter1.1691>
     a3a:	42 c0       	rjmp	.+132    	; 0xac0 <Read_CDS+0x1b0>
		sum -= IIR_low_a[iter0] * dataY[iter1];
     a3c:	fe 01       	movw	r30, r28
     a3e:	ee 0f       	add	r30, r30
     a40:	ff 1f       	adc	r31, r31
     a42:	ee 0f       	add	r30, r30
     a44:	ff 1f       	adc	r31, r31
     a46:	eb 5a       	subi	r30, 0xAB	; 171
     a48:	fe 4f       	sbci	r31, 0xFE	; 254
     a4a:	20 81       	ld	r18, Z
     a4c:	31 81       	ldd	r19, Z+1	; 0x01
     a4e:	42 81       	ldd	r20, Z+2	; 0x02
     a50:	53 81       	ldd	r21, Z+3	; 0x03
     a52:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <iter1.1691>
     a56:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <iter1.1691+0x1>
     a5a:	df 01       	movw	r26, r30
     a5c:	aa 0f       	add	r26, r26
     a5e:	bb 1f       	adc	r27, r27
     a60:	ab 5f       	subi	r26, 0xFB	; 251
     a62:	bd 4f       	sbci	r27, 0xFD	; 253
     a64:	0d 90       	ld	r0, X+
     a66:	bc 91       	ld	r27, X
     a68:	a0 2d       	mov	r26, r0
     a6a:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <__mulshisi3>
     a6e:	c0 90 0f 02 	lds	r12, 0x020F	; 0x80020f <sum.1692>
     a72:	d0 90 10 02 	lds	r13, 0x0210	; 0x800210 <sum.1692+0x1>
     a76:	e0 90 11 02 	lds	r14, 0x0211	; 0x800211 <sum.1692+0x2>
     a7a:	f0 90 12 02 	lds	r15, 0x0212	; 0x800212 <sum.1692+0x3>
     a7e:	a7 01       	movw	r20, r14
     a80:	96 01       	movw	r18, r12
     a82:	26 1b       	sub	r18, r22
     a84:	37 0b       	sbc	r19, r23
     a86:	48 0b       	sbc	r20, r24
     a88:	59 0b       	sbc	r21, r25
     a8a:	20 93 0f 02 	sts	0x020F, r18	; 0x80020f <sum.1692>
     a8e:	30 93 10 02 	sts	0x0210, r19	; 0x800210 <sum.1692+0x1>
     a92:	40 93 11 02 	sts	0x0211, r20	; 0x800211 <sum.1692+0x2>
     a96:	50 93 12 02 	sts	0x0212, r21	; 0x800212 <sum.1692+0x3>
		iter1=(iter1+1)%2;
     a9a:	cf 01       	movw	r24, r30
     a9c:	01 96       	adiw	r24, 0x01	; 1
     a9e:	81 70       	andi	r24, 0x01	; 1
     aa0:	90 78       	andi	r25, 0x80	; 128
     aa2:	99 23       	and	r25, r25
     aa4:	24 f4       	brge	.+8      	; 0xaae <Read_CDS+0x19e>
     aa6:	01 97       	sbiw	r24, 0x01	; 1
     aa8:	8e 6f       	ori	r24, 0xFE	; 254
     aaa:	9f 6f       	ori	r25, 0xFF	; 255
     aac:	01 96       	adiw	r24, 0x01	; 1
     aae:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <iter1.1691+0x1>
     ab2:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <iter1.1691>
	sum=0;
	for(iter0 = 2, iter1 = iX; iter0 >= 0; iter0--){
		sum += IIR_low_b[iter0] * dataX[iter1];
		iter1=(iter1+1)%3;
	}
	for(iter0 = 1, iter1 = iY; iter0>=0; iter0--){
     ab6:	21 97       	sbiw	r28, 0x01	; 1
     ab8:	d0 93 0e 02 	sts	0x020E, r29	; 0x80020e <iter0.1690+0x1>
     abc:	c0 93 0d 02 	sts	0x020D, r28	; 0x80020d <iter0.1690>
     ac0:	c0 91 0d 02 	lds	r28, 0x020D	; 0x80020d <iter0.1690>
     ac4:	d0 91 0e 02 	lds	r29, 0x020E	; 0x80020e <iter0.1690+0x1>
     ac8:	dd 23       	and	r29, r29
     aca:	0c f0       	brlt	.+2      	; 0xace <Read_CDS+0x1be>
     acc:	b7 cf       	rjmp	.-146    	; 0xa3c <Read_CDS+0x12c>
		sum -= IIR_low_a[iter0] * dataY[iter1];
		iter1=(iter1+1)%2;
	}
	
	iY = (iY+1)%2;
     ace:	0f 5f       	subi	r16, 0xFF	; 255
     ad0:	1f 4f       	sbci	r17, 0xFF	; 255
     ad2:	01 70       	andi	r16, 0x01	; 1
     ad4:	10 78       	andi	r17, 0x80	; 128
     ad6:	11 23       	and	r17, r17
     ad8:	34 f4       	brge	.+12     	; 0xae6 <Read_CDS+0x1d6>
     ada:	01 50       	subi	r16, 0x01	; 1
     adc:	11 09       	sbc	r17, r1
     ade:	0e 6f       	ori	r16, 0xFE	; 254
     ae0:	1f 6f       	ori	r17, 0xFF	; 255
     ae2:	0f 5f       	subi	r16, 0xFF	; 255
     ae4:	1f 4f       	sbci	r17, 0xFF	; 255
     ae6:	10 93 0a 02 	sts	0x020A, r17	; 0x80020a <iY.1697+0x1>
     aea:	00 93 09 02 	sts	0x0209, r16	; 0x800209 <iY.1697>
	jY = (jY+1)%2;
     aee:	c0 91 3d 01 	lds	r28, 0x013D	; 0x80013d <jY.1698>
     af2:	d0 91 3e 01 	lds	r29, 0x013E	; 0x80013e <jY.1698+0x1>
     af6:	21 96       	adiw	r28, 0x01	; 1
     af8:	c1 70       	andi	r28, 0x01	; 1
     afa:	d0 78       	andi	r29, 0x80	; 128
     afc:	dd 23       	and	r29, r29
     afe:	24 f4       	brge	.+8      	; 0xb08 <Read_CDS+0x1f8>
     b00:	21 97       	sbiw	r28, 0x01	; 1
     b02:	ce 6f       	ori	r28, 0xFE	; 254
     b04:	df 6f       	ori	r29, 0xFF	; 255
     b06:	21 96       	adiw	r28, 0x01	; 1
     b08:	d0 93 3e 01 	sts	0x013E, r29	; 0x80013e <jY.1698+0x1>
     b0c:	c0 93 3d 01 	sts	0x013D, r28	; 0x80013d <jY.1698>
	dataY[jY] = sum/10000;
     b10:	60 91 0f 02 	lds	r22, 0x020F	; 0x80020f <sum.1692>
     b14:	70 91 10 02 	lds	r23, 0x0210	; 0x800210 <sum.1692+0x1>
     b18:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <sum.1692+0x2>
     b1c:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <sum.1692+0x3>
     b20:	20 e1       	ldi	r18, 0x10	; 16
     b22:	37 e2       	ldi	r19, 0x27	; 39
     b24:	40 e0       	ldi	r20, 0x00	; 0
     b26:	50 e0       	ldi	r21, 0x00	; 0
     b28:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <__divmodsi4>
     b2c:	cc 0f       	add	r28, r28
     b2e:	dd 1f       	adc	r29, r29
     b30:	cb 5f       	subi	r28, 0xFB	; 251
     b32:	dd 4f       	sbci	r29, 0xFD	; 253
     b34:	39 83       	std	Y+1, r19	; 0x01
     b36:	28 83       	st	Y, r18
	cds_sensor_val = dataY[jY];
     b38:	30 93 3a 02 	sts	0x023A, r19	; 0x80023a <cds_sensor_val+0x1>
     b3c:	20 93 39 02 	sts	0x0239, r18	; 0x800239 <cds_sensor_val>
}
     b40:	df 91       	pop	r29
     b42:	cf 91       	pop	r28
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	ff 90       	pop	r15
     b4a:	ef 90       	pop	r14
     b4c:	df 90       	pop	r13
     b4e:	cf 90       	pop	r12
     b50:	08 95       	ret

00000b52 <Read_Fire>:

inline void Read_Fire(){
     b52:	0f 93       	push	r16
     b54:	1f 93       	push	r17
     b56:	cf 93       	push	r28
     b58:	df 93       	push	r29
	ADCSRA |= (1 << ADIF); // ADC 변환 완료 플래그 클리어
     b5a:	86 b1       	in	r24, 0x06	; 6
     b5c:	80 61       	ori	r24, 0x10	; 16
     b5e:	86 b9       	out	0x06, r24	; 6
	static short iter0 = 0, iter1 = 0;
	static long sum = 0;
	static short data[11] = {0,0,0,0,0,0,0,0,0,0,0};
	static short i = 0, j = 10;
	
	i = (i+1) % 11;
     b60:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <i.1711>
     b64:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <i.1711+0x1>
     b68:	01 96       	adiw	r24, 0x01	; 1
     b6a:	eb e0       	ldi	r30, 0x0B	; 11
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	bf 01       	movw	r22, r30
     b70:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__divmodhi4>
     b74:	9c 01       	movw	r18, r24
     b76:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <i.1711+0x1>
     b7a:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <i.1711>
	j = (j+1) % 11;
     b7e:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <j.1712>
     b82:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <j.1712+0x1>
     b86:	01 96       	adiw	r24, 0x01	; 1
     b88:	bf 01       	movw	r22, r30
     b8a:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__divmodhi4>
     b8e:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <j.1712+0x1>
     b92:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <j.1712>
	data[j] = ADC;
     b96:	44 b1       	in	r20, 0x04	; 4
     b98:	55 b1       	in	r21, 0x05	; 5
     b9a:	88 0f       	add	r24, r24
     b9c:	99 1f       	adc	r25, r25
     b9e:	fc 01       	movw	r30, r24
     ba0:	e3 51       	subi	r30, 0x13	; 19
     ba2:	fe 4f       	sbci	r31, 0xFE	; 254
     ba4:	51 83       	std	Z+1, r21	; 0x01
     ba6:	40 83       	st	Z, r20

	sum=0;
     ba8:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <sum.1709>
     bac:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <sum.1709+0x1>
     bb0:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <sum.1709+0x2>
     bb4:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <sum.1709+0x3>
	for(iter0 = 10, iter1 = i; iter0 >= 0; iter0--){
     bb8:	8a e0       	ldi	r24, 0x0A	; 10
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <iter0.1707+0x1>
     bc0:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <iter0.1707>
     bc4:	30 93 e6 01 	sts	0x01E6, r19	; 0x8001e6 <iter1.1708+0x1>
     bc8:	20 93 e5 01 	sts	0x01E5, r18	; 0x8001e5 <iter1.1708>
     bcc:	3d c0       	rjmp	.+122    	; 0xc48 <Read_Fire+0xf6>
		sum += Fir_low_b[iter0] * data[iter1];
     bce:	df 01       	movw	r26, r30
     bd0:	aa 0f       	add	r26, r26
     bd2:	bb 1f       	adc	r27, r27
     bd4:	aa 0f       	add	r26, r26
     bd6:	bb 1f       	adc	r27, r27
     bd8:	a7 59       	subi	r26, 0x97	; 151
     bda:	be 4f       	sbci	r27, 0xFE	; 254
     bdc:	2d 91       	ld	r18, X+
     bde:	3d 91       	ld	r19, X+
     be0:	4d 91       	ld	r20, X+
     be2:	5c 91       	ld	r21, X
     be4:	c0 91 e5 01 	lds	r28, 0x01E5	; 0x8001e5 <iter1.1708>
     be8:	d0 91 e6 01 	lds	r29, 0x01E6	; 0x8001e6 <iter1.1708+0x1>
     bec:	de 01       	movw	r26, r28
     bee:	aa 0f       	add	r26, r26
     bf0:	bb 1f       	adc	r27, r27
     bf2:	a3 51       	subi	r26, 0x13	; 19
     bf4:	be 4f       	sbci	r27, 0xFE	; 254
     bf6:	0d 90       	ld	r0, X+
     bf8:	bc 91       	ld	r27, X
     bfa:	a0 2d       	mov	r26, r0
     bfc:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <__mulshisi3>
     c00:	00 91 e9 01 	lds	r16, 0x01E9	; 0x8001e9 <sum.1709>
     c04:	10 91 ea 01 	lds	r17, 0x01EA	; 0x8001ea <sum.1709+0x1>
     c08:	20 91 eb 01 	lds	r18, 0x01EB	; 0x8001eb <sum.1709+0x2>
     c0c:	30 91 ec 01 	lds	r19, 0x01EC	; 0x8001ec <sum.1709+0x3>
     c10:	dc 01       	movw	r26, r24
     c12:	cb 01       	movw	r24, r22
     c14:	80 0f       	add	r24, r16
     c16:	91 1f       	adc	r25, r17
     c18:	a2 1f       	adc	r26, r18
     c1a:	b3 1f       	adc	r27, r19
     c1c:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <sum.1709>
     c20:	90 93 ea 01 	sts	0x01EA, r25	; 0x8001ea <sum.1709+0x1>
     c24:	a0 93 eb 01 	sts	0x01EB, r26	; 0x8001eb <sum.1709+0x2>
     c28:	b0 93 ec 01 	sts	0x01EC, r27	; 0x8001ec <sum.1709+0x3>
		iter1=(iter1+1)%11;
     c2c:	ce 01       	movw	r24, r28
     c2e:	01 96       	adiw	r24, 0x01	; 1
     c30:	6b e0       	ldi	r22, 0x0B	; 11
     c32:	70 e0       	ldi	r23, 0x00	; 0
     c34:	c8 d7       	rcall	.+3984   	; 0x1bc6 <__divmodhi4>
     c36:	90 93 e6 01 	sts	0x01E6, r25	; 0x8001e6 <iter1.1708+0x1>
     c3a:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <iter1.1708>
	i = (i+1) % 11;
	j = (j+1) % 11;
	data[j] = ADC;

	sum=0;
	for(iter0 = 10, iter1 = i; iter0 >= 0; iter0--){
     c3e:	31 97       	sbiw	r30, 0x01	; 1
     c40:	f0 93 e8 01 	sts	0x01E8, r31	; 0x8001e8 <iter0.1707+0x1>
     c44:	e0 93 e7 01 	sts	0x01E7, r30	; 0x8001e7 <iter0.1707>
     c48:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <iter0.1707>
     c4c:	f0 91 e8 01 	lds	r31, 0x01E8	; 0x8001e8 <iter0.1707+0x1>
     c50:	ff 23       	and	r31, r31
     c52:	0c f0       	brlt	.+2      	; 0xc56 <Read_Fire+0x104>
     c54:	bc cf       	rjmp	.-136    	; 0xbce <Read_Fire+0x7c>
		sum += Fir_low_b[iter0] * data[iter1];
		iter1=(iter1+1)%11;
	}

	fire_sensor_val = sum/10000;
     c56:	60 91 e9 01 	lds	r22, 0x01E9	; 0x8001e9 <sum.1709>
     c5a:	70 91 ea 01 	lds	r23, 0x01EA	; 0x8001ea <sum.1709+0x1>
     c5e:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <sum.1709+0x2>
     c62:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <sum.1709+0x3>
     c66:	20 e1       	ldi	r18, 0x10	; 16
     c68:	37 e2       	ldi	r19, 0x27	; 39
     c6a:	40 e0       	ldi	r20, 0x00	; 0
     c6c:	50 e0       	ldi	r21, 0x00	; 0
     c6e:	be d7       	rcall	.+3964   	; 0x1bec <__divmodsi4>
     c70:	30 93 32 02 	sts	0x0232, r19	; 0x800232 <fire_sensor_val+0x1>
     c74:	20 93 31 02 	sts	0x0231, r18	; 0x800231 <fire_sensor_val>
}
     c78:	df 91       	pop	r29
     c7a:	cf 91       	pop	r28
     c7c:	1f 91       	pop	r17
     c7e:	0f 91       	pop	r16
     c80:	08 95       	ret

00000c82 <Read_PSD>:
inline void Read_PSD(){
     c82:	cf 92       	push	r12
     c84:	df 92       	push	r13
     c86:	ef 92       	push	r14
     c88:	ff 92       	push	r15
     c8a:	0f 93       	push	r16
     c8c:	1f 93       	push	r17
     c8e:	cf 93       	push	r28
     c90:	df 93       	push	r29
	ADCSRA |= (1 << ADIF); // ADC 변환 완료 플래그 클리어
     c92:	86 b1       	in	r24, 0x06	; 6
     c94:	80 61       	ori	r24, 0x10	; 16
     c96:	86 b9       	out	0x06, r24	; 6
	static long sum = 0;
	static short dataX[3] = {0,0,0};
	static short dataY[2] = {0,0};
	static short iX = 0, jX = 2, iY=0, jY=1;
	
	iX = (iX+1) % 3;
     c98:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <iX.1723>
     c9c:	90 91 e4 01 	lds	r25, 0x01E4	; 0x8001e4 <iX.1723+0x1>
     ca0:	01 96       	adiw	r24, 0x01	; 1
     ca2:	e3 e0       	ldi	r30, 0x03	; 3
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	bf 01       	movw	r22, r30
     ca8:	8e d7       	rcall	.+3868   	; 0x1bc6 <__divmodhi4>
     caa:	9c 01       	movw	r18, r24
     cac:	90 93 e4 01 	sts	0x01E4, r25	; 0x8001e4 <iX.1723+0x1>
     cb0:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <iX.1723>
	jX = (jX+1) % 3;
     cb4:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <jX.1724>
     cb8:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <jX.1724+0x1>
     cbc:	01 96       	adiw	r24, 0x01	; 1
     cbe:	bf 01       	movw	r22, r30
     cc0:	82 d7       	rcall	.+3844   	; 0x1bc6 <__divmodhi4>
     cc2:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <jX.1724+0x1>
     cc6:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <jX.1724>
	dataX[jX] = ADC;
     cca:	44 b1       	in	r20, 0x04	; 4
     ccc:	55 b1       	in	r21, 0x05	; 5
     cce:	88 0f       	add	r24, r24
     cd0:	99 1f       	adc	r25, r25
     cd2:	fc 01       	movw	r30, r24
     cd4:	e3 52       	subi	r30, 0x23	; 35
     cd6:	fe 4f       	sbci	r31, 0xFE	; 254
     cd8:	51 83       	std	Z+1, r21	; 0x01
     cda:	40 83       	st	Z, r20
	
	sum=0;
     cdc:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <sum.1720>
     ce0:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <sum.1720+0x1>
     ce4:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <sum.1720+0x2>
     ce8:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <sum.1720+0x3>
	for(iter0 = 2, iter1 = iX; iter0 >= 0; iter0--){
     cec:	82 e0       	ldi	r24, 0x02	; 2
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	90 93 d8 01 	sts	0x01D8, r25	; 0x8001d8 <iter0.1718+0x1>
     cf4:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <iter0.1718>
     cf8:	30 93 d6 01 	sts	0x01D6, r19	; 0x8001d6 <iter1.1719+0x1>
     cfc:	20 93 d5 01 	sts	0x01D5, r18	; 0x8001d5 <iter1.1719>
     d00:	3c c0       	rjmp	.+120    	; 0xd7a <Read_PSD+0xf8>
		sum += IIR_low_b[iter0] * dataX[iter1];
     d02:	df 01       	movw	r26, r30
     d04:	aa 0f       	add	r26, r26
     d06:	bb 1f       	adc	r27, r27
     d08:	aa 0f       	add	r26, r26
     d0a:	bb 1f       	adc	r27, r27
     d0c:	a3 5a       	subi	r26, 0xA3	; 163
     d0e:	be 4f       	sbci	r27, 0xFE	; 254
     d10:	2d 91       	ld	r18, X+
     d12:	3d 91       	ld	r19, X+
     d14:	4d 91       	ld	r20, X+
     d16:	5c 91       	ld	r21, X
     d18:	c0 91 d5 01 	lds	r28, 0x01D5	; 0x8001d5 <iter1.1719>
     d1c:	d0 91 d6 01 	lds	r29, 0x01D6	; 0x8001d6 <iter1.1719+0x1>
     d20:	de 01       	movw	r26, r28
     d22:	aa 0f       	add	r26, r26
     d24:	bb 1f       	adc	r27, r27
     d26:	a3 52       	subi	r26, 0x23	; 35
     d28:	be 4f       	sbci	r27, 0xFE	; 254
     d2a:	0d 90       	ld	r0, X+
     d2c:	bc 91       	ld	r27, X
     d2e:	a0 2d       	mov	r26, r0
     d30:	79 d7       	rcall	.+3826   	; 0x1c24 <__mulshisi3>
     d32:	00 91 d9 01 	lds	r16, 0x01D9	; 0x8001d9 <sum.1720>
     d36:	10 91 da 01 	lds	r17, 0x01DA	; 0x8001da <sum.1720+0x1>
     d3a:	20 91 db 01 	lds	r18, 0x01DB	; 0x8001db <sum.1720+0x2>
     d3e:	30 91 dc 01 	lds	r19, 0x01DC	; 0x8001dc <sum.1720+0x3>
     d42:	dc 01       	movw	r26, r24
     d44:	cb 01       	movw	r24, r22
     d46:	80 0f       	add	r24, r16
     d48:	91 1f       	adc	r25, r17
     d4a:	a2 1f       	adc	r26, r18
     d4c:	b3 1f       	adc	r27, r19
     d4e:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <sum.1720>
     d52:	90 93 da 01 	sts	0x01DA, r25	; 0x8001da <sum.1720+0x1>
     d56:	a0 93 db 01 	sts	0x01DB, r26	; 0x8001db <sum.1720+0x2>
     d5a:	b0 93 dc 01 	sts	0x01DC, r27	; 0x8001dc <sum.1720+0x3>
		iter1=(iter1+1)%3;
     d5e:	ce 01       	movw	r24, r28
     d60:	01 96       	adiw	r24, 0x01	; 1
     d62:	63 e0       	ldi	r22, 0x03	; 3
     d64:	70 e0       	ldi	r23, 0x00	; 0
     d66:	2f d7       	rcall	.+3678   	; 0x1bc6 <__divmodhi4>
     d68:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <iter1.1719+0x1>
     d6c:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <iter1.1719>
	iX = (iX+1) % 3;
	jX = (jX+1) % 3;
	dataX[jX] = ADC;
	
	sum=0;
	for(iter0 = 2, iter1 = iX; iter0 >= 0; iter0--){
     d70:	31 97       	sbiw	r30, 0x01	; 1
     d72:	f0 93 d8 01 	sts	0x01D8, r31	; 0x8001d8 <iter0.1718+0x1>
     d76:	e0 93 d7 01 	sts	0x01D7, r30	; 0x8001d7 <iter0.1718>
     d7a:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <iter0.1718>
     d7e:	f0 91 d8 01 	lds	r31, 0x01D8	; 0x8001d8 <iter0.1718+0x1>
     d82:	ff 23       	and	r31, r31
     d84:	0c f0       	brlt	.+2      	; 0xd88 <Read_PSD+0x106>
     d86:	bd cf       	rjmp	.-134    	; 0xd02 <Read_PSD+0x80>
		sum += IIR_low_b[iter0] * dataX[iter1];
		iter1=(iter1+1)%3;
	}
	for(iter0 = 1, iter1 = iY; iter0>=0; iter0--){
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	90 93 d8 01 	sts	0x01D8, r25	; 0x8001d8 <iter0.1718+0x1>
     d90:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <iter0.1718>
     d94:	00 91 d3 01 	lds	r16, 0x01D3	; 0x8001d3 <iY.1725>
     d98:	10 91 d4 01 	lds	r17, 0x01D4	; 0x8001d4 <iY.1725+0x1>
     d9c:	10 93 d6 01 	sts	0x01D6, r17	; 0x8001d6 <iter1.1719+0x1>
     da0:	00 93 d5 01 	sts	0x01D5, r16	; 0x8001d5 <iter1.1719>
     da4:	41 c0       	rjmp	.+130    	; 0xe28 <Read_PSD+0x1a6>
		sum -= IIR_low_a[iter0] * dataY[iter1];
     da6:	fe 01       	movw	r30, r28
     da8:	ee 0f       	add	r30, r30
     daa:	ff 1f       	adc	r31, r31
     dac:	ee 0f       	add	r30, r30
     dae:	ff 1f       	adc	r31, r31
     db0:	eb 5a       	subi	r30, 0xAB	; 171
     db2:	fe 4f       	sbci	r31, 0xFE	; 254
     db4:	20 81       	ld	r18, Z
     db6:	31 81       	ldd	r19, Z+1	; 0x01
     db8:	42 81       	ldd	r20, Z+2	; 0x02
     dba:	53 81       	ldd	r21, Z+3	; 0x03
     dbc:	e0 91 d5 01 	lds	r30, 0x01D5	; 0x8001d5 <iter1.1719>
     dc0:	f0 91 d6 01 	lds	r31, 0x01D6	; 0x8001d6 <iter1.1719+0x1>
     dc4:	df 01       	movw	r26, r30
     dc6:	aa 0f       	add	r26, r26
     dc8:	bb 1f       	adc	r27, r27
     dca:	a1 53       	subi	r26, 0x31	; 49
     dcc:	be 4f       	sbci	r27, 0xFE	; 254
     dce:	0d 90       	ld	r0, X+
     dd0:	bc 91       	ld	r27, X
     dd2:	a0 2d       	mov	r26, r0
     dd4:	27 d7       	rcall	.+3662   	; 0x1c24 <__mulshisi3>
     dd6:	c0 90 d9 01 	lds	r12, 0x01D9	; 0x8001d9 <sum.1720>
     dda:	d0 90 da 01 	lds	r13, 0x01DA	; 0x8001da <sum.1720+0x1>
     dde:	e0 90 db 01 	lds	r14, 0x01DB	; 0x8001db <sum.1720+0x2>
     de2:	f0 90 dc 01 	lds	r15, 0x01DC	; 0x8001dc <sum.1720+0x3>
     de6:	a7 01       	movw	r20, r14
     de8:	96 01       	movw	r18, r12
     dea:	26 1b       	sub	r18, r22
     dec:	37 0b       	sbc	r19, r23
     dee:	48 0b       	sbc	r20, r24
     df0:	59 0b       	sbc	r21, r25
     df2:	20 93 d9 01 	sts	0x01D9, r18	; 0x8001d9 <sum.1720>
     df6:	30 93 da 01 	sts	0x01DA, r19	; 0x8001da <sum.1720+0x1>
     dfa:	40 93 db 01 	sts	0x01DB, r20	; 0x8001db <sum.1720+0x2>
     dfe:	50 93 dc 01 	sts	0x01DC, r21	; 0x8001dc <sum.1720+0x3>
		iter1=(iter1+1)%2;
     e02:	cf 01       	movw	r24, r30
     e04:	01 96       	adiw	r24, 0x01	; 1
     e06:	81 70       	andi	r24, 0x01	; 1
     e08:	90 78       	andi	r25, 0x80	; 128
     e0a:	99 23       	and	r25, r25
     e0c:	24 f4       	brge	.+8      	; 0xe16 <Read_PSD+0x194>
     e0e:	01 97       	sbiw	r24, 0x01	; 1
     e10:	8e 6f       	ori	r24, 0xFE	; 254
     e12:	9f 6f       	ori	r25, 0xFF	; 255
     e14:	01 96       	adiw	r24, 0x01	; 1
     e16:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <iter1.1719+0x1>
     e1a:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <iter1.1719>
	sum=0;
	for(iter0 = 2, iter1 = iX; iter0 >= 0; iter0--){
		sum += IIR_low_b[iter0] * dataX[iter1];
		iter1=(iter1+1)%3;
	}
	for(iter0 = 1, iter1 = iY; iter0>=0; iter0--){
     e1e:	21 97       	sbiw	r28, 0x01	; 1
     e20:	d0 93 d8 01 	sts	0x01D8, r29	; 0x8001d8 <iter0.1718+0x1>
     e24:	c0 93 d7 01 	sts	0x01D7, r28	; 0x8001d7 <iter0.1718>
     e28:	c0 91 d7 01 	lds	r28, 0x01D7	; 0x8001d7 <iter0.1718>
     e2c:	d0 91 d8 01 	lds	r29, 0x01D8	; 0x8001d8 <iter0.1718+0x1>
     e30:	dd 23       	and	r29, r29
     e32:	0c f0       	brlt	.+2      	; 0xe36 <Read_PSD+0x1b4>
     e34:	b8 cf       	rjmp	.-144    	; 0xda6 <Read_PSD+0x124>
		sum -= IIR_low_a[iter0] * dataY[iter1];
		iter1=(iter1+1)%2;
	}
	
	iY = (iY+1)%2;
     e36:	0f 5f       	subi	r16, 0xFF	; 255
     e38:	1f 4f       	sbci	r17, 0xFF	; 255
     e3a:	01 70       	andi	r16, 0x01	; 1
     e3c:	10 78       	andi	r17, 0x80	; 128
     e3e:	11 23       	and	r17, r17
     e40:	34 f4       	brge	.+12     	; 0xe4e <Read_PSD+0x1cc>
     e42:	01 50       	subi	r16, 0x01	; 1
     e44:	11 09       	sbc	r17, r1
     e46:	0e 6f       	ori	r16, 0xFE	; 254
     e48:	1f 6f       	ori	r17, 0xFF	; 255
     e4a:	0f 5f       	subi	r16, 0xFF	; 255
     e4c:	1f 4f       	sbci	r17, 0xFF	; 255
     e4e:	10 93 d4 01 	sts	0x01D4, r17	; 0x8001d4 <iY.1725+0x1>
     e52:	00 93 d3 01 	sts	0x01D3, r16	; 0x8001d3 <iY.1725>
	jY = (jY+1)%2;
     e56:	c0 91 37 01 	lds	r28, 0x0137	; 0x800137 <jY.1726>
     e5a:	d0 91 38 01 	lds	r29, 0x0138	; 0x800138 <jY.1726+0x1>
     e5e:	21 96       	adiw	r28, 0x01	; 1
     e60:	c1 70       	andi	r28, 0x01	; 1
     e62:	d0 78       	andi	r29, 0x80	; 128
     e64:	dd 23       	and	r29, r29
     e66:	24 f4       	brge	.+8      	; 0xe70 <Read_PSD+0x1ee>
     e68:	21 97       	sbiw	r28, 0x01	; 1
     e6a:	ce 6f       	ori	r28, 0xFE	; 254
     e6c:	df 6f       	ori	r29, 0xFF	; 255
     e6e:	21 96       	adiw	r28, 0x01	; 1
     e70:	d0 93 38 01 	sts	0x0138, r29	; 0x800138 <jY.1726+0x1>
     e74:	c0 93 37 01 	sts	0x0137, r28	; 0x800137 <jY.1726>
	dataY[jY] = sum/10000;
     e78:	60 91 d9 01 	lds	r22, 0x01D9	; 0x8001d9 <sum.1720>
     e7c:	70 91 da 01 	lds	r23, 0x01DA	; 0x8001da <sum.1720+0x1>
     e80:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <sum.1720+0x2>
     e84:	90 91 dc 01 	lds	r25, 0x01DC	; 0x8001dc <sum.1720+0x3>
     e88:	20 e1       	ldi	r18, 0x10	; 16
     e8a:	37 e2       	ldi	r19, 0x27	; 39
     e8c:	40 e0       	ldi	r20, 0x00	; 0
     e8e:	50 e0       	ldi	r21, 0x00	; 0
     e90:	ad d6       	rcall	.+3418   	; 0x1bec <__divmodsi4>
     e92:	cc 0f       	add	r28, r28
     e94:	dd 1f       	adc	r29, r29
     e96:	c1 53       	subi	r28, 0x31	; 49
     e98:	de 4f       	sbci	r29, 0xFE	; 254
     e9a:	39 83       	std	Y+1, r19	; 0x01
     e9c:	28 83       	st	Y, r18
	psd_sensor_val = dataY[jY];
     e9e:	30 93 41 02 	sts	0x0241, r19	; 0x800241 <psd_sensor_val+0x1>
     ea2:	20 93 40 02 	sts	0x0240, r18	; 0x800240 <psd_sensor_val>
}
     ea6:	df 91       	pop	r29
     ea8:	cf 91       	pop	r28
     eaa:	1f 91       	pop	r17
     eac:	0f 91       	pop	r16
     eae:	ff 90       	pop	r15
     eb0:	ef 90       	pop	r14
     eb2:	df 90       	pop	r13
     eb4:	cf 90       	pop	r12
     eb6:	08 95       	ret

00000eb8 <Read_Pressure>:

inline void Read_Pressure(){
     eb8:	0f 93       	push	r16
     eba:	1f 93       	push	r17
     ebc:	cf 93       	push	r28
     ebe:	df 93       	push	r29
	ADCSRA |= (1 << ADIF); // ADC 변환 완료 플래그 클리어
     ec0:	86 b1       	in	r24, 0x06	; 6
     ec2:	80 61       	ori	r24, 0x10	; 16
     ec4:	86 b9       	out	0x06, r24	; 6
	static short iter0 = 0, iter1 = 0;
	static long sum = 0;
	static short data[11] = {0,0,0,0,0,0,0,0,0,0,0};
	static short i = 0, j = 10;
	
	i = (i+1) % 11;
     ec6:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <i.1739>
     eca:	90 91 ce 01 	lds	r25, 0x01CE	; 0x8001ce <i.1739+0x1>
     ece:	01 96       	adiw	r24, 0x01	; 1
     ed0:	eb e0       	ldi	r30, 0x0B	; 11
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	bf 01       	movw	r22, r30
     ed6:	77 d6       	rcall	.+3310   	; 0x1bc6 <__divmodhi4>
     ed8:	9c 01       	movw	r18, r24
     eda:	90 93 ce 01 	sts	0x01CE, r25	; 0x8001ce <i.1739+0x1>
     ede:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <i.1739>
	j = (j+1) % 11;
     ee2:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <j.1740>
     ee6:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <j.1740+0x1>
     eea:	01 96       	adiw	r24, 0x01	; 1
     eec:	bf 01       	movw	r22, r30
     eee:	6b d6       	rcall	.+3286   	; 0x1bc6 <__divmodhi4>
     ef0:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <j.1740+0x1>
     ef4:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <j.1740>
	data[j] = ADC;
     ef8:	44 b1       	in	r20, 0x04	; 4
     efa:	55 b1       	in	r21, 0x05	; 5
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	fc 01       	movw	r30, r24
     f02:	e9 54       	subi	r30, 0x49	; 73
     f04:	fe 4f       	sbci	r31, 0xFE	; 254
     f06:	51 83       	std	Z+1, r21	; 0x01
     f08:	40 83       	st	Z, r20

	sum=0;
     f0a:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <sum.1737>
     f0e:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <sum.1737+0x1>
     f12:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <sum.1737+0x2>
     f16:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <sum.1737+0x3>
	for(iter0 = 10, iter1 = i; iter0 >= 0; iter0--){
     f1a:	8a e0       	ldi	r24, 0x0A	; 10
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <iter0.1735+0x1>
     f22:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <iter0.1735>
     f26:	30 93 b0 01 	sts	0x01B0, r19	; 0x8001b0 <iter1.1736+0x1>
     f2a:	20 93 af 01 	sts	0x01AF, r18	; 0x8001af <iter1.1736>
     f2e:	3c c0       	rjmp	.+120    	; 0xfa8 <Read_Pressure+0xf0>
		sum += Fir_low_b[iter0] * data[iter1];
     f30:	df 01       	movw	r26, r30
     f32:	aa 0f       	add	r26, r26
     f34:	bb 1f       	adc	r27, r27
     f36:	aa 0f       	add	r26, r26
     f38:	bb 1f       	adc	r27, r27
     f3a:	a7 59       	subi	r26, 0x97	; 151
     f3c:	be 4f       	sbci	r27, 0xFE	; 254
     f3e:	2d 91       	ld	r18, X+
     f40:	3d 91       	ld	r19, X+
     f42:	4d 91       	ld	r20, X+
     f44:	5c 91       	ld	r21, X
     f46:	c0 91 af 01 	lds	r28, 0x01AF	; 0x8001af <iter1.1736>
     f4a:	d0 91 b0 01 	lds	r29, 0x01B0	; 0x8001b0 <iter1.1736+0x1>
     f4e:	de 01       	movw	r26, r28
     f50:	aa 0f       	add	r26, r26
     f52:	bb 1f       	adc	r27, r27
     f54:	a9 54       	subi	r26, 0x49	; 73
     f56:	be 4f       	sbci	r27, 0xFE	; 254
     f58:	0d 90       	ld	r0, X+
     f5a:	bc 91       	ld	r27, X
     f5c:	a0 2d       	mov	r26, r0
     f5e:	62 d6       	rcall	.+3268   	; 0x1c24 <__mulshisi3>
     f60:	00 91 b3 01 	lds	r16, 0x01B3	; 0x8001b3 <sum.1737>
     f64:	10 91 b4 01 	lds	r17, 0x01B4	; 0x8001b4 <sum.1737+0x1>
     f68:	20 91 b5 01 	lds	r18, 0x01B5	; 0x8001b5 <sum.1737+0x2>
     f6c:	30 91 b6 01 	lds	r19, 0x01B6	; 0x8001b6 <sum.1737+0x3>
     f70:	dc 01       	movw	r26, r24
     f72:	cb 01       	movw	r24, r22
     f74:	80 0f       	add	r24, r16
     f76:	91 1f       	adc	r25, r17
     f78:	a2 1f       	adc	r26, r18
     f7a:	b3 1f       	adc	r27, r19
     f7c:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <sum.1737>
     f80:	90 93 b4 01 	sts	0x01B4, r25	; 0x8001b4 <sum.1737+0x1>
     f84:	a0 93 b5 01 	sts	0x01B5, r26	; 0x8001b5 <sum.1737+0x2>
     f88:	b0 93 b6 01 	sts	0x01B6, r27	; 0x8001b6 <sum.1737+0x3>
		iter1=(iter1+1)%11;
     f8c:	ce 01       	movw	r24, r28
     f8e:	01 96       	adiw	r24, 0x01	; 1
     f90:	6b e0       	ldi	r22, 0x0B	; 11
     f92:	70 e0       	ldi	r23, 0x00	; 0
     f94:	18 d6       	rcall	.+3120   	; 0x1bc6 <__divmodhi4>
     f96:	90 93 b0 01 	sts	0x01B0, r25	; 0x8001b0 <iter1.1736+0x1>
     f9a:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <iter1.1736>
	i = (i+1) % 11;
	j = (j+1) % 11;
	data[j] = ADC;

	sum=0;
	for(iter0 = 10, iter1 = i; iter0 >= 0; iter0--){
     f9e:	31 97       	sbiw	r30, 0x01	; 1
     fa0:	f0 93 b2 01 	sts	0x01B2, r31	; 0x8001b2 <iter0.1735+0x1>
     fa4:	e0 93 b1 01 	sts	0x01B1, r30	; 0x8001b1 <iter0.1735>
     fa8:	e0 91 b1 01 	lds	r30, 0x01B1	; 0x8001b1 <iter0.1735>
     fac:	f0 91 b2 01 	lds	r31, 0x01B2	; 0x8001b2 <iter0.1735+0x1>
     fb0:	ff 23       	and	r31, r31
     fb2:	0c f0       	brlt	.+2      	; 0xfb6 <Read_Pressure+0xfe>
     fb4:	bd cf       	rjmp	.-134    	; 0xf30 <Read_Pressure+0x78>
		sum += Fir_low_b[iter0] * data[iter1];
		iter1=(iter1+1)%11;
	}

	pressure_sensor_val = sum/10000;
     fb6:	60 91 b3 01 	lds	r22, 0x01B3	; 0x8001b3 <sum.1737>
     fba:	70 91 b4 01 	lds	r23, 0x01B4	; 0x8001b4 <sum.1737+0x1>
     fbe:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <sum.1737+0x2>
     fc2:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <sum.1737+0x3>
     fc6:	20 e1       	ldi	r18, 0x10	; 16
     fc8:	37 e2       	ldi	r19, 0x27	; 39
     fca:	40 e0       	ldi	r20, 0x00	; 0
     fcc:	50 e0       	ldi	r21, 0x00	; 0
     fce:	0e d6       	rcall	.+3100   	; 0x1bec <__divmodsi4>
     fd0:	30 93 45 02 	sts	0x0245, r19	; 0x800245 <pressure_sensor_val+0x1>
     fd4:	20 93 44 02 	sts	0x0244, r18	; 0x800244 <pressure_sensor_val>
}
     fd8:	df 91       	pop	r29
     fda:	cf 91       	pop	r28
     fdc:	1f 91       	pop	r17
     fde:	0f 91       	pop	r16
     fe0:	08 95       	ret

00000fe2 <Read_Thermister>:

inline void Read_Thermister(){
     fe2:	cf 92       	push	r12
     fe4:	df 92       	push	r13
     fe6:	ef 92       	push	r14
     fe8:	ff 92       	push	r15
	ADCSRA |= (1 << ADIF); // ADC 변환 완료 플래그 클리어
     fea:	86 b1       	in	r24, 0x06	; 6
     fec:	80 61       	ori	r24, 0x10	; 16
     fee:	86 b9       	out	0x06, r24	; 6
	
	temp_sensor_val = (1-0.188)*temp_sensor_val + 0.188*ADC;
     ff0:	60 91 2f 02 	lds	r22, 0x022F	; 0x80022f <temp_sensor_val>
     ff4:	70 91 30 02 	lds	r23, 0x0230	; 0x800230 <temp_sensor_val+0x1>
     ff8:	07 2e       	mov	r0, r23
     ffa:	00 0c       	add	r0, r0
     ffc:	88 0b       	sbc	r24, r24
     ffe:	99 0b       	sbc	r25, r25
    1000:	66 d3       	rcall	.+1740   	; 0x16ce <__floatsisf>
    1002:	2c e3       	ldi	r18, 0x3C	; 60
    1004:	3f ed       	ldi	r19, 0xDF	; 223
    1006:	4f e4       	ldi	r20, 0x4F	; 79
    1008:	5f e3       	ldi	r21, 0x3F	; 63
    100a:	5a d4       	rcall	.+2228   	; 0x18c0 <__mulsf3>
    100c:	6b 01       	movw	r12, r22
    100e:	7c 01       	movw	r14, r24
    1010:	64 b1       	in	r22, 0x04	; 4
    1012:	75 b1       	in	r23, 0x05	; 5
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	58 d3       	rcall	.+1712   	; 0x16ca <__floatunsisf>
    101a:	22 e1       	ldi	r18, 0x12	; 18
    101c:	33 e8       	ldi	r19, 0x83	; 131
    101e:	40 e4       	ldi	r20, 0x40	; 64
    1020:	5e e3       	ldi	r21, 0x3E	; 62
    1022:	4e d4       	rcall	.+2204   	; 0x18c0 <__mulsf3>
    1024:	9b 01       	movw	r18, r22
    1026:	ac 01       	movw	r20, r24
    1028:	c7 01       	movw	r24, r14
    102a:	b6 01       	movw	r22, r12
    102c:	4d d2       	rcall	.+1178   	; 0x14c8 <__addsf3>
    102e:	1c d3       	rcall	.+1592   	; 0x1668 <__fixsfsi>
    1030:	70 93 30 02 	sts	0x0230, r23	; 0x800230 <temp_sensor_val+0x1>
    1034:	60 93 2f 02 	sts	0x022F, r22	; 0x80022f <temp_sensor_val>
}
    1038:	ff 90       	pop	r15
    103a:	ef 90       	pop	r14
    103c:	df 90       	pop	r13
    103e:	cf 90       	pop	r12
    1040:	08 95       	ret

00001042 <Read_Shock>:

inline void Read_Shock(){
    1042:	cf 92       	push	r12
    1044:	df 92       	push	r13
    1046:	ef 92       	push	r14
    1048:	ff 92       	push	r15
    104a:	0f 93       	push	r16
    104c:	1f 93       	push	r17
    104e:	cf 93       	push	r28
    1050:	df 93       	push	r29
	ADCSRA |= (1 << ADIF); // ADC 변환 완료 플래그 클리어
    1052:	86 b1       	in	r24, 0x06	; 6
    1054:	80 61       	ori	r24, 0x10	; 16
    1056:	86 b9       	out	0x06, r24	; 6
	static long sum = 0;
	static short dataX[3] = {0,0,0};
	static short dataY[2] = {0,0};
	static short iX = 0, jX = 2, iY=0, jY=1;
	
	iX = (iX+1) % 3;
    1058:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <iX.1753>
    105c:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <iX.1753+0x1>
    1060:	01 96       	adiw	r24, 0x01	; 1
    1062:	e3 e0       	ldi	r30, 0x03	; 3
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	bf 01       	movw	r22, r30
    1068:	ae d5       	rcall	.+2908   	; 0x1bc6 <__divmodhi4>
    106a:	9c 01       	movw	r18, r24
    106c:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <iX.1753+0x1>
    1070:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <iX.1753>
	jX = (jX+1) % 3;
    1074:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <jX.1754>
    1078:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <jX.1754+0x1>
    107c:	01 96       	adiw	r24, 0x01	; 1
    107e:	bf 01       	movw	r22, r30
    1080:	a2 d5       	rcall	.+2884   	; 0x1bc6 <__divmodhi4>
    1082:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <jX.1754+0x1>
    1086:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <jX.1754>
	dataX[jX] = ADC;
    108a:	44 b1       	in	r20, 0x04	; 4
    108c:	55 b1       	in	r21, 0x05	; 5
    108e:	88 0f       	add	r24, r24
    1090:	99 1f       	adc	r25, r25
    1092:	fc 01       	movw	r30, r24
    1094:	e9 55       	subi	r30, 0x59	; 89
    1096:	fe 4f       	sbci	r31, 0xFE	; 254
    1098:	51 83       	std	Z+1, r21	; 0x01
    109a:	40 83       	st	Z, r20
	
	sum=0;
    109c:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <sum.1750>
    10a0:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <sum.1750+0x1>
    10a4:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <sum.1750+0x2>
    10a8:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <sum.1750+0x3>
	for(iter0 = 2, iter1 = iX; iter0 >= 0; iter0--){
    10ac:	82 e0       	ldi	r24, 0x02	; 2
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <iter0.1748+0x1>
    10b4:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <iter0.1748>
    10b8:	30 93 a0 01 	sts	0x01A0, r19	; 0x8001a0 <iter1.1749+0x1>
    10bc:	20 93 9f 01 	sts	0x019F, r18	; 0x80019f <iter1.1749>
    10c0:	3c c0       	rjmp	.+120    	; 0x113a <__stack+0x3b>
		sum += IIR_high_b[iter0] * dataX[iter1];
    10c2:	df 01       	movw	r26, r30
    10c4:	aa 0f       	add	r26, r26
    10c6:	bb 1f       	adc	r27, r27
    10c8:	aa 0f       	add	r26, r26
    10ca:	bb 1f       	adc	r27, r27
    10cc:	a7 5b       	subi	r26, 0xB7	; 183
    10ce:	be 4f       	sbci	r27, 0xFE	; 254
    10d0:	2d 91       	ld	r18, X+
    10d2:	3d 91       	ld	r19, X+
    10d4:	4d 91       	ld	r20, X+
    10d6:	5c 91       	ld	r21, X
    10d8:	c0 91 9f 01 	lds	r28, 0x019F	; 0x80019f <iter1.1749>
    10dc:	d0 91 a0 01 	lds	r29, 0x01A0	; 0x8001a0 <iter1.1749+0x1>
    10e0:	de 01       	movw	r26, r28
    10e2:	aa 0f       	add	r26, r26
    10e4:	bb 1f       	adc	r27, r27
    10e6:	a9 55       	subi	r26, 0x59	; 89
    10e8:	be 4f       	sbci	r27, 0xFE	; 254
    10ea:	0d 90       	ld	r0, X+
    10ec:	bc 91       	ld	r27, X
    10ee:	a0 2d       	mov	r26, r0
    10f0:	99 d5       	rcall	.+2866   	; 0x1c24 <__mulshisi3>
    10f2:	00 91 a3 01 	lds	r16, 0x01A3	; 0x8001a3 <sum.1750>
    10f6:	10 91 a4 01 	lds	r17, 0x01A4	; 0x8001a4 <sum.1750+0x1>
    10fa:	20 91 a5 01 	lds	r18, 0x01A5	; 0x8001a5 <sum.1750+0x2>
    10fe:	30 91 a6 01 	lds	r19, 0x01A6	; 0x8001a6 <sum.1750+0x3>
    1102:	dc 01       	movw	r26, r24
    1104:	cb 01       	movw	r24, r22
    1106:	80 0f       	add	r24, r16
    1108:	91 1f       	adc	r25, r17
    110a:	a2 1f       	adc	r26, r18
    110c:	b3 1f       	adc	r27, r19
    110e:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <sum.1750>
    1112:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <sum.1750+0x1>
    1116:	a0 93 a5 01 	sts	0x01A5, r26	; 0x8001a5 <sum.1750+0x2>
    111a:	b0 93 a6 01 	sts	0x01A6, r27	; 0x8001a6 <sum.1750+0x3>
		iter1=(iter1+1)%3;
    111e:	ce 01       	movw	r24, r28
    1120:	01 96       	adiw	r24, 0x01	; 1
    1122:	63 e0       	ldi	r22, 0x03	; 3
    1124:	70 e0       	ldi	r23, 0x00	; 0
    1126:	4f d5       	rcall	.+2718   	; 0x1bc6 <__divmodhi4>
    1128:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <iter1.1749+0x1>
    112c:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <iter1.1749>
	iX = (iX+1) % 3;
	jX = (jX+1) % 3;
	dataX[jX] = ADC;
	
	sum=0;
	for(iter0 = 2, iter1 = iX; iter0 >= 0; iter0--){
    1130:	31 97       	sbiw	r30, 0x01	; 1
    1132:	f0 93 a2 01 	sts	0x01A2, r31	; 0x8001a2 <iter0.1748+0x1>
    1136:	e0 93 a1 01 	sts	0x01A1, r30	; 0x8001a1 <iter0.1748>
    113a:	e0 91 a1 01 	lds	r30, 0x01A1	; 0x8001a1 <iter0.1748>
    113e:	f0 91 a2 01 	lds	r31, 0x01A2	; 0x8001a2 <iter0.1748+0x1>
    1142:	ff 23       	and	r31, r31
    1144:	0c f0       	brlt	.+2      	; 0x1148 <__stack+0x49>
    1146:	bd cf       	rjmp	.-134    	; 0x10c2 <Read_Shock+0x80>
		sum += IIR_high_b[iter0] * dataX[iter1];
		iter1=(iter1+1)%3;
	}
	for(iter0 = 1, iter1 = iY; iter0>=0; iter0--){
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <iter0.1748+0x1>
    1150:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <iter0.1748>
    1154:	00 91 9d 01 	lds	r16, 0x019D	; 0x80019d <iY.1755>
    1158:	10 91 9e 01 	lds	r17, 0x019E	; 0x80019e <iY.1755+0x1>
    115c:	10 93 a0 01 	sts	0x01A0, r17	; 0x8001a0 <iter1.1749+0x1>
    1160:	00 93 9f 01 	sts	0x019F, r16	; 0x80019f <iter1.1749>
    1164:	41 c0       	rjmp	.+130    	; 0x11e8 <__stack+0xe9>
		sum -= IIR_high_a[iter0] * dataY[iter1];
    1166:	fe 01       	movw	r30, r28
    1168:	ee 0f       	add	r30, r30
    116a:	ff 1f       	adc	r31, r31
    116c:	ee 0f       	add	r30, r30
    116e:	ff 1f       	adc	r31, r31
    1170:	ef 5b       	subi	r30, 0xBF	; 191
    1172:	fe 4f       	sbci	r31, 0xFE	; 254
    1174:	20 81       	ld	r18, Z
    1176:	31 81       	ldd	r19, Z+1	; 0x01
    1178:	42 81       	ldd	r20, Z+2	; 0x02
    117a:	53 81       	ldd	r21, Z+3	; 0x03
    117c:	e0 91 9f 01 	lds	r30, 0x019F	; 0x80019f <iter1.1749>
    1180:	f0 91 a0 01 	lds	r31, 0x01A0	; 0x8001a0 <iter1.1749+0x1>
    1184:	df 01       	movw	r26, r30
    1186:	aa 0f       	add	r26, r26
    1188:	bb 1f       	adc	r27, r27
    118a:	a7 56       	subi	r26, 0x67	; 103
    118c:	be 4f       	sbci	r27, 0xFE	; 254
    118e:	0d 90       	ld	r0, X+
    1190:	bc 91       	ld	r27, X
    1192:	a0 2d       	mov	r26, r0
    1194:	47 d5       	rcall	.+2702   	; 0x1c24 <__mulshisi3>
    1196:	c0 90 a3 01 	lds	r12, 0x01A3	; 0x8001a3 <sum.1750>
    119a:	d0 90 a4 01 	lds	r13, 0x01A4	; 0x8001a4 <sum.1750+0x1>
    119e:	e0 90 a5 01 	lds	r14, 0x01A5	; 0x8001a5 <sum.1750+0x2>
    11a2:	f0 90 a6 01 	lds	r15, 0x01A6	; 0x8001a6 <sum.1750+0x3>
    11a6:	a7 01       	movw	r20, r14
    11a8:	96 01       	movw	r18, r12
    11aa:	26 1b       	sub	r18, r22
    11ac:	37 0b       	sbc	r19, r23
    11ae:	48 0b       	sbc	r20, r24
    11b0:	59 0b       	sbc	r21, r25
    11b2:	20 93 a3 01 	sts	0x01A3, r18	; 0x8001a3 <sum.1750>
    11b6:	30 93 a4 01 	sts	0x01A4, r19	; 0x8001a4 <sum.1750+0x1>
    11ba:	40 93 a5 01 	sts	0x01A5, r20	; 0x8001a5 <sum.1750+0x2>
    11be:	50 93 a6 01 	sts	0x01A6, r21	; 0x8001a6 <sum.1750+0x3>
		iter1=(iter1+1)%2;
    11c2:	cf 01       	movw	r24, r30
    11c4:	01 96       	adiw	r24, 0x01	; 1
    11c6:	81 70       	andi	r24, 0x01	; 1
    11c8:	90 78       	andi	r25, 0x80	; 128
    11ca:	99 23       	and	r25, r25
    11cc:	24 f4       	brge	.+8      	; 0x11d6 <__stack+0xd7>
    11ce:	01 97       	sbiw	r24, 0x01	; 1
    11d0:	8e 6f       	ori	r24, 0xFE	; 254
    11d2:	9f 6f       	ori	r25, 0xFF	; 255
    11d4:	01 96       	adiw	r24, 0x01	; 1
    11d6:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <iter1.1749+0x1>
    11da:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <iter1.1749>
	sum=0;
	for(iter0 = 2, iter1 = iX; iter0 >= 0; iter0--){
		sum += IIR_high_b[iter0] * dataX[iter1];
		iter1=(iter1+1)%3;
	}
	for(iter0 = 1, iter1 = iY; iter0>=0; iter0--){
    11de:	21 97       	sbiw	r28, 0x01	; 1
    11e0:	d0 93 a2 01 	sts	0x01A2, r29	; 0x8001a2 <iter0.1748+0x1>
    11e4:	c0 93 a1 01 	sts	0x01A1, r28	; 0x8001a1 <iter0.1748>
    11e8:	c0 91 a1 01 	lds	r28, 0x01A1	; 0x8001a1 <iter0.1748>
    11ec:	d0 91 a2 01 	lds	r29, 0x01A2	; 0x8001a2 <iter0.1748+0x1>
    11f0:	dd 23       	and	r29, r29
    11f2:	0c f0       	brlt	.+2      	; 0x11f6 <__stack+0xf7>
    11f4:	b8 cf       	rjmp	.-144    	; 0x1166 <__stack+0x67>
		sum -= IIR_high_a[iter0] * dataY[iter1];
		iter1=(iter1+1)%2;
	}
	
	iY = (iY+1)%2;
    11f6:	0f 5f       	subi	r16, 0xFF	; 255
    11f8:	1f 4f       	sbci	r17, 0xFF	; 255
    11fa:	01 70       	andi	r16, 0x01	; 1
    11fc:	10 78       	andi	r17, 0x80	; 128
    11fe:	11 23       	and	r17, r17
    1200:	34 f4       	brge	.+12     	; 0x120e <__stack+0x10f>
    1202:	01 50       	subi	r16, 0x01	; 1
    1204:	11 09       	sbc	r17, r1
    1206:	0e 6f       	ori	r16, 0xFE	; 254
    1208:	1f 6f       	ori	r17, 0xFF	; 255
    120a:	0f 5f       	subi	r16, 0xFF	; 255
    120c:	1f 4f       	sbci	r17, 0xFF	; 255
    120e:	10 93 9e 01 	sts	0x019E, r17	; 0x80019e <iY.1755+0x1>
    1212:	00 93 9d 01 	sts	0x019D, r16	; 0x80019d <iY.1755>
	jY = (jY+1)%2;
    1216:	c0 91 31 01 	lds	r28, 0x0131	; 0x800131 <jY.1756>
    121a:	d0 91 32 01 	lds	r29, 0x0132	; 0x800132 <jY.1756+0x1>
    121e:	21 96       	adiw	r28, 0x01	; 1
    1220:	c1 70       	andi	r28, 0x01	; 1
    1222:	d0 78       	andi	r29, 0x80	; 128
    1224:	dd 23       	and	r29, r29
    1226:	24 f4       	brge	.+8      	; 0x1230 <__stack+0x131>
    1228:	21 97       	sbiw	r28, 0x01	; 1
    122a:	ce 6f       	ori	r28, 0xFE	; 254
    122c:	df 6f       	ori	r29, 0xFF	; 255
    122e:	21 96       	adiw	r28, 0x01	; 1
    1230:	d0 93 32 01 	sts	0x0132, r29	; 0x800132 <jY.1756+0x1>
    1234:	c0 93 31 01 	sts	0x0131, r28	; 0x800131 <jY.1756>
	dataY[jY] = sum/10000;
    1238:	60 91 a3 01 	lds	r22, 0x01A3	; 0x8001a3 <sum.1750>
    123c:	70 91 a4 01 	lds	r23, 0x01A4	; 0x8001a4 <sum.1750+0x1>
    1240:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <sum.1750+0x2>
    1244:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <sum.1750+0x3>
    1248:	20 e1       	ldi	r18, 0x10	; 16
    124a:	37 e2       	ldi	r19, 0x27	; 39
    124c:	40 e0       	ldi	r20, 0x00	; 0
    124e:	50 e0       	ldi	r21, 0x00	; 0
    1250:	cd d4       	rcall	.+2458   	; 0x1bec <__divmodsi4>
    1252:	cc 0f       	add	r28, r28
    1254:	dd 1f       	adc	r29, r29
    1256:	c7 56       	subi	r28, 0x67	; 103
    1258:	de 4f       	sbci	r29, 0xFE	; 254
    125a:	39 83       	std	Y+1, r19	; 0x01
    125c:	28 83       	st	Y, r18
	shk_sensor_val = dataY[jY];
    125e:	30 93 4d 02 	sts	0x024D, r19	; 0x80024d <shk_sensor_val+0x1>
    1262:	20 93 4c 02 	sts	0x024C, r18	; 0x80024c <shk_sensor_val>
}
    1266:	df 91       	pop	r29
    1268:	cf 91       	pop	r28
    126a:	1f 91       	pop	r17
    126c:	0f 91       	pop	r16
    126e:	ff 90       	pop	r15
    1270:	ef 90       	pop	r14
    1272:	df 90       	pop	r13
    1274:	cf 90       	pop	r12
    1276:	08 95       	ret

00001278 <Reset_sensor_val>:

inline void Reset_sensor_val(){
	pressure_sensor_val = 0;
    1278:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <pressure_sensor_val+0x1>
    127c:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <pressure_sensor_val>
	cds_sensor_val	= 0;
    1280:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <cds_sensor_val+0x1>
    1284:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <cds_sensor_val>
	temp_sensor_val = 0;	temp_en = 0x01;
    1288:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <temp_sensor_val+0x1>
    128c:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <temp_sensor_val>
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <temp_en+0x1>
    1298:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <temp_en>
	shk_sensor_val	= 0;	shk_detected = 0;
    129c:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <shk_sensor_val+0x1>
    12a0:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <shk_sensor_val>
    12a4:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <shk_detected>
	psd_sensor_val	= 0;
    12a8:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <psd_sensor_val+0x1>
    12ac:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <psd_sensor_val>
	fire_sensor_val	= 0;	Fire_Detected = 0x00;
    12b0:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <fire_sensor_val+0x1>
    12b4:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <fire_sensor_val>
    12b8:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <Fire_Detected>
    12bc:	08 95       	ret

000012be <calc_dist>:
}

int calc_dist(){
	return (27.61/(psd_sensor_val*1.0-0.1696))*1000;
    12be:	60 91 40 02 	lds	r22, 0x0240	; 0x800240 <psd_sensor_val>
    12c2:	70 91 41 02 	lds	r23, 0x0241	; 0x800241 <psd_sensor_val+0x1>
    12c6:	07 2e       	mov	r0, r23
    12c8:	00 0c       	add	r0, r0
    12ca:	88 0b       	sbc	r24, r24
    12cc:	99 0b       	sbc	r25, r25
    12ce:	ff d1       	rcall	.+1022   	; 0x16ce <__floatsisf>
    12d0:	2f e9       	ldi	r18, 0x9F	; 159
    12d2:	3b ea       	ldi	r19, 0xAB	; 171
    12d4:	4d e2       	ldi	r20, 0x2D	; 45
    12d6:	5e e3       	ldi	r21, 0x3E	; 62
    12d8:	f6 d0       	rcall	.+492    	; 0x14c6 <__subsf3>
    12da:	9b 01       	movw	r18, r22
    12dc:	ac 01       	movw	r20, r24
    12de:	68 e4       	ldi	r22, 0x48	; 72
    12e0:	71 ee       	ldi	r23, 0xE1	; 225
    12e2:	8c ed       	ldi	r24, 0xDC	; 220
    12e4:	91 e4       	ldi	r25, 0x41	; 65
    12e6:	58 d1       	rcall	.+688    	; 0x1598 <__divsf3>
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	4a e7       	ldi	r20, 0x7A	; 122
    12ee:	54 e4       	ldi	r21, 0x44	; 68
    12f0:	e7 d2       	rcall	.+1486   	; 0x18c0 <__mulsf3>
    12f2:	ba d1       	rcall	.+884    	; 0x1668 <__fixsfsi>
}
    12f4:	cb 01       	movw	r24, r22
    12f6:	08 95       	ret

000012f8 <calc_hz>:
int calc_hz(){
	if(fire_sensor_val>=500) return 200;
    12f8:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <fire_sensor_val>
    12fc:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <fire_sensor_val+0x1>
    1300:	84 3f       	cpi	r24, 0xF4	; 244
    1302:	21 e0       	ldi	r18, 0x01	; 1
    1304:	92 07       	cpc	r25, r18
    1306:	8c f4       	brge	.+34     	; 0x132a <calc_hz+0x32>
	if(fire_sensor_val >= 400) return 190;
    1308:	80 39       	cpi	r24, 0x90	; 144
    130a:	21 e0       	ldi	r18, 0x01	; 1
    130c:	92 07       	cpc	r25, r18
    130e:	84 f4       	brge	.+32     	; 0x1330 <calc_hz+0x38>
	else if(fire_sensor_val >= 350) return 180;
    1310:	8e 35       	cpi	r24, 0x5E	; 94
    1312:	21 e0       	ldi	r18, 0x01	; 1
    1314:	92 07       	cpc	r25, r18
    1316:	7c f4       	brge	.+30     	; 0x1336 <calc_hz+0x3e>
	else if(fire_sensor_val >= 230) return 170;
    1318:	86 3e       	cpi	r24, 0xE6	; 230
    131a:	91 05       	cpc	r25, r1
    131c:	7c f4       	brge	.+30     	; 0x133c <calc_hz+0x44>
	else if(fire_sensor_val >= 180) return 150;
    131e:	84 3b       	cpi	r24, 0xB4	; 180
    1320:	91 05       	cpc	r25, r1
    1322:	7c f0       	brlt	.+30     	; 0x1342 <calc_hz+0x4a>
    1324:	86 e9       	ldi	r24, 0x96	; 150
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	08 95       	ret

int calc_dist(){
	return (27.61/(psd_sensor_val*1.0-0.1696))*1000;
}
int calc_hz(){
	if(fire_sensor_val>=500) return 200;
    132a:	88 ec       	ldi	r24, 0xC8	; 200
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	08 95       	ret
	if(fire_sensor_val >= 400) return 190;
    1330:	8e eb       	ldi	r24, 0xBE	; 190
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	08 95       	ret
	else if(fire_sensor_val >= 350) return 180;
    1336:	84 eb       	ldi	r24, 0xB4	; 180
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	08 95       	ret
	else if(fire_sensor_val >= 230) return 170;
    133c:	8a ea       	ldi	r24, 0xAA	; 170
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	08 95       	ret
	else if(fire_sensor_val >= 180) return 150;
	else return 100;
    1342:	84 e6       	ldi	r24, 0x64	; 100
    1344:	90 e0       	ldi	r25, 0x00	; 0
}
    1346:	08 95       	ret

00001348 <calc_force>:
int calc_force(){
	if(pressure_sensor_val <= 10)
    1348:	60 91 44 02 	lds	r22, 0x0244	; 0x800244 <pressure_sensor_val>
    134c:	70 91 45 02 	lds	r23, 0x0245	; 0x800245 <pressure_sensor_val+0x1>
    1350:	6b 30       	cpi	r22, 0x0B	; 11
    1352:	71 05       	cpc	r23, r1
    1354:	08 f1       	brcs	.+66     	; 0x1398 <calc_force+0x50>
	return 0;
	else
	return pow(2.718, (pressure_sensor_val*5.0/1024.0-0.3456)/0.6935);
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	b7 d1       	rcall	.+878    	; 0x16ca <__floatunsisf>
    135c:	20 e0       	ldi	r18, 0x00	; 0
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	40 ea       	ldi	r20, 0xA0	; 160
    1362:	50 e4       	ldi	r21, 0x40	; 64
    1364:	ad d2       	rcall	.+1370   	; 0x18c0 <__mulsf3>
    1366:	20 e0       	ldi	r18, 0x00	; 0
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	40 e8       	ldi	r20, 0x80	; 128
    136c:	5a e3       	ldi	r21, 0x3A	; 58
    136e:	a8 d2       	rcall	.+1360   	; 0x18c0 <__mulsf3>
    1370:	2c e7       	ldi	r18, 0x7C	; 124
    1372:	32 ef       	ldi	r19, 0xF2	; 242
    1374:	40 eb       	ldi	r20, 0xB0	; 176
    1376:	5e e3       	ldi	r21, 0x3E	; 62
    1378:	a6 d0       	rcall	.+332    	; 0x14c6 <__subsf3>
    137a:	27 e3       	ldi	r18, 0x37	; 55
    137c:	39 e8       	ldi	r19, 0x89	; 137
    137e:	41 e3       	ldi	r20, 0x31	; 49
    1380:	5f e3       	ldi	r21, 0x3F	; 63
    1382:	0a d1       	rcall	.+532    	; 0x1598 <__divsf3>
    1384:	9b 01       	movw	r18, r22
    1386:	ac 01       	movw	r20, r24
    1388:	66 eb       	ldi	r22, 0xB6	; 182
    138a:	73 ef       	ldi	r23, 0xF3	; 243
    138c:	8d e2       	ldi	r24, 0x2D	; 45
    138e:	90 e4       	ldi	r25, 0x40	; 64
    1390:	fa d2       	rcall	.+1524   	; 0x1986 <pow>
    1392:	6a d1       	rcall	.+724    	; 0x1668 <__fixsfsi>
    1394:	cb 01       	movw	r24, r22
    1396:	08 95       	ret
	else if(fire_sensor_val >= 180) return 150;
	else return 100;
}
int calc_force(){
	if(pressure_sensor_val <= 10)
	return 0;
    1398:	80 e0       	ldi	r24, 0x00	; 0
    139a:	90 e0       	ldi	r25, 0x00	; 0
	else
	return pow(2.718, (pressure_sensor_val*5.0/1024.0-0.3456)/0.6935);
}
    139c:	08 95       	ret

0000139e <calc_speed>:
char calc_speed(){
	return (temp_sensor_val > Thermister_MAX)?Servo_MAX_Speed:(temp_sensor_val<Thermister_MIN)?Servo_MIN_Speed:
    139e:	60 91 2f 02 	lds	r22, 0x022F	; 0x80022f <temp_sensor_val>
    13a2:	70 91 30 02 	lds	r23, 0x0230	; 0x800230 <temp_sensor_val+0x1>
    13a6:	61 39       	cpi	r22, 0x91	; 145
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	78 07       	cpc	r23, r24
    13ac:	bc f4       	brge	.+46     	; 0x13dc <calc_speed+0x3e>
    13ae:	64 36       	cpi	r22, 0x64	; 100
    13b0:	71 05       	cpc	r23, r1
    13b2:	b4 f0       	brlt	.+44     	; 0x13e0 <calc_speed+0x42>
	(Servo_MAX_Speed-Servo_MIN_Speed)/(Thermister_MAX-Thermister_MIN)*(temp_sensor_val-Thermister_MIN)+Servo_MIN_Speed;
    13b4:	64 56       	subi	r22, 0x64	; 100
    13b6:	71 09       	sbc	r23, r1
    13b8:	07 2e       	mov	r0, r23
    13ba:	00 0c       	add	r0, r0
    13bc:	88 0b       	sbc	r24, r24
    13be:	99 0b       	sbc	r25, r25
    13c0:	86 d1       	rcall	.+780    	; 0x16ce <__floatsisf>
    13c2:	2c eb       	ldi	r18, 0xBC	; 188
    13c4:	3b eb       	ldi	r19, 0xBB	; 187
    13c6:	4b eb       	ldi	r20, 0xBB	; 187
    13c8:	5e eb       	ldi	r21, 0xBE	; 190
    13ca:	7a d2       	rcall	.+1268   	; 0x18c0 <__mulsf3>
    13cc:	20 e0       	ldi	r18, 0x00	; 0
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	42 e0       	ldi	r20, 0x02	; 2
    13d2:	53 e4       	ldi	r21, 0x43	; 67
    13d4:	79 d0       	rcall	.+242    	; 0x14c8 <__addsf3>
	return 0;
	else
	return pow(2.718, (pressure_sensor_val*5.0/1024.0-0.3456)/0.6935);
}
char calc_speed(){
	return (temp_sensor_val > Thermister_MAX)?Servo_MAX_Speed:(temp_sensor_val<Thermister_MIN)?Servo_MIN_Speed:
    13d6:	4d d1       	rcall	.+666    	; 0x1672 <__fixunssfsi>
    13d8:	86 2f       	mov	r24, r22
    13da:	08 95       	ret
    13dc:	84 e1       	ldi	r24, 0x14	; 20
    13de:	08 95       	ret
    13e0:	82 e8       	ldi	r24, 0x82	; 130
    13e2:	08 95       	ret

000013e4 <calc_led>:
	(Servo_MAX_Speed-Servo_MIN_Speed)/(Thermister_MAX-Thermister_MIN)*(temp_sensor_val-Thermister_MIN)+Servo_MIN_Speed;
}
    13e4:	cf 92       	push	r12
int calc_led(){
    13e6:	df 92       	push	r13
    13e8:	ef 92       	push	r14
    13ea:	ff 92       	push	r15
	double cds=(4700.0 * 1023)/cds_sensor_val-4700.0;
    13ec:	60 91 39 02 	lds	r22, 0x0239	; 0x800239 <cds_sensor_val>
    13f0:	70 91 3a 02 	lds	r23, 0x023A	; 0x80023a <cds_sensor_val+0x1>
    13f4:	07 2e       	mov	r0, r23
    13f6:	00 0c       	add	r0, r0
    13f8:	88 0b       	sbc	r24, r24
    13fa:	99 0b       	sbc	r25, r25
    13fc:	68 d1       	rcall	.+720    	; 0x16ce <__floatsisf>
    13fe:	9b 01       	movw	r18, r22
    1400:	ac 01       	movw	r20, r24
    1402:	68 e4       	ldi	r22, 0x48	; 72
    1404:	7b eb       	ldi	r23, 0xBB	; 187
    1406:	82 e9       	ldi	r24, 0x92	; 146
    1408:	9a e4       	ldi	r25, 0x4A	; 74
    140a:	c6 d0       	rcall	.+396    	; 0x1598 <__divsf3>
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	30 ee       	ldi	r19, 0xE0	; 224
    1410:	42 e9       	ldi	r20, 0x92	; 146
    1412:	55 e4       	ldi	r21, 0x45	; 69
    1414:	58 d0       	rcall	.+176    	; 0x14c6 <__subsf3>
	double LUX = pow(10, 1-(log(cds)-log(40000))/0.8);
    1416:	14 d2       	rcall	.+1064   	; 0x1840 <log>
    1418:	21 ed       	ldi	r18, 0xD1	; 209
    141a:	3b e8       	ldi	r19, 0x8B	; 139
    141c:	49 e2       	ldi	r20, 0x29	; 41
    141e:	51 e4       	ldi	r21, 0x41	; 65
    1420:	52 d0       	rcall	.+164    	; 0x14c6 <__subsf3>
    1422:	2d ec       	ldi	r18, 0xCD	; 205
    1424:	3c ec       	ldi	r19, 0xCC	; 204
    1426:	4c e4       	ldi	r20, 0x4C	; 76
    1428:	5f e3       	ldi	r21, 0x3F	; 63
    142a:	b6 d0       	rcall	.+364    	; 0x1598 <__divsf3>
    142c:	9b 01       	movw	r18, r22
    142e:	ac 01       	movw	r20, r24
    1430:	60 e0       	ldi	r22, 0x00	; 0
    1432:	70 e0       	ldi	r23, 0x00	; 0
    1434:	80 e8       	ldi	r24, 0x80	; 128
    1436:	9f e3       	ldi	r25, 0x3F	; 63
    1438:	46 d0       	rcall	.+140    	; 0x14c6 <__subsf3>
    143a:	9b 01       	movw	r18, r22
    143c:	ac 01       	movw	r20, r24
    143e:	60 e0       	ldi	r22, 0x00	; 0
    1440:	70 e0       	ldi	r23, 0x00	; 0
    1442:	80 e2       	ldi	r24, 0x20	; 32
    1444:	91 e4       	ldi	r25, 0x41	; 65
    1446:	9f d2       	rcall	.+1342   	; 0x1986 <pow>
    1448:	6b 01       	movw	r12, r22
    144a:	7c 01       	movw	r14, r24
    144c:	20 e0       	ldi	r18, 0x00	; 0
	
	return (LUX > CDS_MAX)?LED_MAX:(LUX<CDS_MIN)?LED_MIN:(LED_MAX-LED_MIN)/(CDS_MAX-CDS_MIN)*(LUX-LED_MIN)+CDS_MIN;
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	4a ef       	ldi	r20, 0xFA	; 250
    1452:	54 e4       	ldi	r21, 0x44	; 68
    1454:	ec d1       	rcall	.+984    	; 0x182e <__gesf2>
    1456:	18 16       	cp	r1, r24
    1458:	ec f0       	brlt	.+58     	; 0x1494 <calc_led+0xb0>
    145a:	20 e0       	ldi	r18, 0x00	; 0
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	48 ec       	ldi	r20, 0xC8	; 200
    1460:	52 e4       	ldi	r21, 0x42	; 66
    1462:	c7 01       	movw	r24, r14
    1464:	b6 01       	movw	r22, r12
    1466:	94 d0       	rcall	.+296    	; 0x1590 <__cmpsf2>
    1468:	88 23       	and	r24, r24
    146a:	bc f0       	brlt	.+46     	; 0x149a <calc_led+0xb6>
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	48 e4       	ldi	r20, 0x48	; 72
    1472:	53 e4       	ldi	r21, 0x43	; 67
    1474:	c7 01       	movw	r24, r14
    1476:	b6 01       	movw	r22, r12
    1478:	26 d0       	rcall	.+76     	; 0x14c6 <__subsf3>
    147a:	2f ea       	ldi	r18, 0xAF	; 175
    147c:	31 ea       	ldi	r19, 0xA1	; 161
    147e:	4c eb       	ldi	r20, 0xBC	; 188
    1480:	5f e3       	ldi	r21, 0x3F	; 63
    1482:	1e d2       	rcall	.+1084   	; 0x18c0 <__mulsf3>
    1484:	20 e0       	ldi	r18, 0x00	; 0
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	48 ec       	ldi	r20, 0xC8	; 200
    148a:	52 e4       	ldi	r21, 0x42	; 66
    148c:	1d d0       	rcall	.+58     	; 0x14c8 <__addsf3>
    148e:	ec d0       	rcall	.+472    	; 0x1668 <__fixsfsi>
    1490:	cb 01       	movw	r24, r22
    1492:	05 c0       	rjmp	.+10     	; 0x149e <calc_led+0xba>
    1494:	88 eb       	ldi	r24, 0xB8	; 184
    1496:	9b e0       	ldi	r25, 0x0B	; 11
    1498:	02 c0       	rjmp	.+4      	; 0x149e <calc_led+0xba>
    149a:	88 ec       	ldi	r24, 0xC8	; 200
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	ff 90       	pop	r15
    14a0:	ef 90       	pop	r14
    14a2:	df 90       	pop	r13
    14a4:	cf 90       	pop	r12
    14a6:	08 95       	ret

000014a8 <UART_init>:
#include "uart.h"

#define UBRR 103

void UART_init(){
	UBRR0L = (unsigned char)UBRR;
    14a8:	87 e6       	ldi	r24, 0x67	; 103
    14aa:	89 b9       	out	0x09, r24	; 9
	UBRR0H = (unsigned char)(UBRR >> 8);
    14ac:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>

	
	UCSR0A = 0x00; //비동기 1배속
    14b0:	1b b8       	out	0x0b, r1	; 11
	UCSR0B = 0x18; //송수신 허가
    14b2:	88 e1       	ldi	r24, 0x18	; 24
    14b4:	8a b9       	out	0x0a, r24	; 10
	//UCSR0B = (1<<RXCIE0)|(1<<TXCIE0)|(1<<RXEN0)|(1<<TXEN0); //recv complete interrupt enable
	UCSR0C = 0x87; //비동기, non-parity mode, stop bit:1 bit, data: 8bit
    14b6:	87 e8       	ldi	r24, 0x87	; 135
    14b8:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    14bc:	08 95       	ret

000014be <__vector_20>:
}

void USART0_TX_vect(unsigned char data){
	while(!(UCSR0A & (1<<UDRE0)));
    14be:	5d 9b       	sbis	0x0b, 5	; 11
    14c0:	fe cf       	rjmp	.-4      	; 0x14be <__vector_20>
	UDR0 = data;
    14c2:	8c b9       	out	0x0c, r24	; 12
    14c4:	08 95       	ret

000014c6 <__subsf3>:
    14c6:	50 58       	subi	r21, 0x80	; 128

000014c8 <__addsf3>:
    14c8:	bb 27       	eor	r27, r27
    14ca:	aa 27       	eor	r26, r26
    14cc:	0e d0       	rcall	.+28     	; 0x14ea <__addsf3x>
    14ce:	75 c1       	rjmp	.+746    	; 0x17ba <__fp_round>
    14d0:	66 d1       	rcall	.+716    	; 0x179e <__fp_pscA>
    14d2:	30 f0       	brcs	.+12     	; 0x14e0 <__addsf3+0x18>
    14d4:	6b d1       	rcall	.+726    	; 0x17ac <__fp_pscB>
    14d6:	20 f0       	brcs	.+8      	; 0x14e0 <__addsf3+0x18>
    14d8:	31 f4       	brne	.+12     	; 0x14e6 <__addsf3+0x1e>
    14da:	9f 3f       	cpi	r25, 0xFF	; 255
    14dc:	11 f4       	brne	.+4      	; 0x14e2 <__addsf3+0x1a>
    14de:	1e f4       	brtc	.+6      	; 0x14e6 <__addsf3+0x1e>
    14e0:	5b c1       	rjmp	.+694    	; 0x1798 <__fp_nan>
    14e2:	0e f4       	brtc	.+2      	; 0x14e6 <__addsf3+0x1e>
    14e4:	e0 95       	com	r30
    14e6:	e7 fb       	bst	r30, 7
    14e8:	51 c1       	rjmp	.+674    	; 0x178c <__fp_inf>

000014ea <__addsf3x>:
    14ea:	e9 2f       	mov	r30, r25
    14ec:	77 d1       	rcall	.+750    	; 0x17dc <__fp_split3>
    14ee:	80 f3       	brcs	.-32     	; 0x14d0 <__addsf3+0x8>
    14f0:	ba 17       	cp	r27, r26
    14f2:	62 07       	cpc	r22, r18
    14f4:	73 07       	cpc	r23, r19
    14f6:	84 07       	cpc	r24, r20
    14f8:	95 07       	cpc	r25, r21
    14fa:	18 f0       	brcs	.+6      	; 0x1502 <__addsf3x+0x18>
    14fc:	71 f4       	brne	.+28     	; 0x151a <__addsf3x+0x30>
    14fe:	9e f5       	brtc	.+102    	; 0x1566 <__addsf3x+0x7c>
    1500:	8f c1       	rjmp	.+798    	; 0x1820 <__fp_zero>
    1502:	0e f4       	brtc	.+2      	; 0x1506 <__addsf3x+0x1c>
    1504:	e0 95       	com	r30
    1506:	0b 2e       	mov	r0, r27
    1508:	ba 2f       	mov	r27, r26
    150a:	a0 2d       	mov	r26, r0
    150c:	0b 01       	movw	r0, r22
    150e:	b9 01       	movw	r22, r18
    1510:	90 01       	movw	r18, r0
    1512:	0c 01       	movw	r0, r24
    1514:	ca 01       	movw	r24, r20
    1516:	a0 01       	movw	r20, r0
    1518:	11 24       	eor	r1, r1
    151a:	ff 27       	eor	r31, r31
    151c:	59 1b       	sub	r21, r25
    151e:	99 f0       	breq	.+38     	; 0x1546 <__addsf3x+0x5c>
    1520:	59 3f       	cpi	r21, 0xF9	; 249
    1522:	50 f4       	brcc	.+20     	; 0x1538 <__addsf3x+0x4e>
    1524:	50 3e       	cpi	r21, 0xE0	; 224
    1526:	68 f1       	brcs	.+90     	; 0x1582 <__addsf3x+0x98>
    1528:	1a 16       	cp	r1, r26
    152a:	f0 40       	sbci	r31, 0x00	; 0
    152c:	a2 2f       	mov	r26, r18
    152e:	23 2f       	mov	r18, r19
    1530:	34 2f       	mov	r19, r20
    1532:	44 27       	eor	r20, r20
    1534:	58 5f       	subi	r21, 0xF8	; 248
    1536:	f3 cf       	rjmp	.-26     	; 0x151e <__addsf3x+0x34>
    1538:	46 95       	lsr	r20
    153a:	37 95       	ror	r19
    153c:	27 95       	ror	r18
    153e:	a7 95       	ror	r26
    1540:	f0 40       	sbci	r31, 0x00	; 0
    1542:	53 95       	inc	r21
    1544:	c9 f7       	brne	.-14     	; 0x1538 <__addsf3x+0x4e>
    1546:	7e f4       	brtc	.+30     	; 0x1566 <__addsf3x+0x7c>
    1548:	1f 16       	cp	r1, r31
    154a:	ba 0b       	sbc	r27, r26
    154c:	62 0b       	sbc	r22, r18
    154e:	73 0b       	sbc	r23, r19
    1550:	84 0b       	sbc	r24, r20
    1552:	ba f0       	brmi	.+46     	; 0x1582 <__addsf3x+0x98>
    1554:	91 50       	subi	r25, 0x01	; 1
    1556:	a1 f0       	breq	.+40     	; 0x1580 <__addsf3x+0x96>
    1558:	ff 0f       	add	r31, r31
    155a:	bb 1f       	adc	r27, r27
    155c:	66 1f       	adc	r22, r22
    155e:	77 1f       	adc	r23, r23
    1560:	88 1f       	adc	r24, r24
    1562:	c2 f7       	brpl	.-16     	; 0x1554 <__addsf3x+0x6a>
    1564:	0e c0       	rjmp	.+28     	; 0x1582 <__addsf3x+0x98>
    1566:	ba 0f       	add	r27, r26
    1568:	62 1f       	adc	r22, r18
    156a:	73 1f       	adc	r23, r19
    156c:	84 1f       	adc	r24, r20
    156e:	48 f4       	brcc	.+18     	; 0x1582 <__addsf3x+0x98>
    1570:	87 95       	ror	r24
    1572:	77 95       	ror	r23
    1574:	67 95       	ror	r22
    1576:	b7 95       	ror	r27
    1578:	f7 95       	ror	r31
    157a:	9e 3f       	cpi	r25, 0xFE	; 254
    157c:	08 f0       	brcs	.+2      	; 0x1580 <__addsf3x+0x96>
    157e:	b3 cf       	rjmp	.-154    	; 0x14e6 <__addsf3+0x1e>
    1580:	93 95       	inc	r25
    1582:	88 0f       	add	r24, r24
    1584:	08 f0       	brcs	.+2      	; 0x1588 <__addsf3x+0x9e>
    1586:	99 27       	eor	r25, r25
    1588:	ee 0f       	add	r30, r30
    158a:	97 95       	ror	r25
    158c:	87 95       	ror	r24
    158e:	08 95       	ret

00001590 <__cmpsf2>:
    1590:	d9 d0       	rcall	.+434    	; 0x1744 <__fp_cmp>
    1592:	08 f4       	brcc	.+2      	; 0x1596 <__cmpsf2+0x6>
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	08 95       	ret

00001598 <__divsf3>:
    1598:	0c d0       	rcall	.+24     	; 0x15b2 <__divsf3x>
    159a:	0f c1       	rjmp	.+542    	; 0x17ba <__fp_round>
    159c:	07 d1       	rcall	.+526    	; 0x17ac <__fp_pscB>
    159e:	40 f0       	brcs	.+16     	; 0x15b0 <__divsf3+0x18>
    15a0:	fe d0       	rcall	.+508    	; 0x179e <__fp_pscA>
    15a2:	30 f0       	brcs	.+12     	; 0x15b0 <__divsf3+0x18>
    15a4:	21 f4       	brne	.+8      	; 0x15ae <__divsf3+0x16>
    15a6:	5f 3f       	cpi	r21, 0xFF	; 255
    15a8:	19 f0       	breq	.+6      	; 0x15b0 <__divsf3+0x18>
    15aa:	f0 c0       	rjmp	.+480    	; 0x178c <__fp_inf>
    15ac:	51 11       	cpse	r21, r1
    15ae:	39 c1       	rjmp	.+626    	; 0x1822 <__fp_szero>
    15b0:	f3 c0       	rjmp	.+486    	; 0x1798 <__fp_nan>

000015b2 <__divsf3x>:
    15b2:	14 d1       	rcall	.+552    	; 0x17dc <__fp_split3>
    15b4:	98 f3       	brcs	.-26     	; 0x159c <__divsf3+0x4>

000015b6 <__divsf3_pse>:
    15b6:	99 23       	and	r25, r25
    15b8:	c9 f3       	breq	.-14     	; 0x15ac <__divsf3+0x14>
    15ba:	55 23       	and	r21, r21
    15bc:	b1 f3       	breq	.-20     	; 0x15aa <__divsf3+0x12>
    15be:	95 1b       	sub	r25, r21
    15c0:	55 0b       	sbc	r21, r21
    15c2:	bb 27       	eor	r27, r27
    15c4:	aa 27       	eor	r26, r26
    15c6:	62 17       	cp	r22, r18
    15c8:	73 07       	cpc	r23, r19
    15ca:	84 07       	cpc	r24, r20
    15cc:	38 f0       	brcs	.+14     	; 0x15dc <__divsf3_pse+0x26>
    15ce:	9f 5f       	subi	r25, 0xFF	; 255
    15d0:	5f 4f       	sbci	r21, 0xFF	; 255
    15d2:	22 0f       	add	r18, r18
    15d4:	33 1f       	adc	r19, r19
    15d6:	44 1f       	adc	r20, r20
    15d8:	aa 1f       	adc	r26, r26
    15da:	a9 f3       	breq	.-22     	; 0x15c6 <__divsf3_pse+0x10>
    15dc:	33 d0       	rcall	.+102    	; 0x1644 <__divsf3_pse+0x8e>
    15de:	0e 2e       	mov	r0, r30
    15e0:	3a f0       	brmi	.+14     	; 0x15f0 <__divsf3_pse+0x3a>
    15e2:	e0 e8       	ldi	r30, 0x80	; 128
    15e4:	30 d0       	rcall	.+96     	; 0x1646 <__divsf3_pse+0x90>
    15e6:	91 50       	subi	r25, 0x01	; 1
    15e8:	50 40       	sbci	r21, 0x00	; 0
    15ea:	e6 95       	lsr	r30
    15ec:	00 1c       	adc	r0, r0
    15ee:	ca f7       	brpl	.-14     	; 0x15e2 <__divsf3_pse+0x2c>
    15f0:	29 d0       	rcall	.+82     	; 0x1644 <__divsf3_pse+0x8e>
    15f2:	fe 2f       	mov	r31, r30
    15f4:	27 d0       	rcall	.+78     	; 0x1644 <__divsf3_pse+0x8e>
    15f6:	66 0f       	add	r22, r22
    15f8:	77 1f       	adc	r23, r23
    15fa:	88 1f       	adc	r24, r24
    15fc:	bb 1f       	adc	r27, r27
    15fe:	26 17       	cp	r18, r22
    1600:	37 07       	cpc	r19, r23
    1602:	48 07       	cpc	r20, r24
    1604:	ab 07       	cpc	r26, r27
    1606:	b0 e8       	ldi	r27, 0x80	; 128
    1608:	09 f0       	breq	.+2      	; 0x160c <__divsf3_pse+0x56>
    160a:	bb 0b       	sbc	r27, r27
    160c:	80 2d       	mov	r24, r0
    160e:	bf 01       	movw	r22, r30
    1610:	ff 27       	eor	r31, r31
    1612:	93 58       	subi	r25, 0x83	; 131
    1614:	5f 4f       	sbci	r21, 0xFF	; 255
    1616:	2a f0       	brmi	.+10     	; 0x1622 <__divsf3_pse+0x6c>
    1618:	9e 3f       	cpi	r25, 0xFE	; 254
    161a:	51 05       	cpc	r21, r1
    161c:	68 f0       	brcs	.+26     	; 0x1638 <__divsf3_pse+0x82>
    161e:	b6 c0       	rjmp	.+364    	; 0x178c <__fp_inf>
    1620:	00 c1       	rjmp	.+512    	; 0x1822 <__fp_szero>
    1622:	5f 3f       	cpi	r21, 0xFF	; 255
    1624:	ec f3       	brlt	.-6      	; 0x1620 <__divsf3_pse+0x6a>
    1626:	98 3e       	cpi	r25, 0xE8	; 232
    1628:	dc f3       	brlt	.-10     	; 0x1620 <__divsf3_pse+0x6a>
    162a:	86 95       	lsr	r24
    162c:	77 95       	ror	r23
    162e:	67 95       	ror	r22
    1630:	b7 95       	ror	r27
    1632:	f7 95       	ror	r31
    1634:	9f 5f       	subi	r25, 0xFF	; 255
    1636:	c9 f7       	brne	.-14     	; 0x162a <__divsf3_pse+0x74>
    1638:	88 0f       	add	r24, r24
    163a:	91 1d       	adc	r25, r1
    163c:	96 95       	lsr	r25
    163e:	87 95       	ror	r24
    1640:	97 f9       	bld	r25, 7
    1642:	08 95       	ret
    1644:	e1 e0       	ldi	r30, 0x01	; 1
    1646:	66 0f       	add	r22, r22
    1648:	77 1f       	adc	r23, r23
    164a:	88 1f       	adc	r24, r24
    164c:	bb 1f       	adc	r27, r27
    164e:	62 17       	cp	r22, r18
    1650:	73 07       	cpc	r23, r19
    1652:	84 07       	cpc	r24, r20
    1654:	ba 07       	cpc	r27, r26
    1656:	20 f0       	brcs	.+8      	; 0x1660 <__divsf3_pse+0xaa>
    1658:	62 1b       	sub	r22, r18
    165a:	73 0b       	sbc	r23, r19
    165c:	84 0b       	sbc	r24, r20
    165e:	ba 0b       	sbc	r27, r26
    1660:	ee 1f       	adc	r30, r30
    1662:	88 f7       	brcc	.-30     	; 0x1646 <__divsf3_pse+0x90>
    1664:	e0 95       	com	r30
    1666:	08 95       	ret

00001668 <__fixsfsi>:
    1668:	04 d0       	rcall	.+8      	; 0x1672 <__fixunssfsi>
    166a:	68 94       	set
    166c:	b1 11       	cpse	r27, r1
    166e:	d9 c0       	rjmp	.+434    	; 0x1822 <__fp_szero>
    1670:	08 95       	ret

00001672 <__fixunssfsi>:
    1672:	bc d0       	rcall	.+376    	; 0x17ec <__fp_splitA>
    1674:	88 f0       	brcs	.+34     	; 0x1698 <__fixunssfsi+0x26>
    1676:	9f 57       	subi	r25, 0x7F	; 127
    1678:	90 f0       	brcs	.+36     	; 0x169e <__fixunssfsi+0x2c>
    167a:	b9 2f       	mov	r27, r25
    167c:	99 27       	eor	r25, r25
    167e:	b7 51       	subi	r27, 0x17	; 23
    1680:	a0 f0       	brcs	.+40     	; 0x16aa <__fixunssfsi+0x38>
    1682:	d1 f0       	breq	.+52     	; 0x16b8 <__fixunssfsi+0x46>
    1684:	66 0f       	add	r22, r22
    1686:	77 1f       	adc	r23, r23
    1688:	88 1f       	adc	r24, r24
    168a:	99 1f       	adc	r25, r25
    168c:	1a f0       	brmi	.+6      	; 0x1694 <__fixunssfsi+0x22>
    168e:	ba 95       	dec	r27
    1690:	c9 f7       	brne	.-14     	; 0x1684 <__fixunssfsi+0x12>
    1692:	12 c0       	rjmp	.+36     	; 0x16b8 <__fixunssfsi+0x46>
    1694:	b1 30       	cpi	r27, 0x01	; 1
    1696:	81 f0       	breq	.+32     	; 0x16b8 <__fixunssfsi+0x46>
    1698:	c3 d0       	rcall	.+390    	; 0x1820 <__fp_zero>
    169a:	b1 e0       	ldi	r27, 0x01	; 1
    169c:	08 95       	ret
    169e:	c0 c0       	rjmp	.+384    	; 0x1820 <__fp_zero>
    16a0:	67 2f       	mov	r22, r23
    16a2:	78 2f       	mov	r23, r24
    16a4:	88 27       	eor	r24, r24
    16a6:	b8 5f       	subi	r27, 0xF8	; 248
    16a8:	39 f0       	breq	.+14     	; 0x16b8 <__fixunssfsi+0x46>
    16aa:	b9 3f       	cpi	r27, 0xF9	; 249
    16ac:	cc f3       	brlt	.-14     	; 0x16a0 <__fixunssfsi+0x2e>
    16ae:	86 95       	lsr	r24
    16b0:	77 95       	ror	r23
    16b2:	67 95       	ror	r22
    16b4:	b3 95       	inc	r27
    16b6:	d9 f7       	brne	.-10     	; 0x16ae <__fixunssfsi+0x3c>
    16b8:	3e f4       	brtc	.+14     	; 0x16c8 <__fixunssfsi+0x56>
    16ba:	90 95       	com	r25
    16bc:	80 95       	com	r24
    16be:	70 95       	com	r23
    16c0:	61 95       	neg	r22
    16c2:	7f 4f       	sbci	r23, 0xFF	; 255
    16c4:	8f 4f       	sbci	r24, 0xFF	; 255
    16c6:	9f 4f       	sbci	r25, 0xFF	; 255
    16c8:	08 95       	ret

000016ca <__floatunsisf>:
    16ca:	e8 94       	clt
    16cc:	09 c0       	rjmp	.+18     	; 0x16e0 <__floatsisf+0x12>

000016ce <__floatsisf>:
    16ce:	97 fb       	bst	r25, 7
    16d0:	3e f4       	brtc	.+14     	; 0x16e0 <__floatsisf+0x12>
    16d2:	90 95       	com	r25
    16d4:	80 95       	com	r24
    16d6:	70 95       	com	r23
    16d8:	61 95       	neg	r22
    16da:	7f 4f       	sbci	r23, 0xFF	; 255
    16dc:	8f 4f       	sbci	r24, 0xFF	; 255
    16de:	9f 4f       	sbci	r25, 0xFF	; 255
    16e0:	99 23       	and	r25, r25
    16e2:	a9 f0       	breq	.+42     	; 0x170e <__floatsisf+0x40>
    16e4:	f9 2f       	mov	r31, r25
    16e6:	96 e9       	ldi	r25, 0x96	; 150
    16e8:	bb 27       	eor	r27, r27
    16ea:	93 95       	inc	r25
    16ec:	f6 95       	lsr	r31
    16ee:	87 95       	ror	r24
    16f0:	77 95       	ror	r23
    16f2:	67 95       	ror	r22
    16f4:	b7 95       	ror	r27
    16f6:	f1 11       	cpse	r31, r1
    16f8:	f8 cf       	rjmp	.-16     	; 0x16ea <__floatsisf+0x1c>
    16fa:	fa f4       	brpl	.+62     	; 0x173a <__floatsisf+0x6c>
    16fc:	bb 0f       	add	r27, r27
    16fe:	11 f4       	brne	.+4      	; 0x1704 <__floatsisf+0x36>
    1700:	60 ff       	sbrs	r22, 0
    1702:	1b c0       	rjmp	.+54     	; 0x173a <__floatsisf+0x6c>
    1704:	6f 5f       	subi	r22, 0xFF	; 255
    1706:	7f 4f       	sbci	r23, 0xFF	; 255
    1708:	8f 4f       	sbci	r24, 0xFF	; 255
    170a:	9f 4f       	sbci	r25, 0xFF	; 255
    170c:	16 c0       	rjmp	.+44     	; 0x173a <__floatsisf+0x6c>
    170e:	88 23       	and	r24, r24
    1710:	11 f0       	breq	.+4      	; 0x1716 <__floatsisf+0x48>
    1712:	96 e9       	ldi	r25, 0x96	; 150
    1714:	11 c0       	rjmp	.+34     	; 0x1738 <__floatsisf+0x6a>
    1716:	77 23       	and	r23, r23
    1718:	21 f0       	breq	.+8      	; 0x1722 <__floatsisf+0x54>
    171a:	9e e8       	ldi	r25, 0x8E	; 142
    171c:	87 2f       	mov	r24, r23
    171e:	76 2f       	mov	r23, r22
    1720:	05 c0       	rjmp	.+10     	; 0x172c <__floatsisf+0x5e>
    1722:	66 23       	and	r22, r22
    1724:	71 f0       	breq	.+28     	; 0x1742 <__floatsisf+0x74>
    1726:	96 e8       	ldi	r25, 0x86	; 134
    1728:	86 2f       	mov	r24, r22
    172a:	70 e0       	ldi	r23, 0x00	; 0
    172c:	60 e0       	ldi	r22, 0x00	; 0
    172e:	2a f0       	brmi	.+10     	; 0x173a <__floatsisf+0x6c>
    1730:	9a 95       	dec	r25
    1732:	66 0f       	add	r22, r22
    1734:	77 1f       	adc	r23, r23
    1736:	88 1f       	adc	r24, r24
    1738:	da f7       	brpl	.-10     	; 0x1730 <__floatsisf+0x62>
    173a:	88 0f       	add	r24, r24
    173c:	96 95       	lsr	r25
    173e:	87 95       	ror	r24
    1740:	97 f9       	bld	r25, 7
    1742:	08 95       	ret

00001744 <__fp_cmp>:
    1744:	99 0f       	add	r25, r25
    1746:	00 08       	sbc	r0, r0
    1748:	55 0f       	add	r21, r21
    174a:	aa 0b       	sbc	r26, r26
    174c:	e0 e8       	ldi	r30, 0x80	; 128
    174e:	fe ef       	ldi	r31, 0xFE	; 254
    1750:	16 16       	cp	r1, r22
    1752:	17 06       	cpc	r1, r23
    1754:	e8 07       	cpc	r30, r24
    1756:	f9 07       	cpc	r31, r25
    1758:	c0 f0       	brcs	.+48     	; 0x178a <__fp_cmp+0x46>
    175a:	12 16       	cp	r1, r18
    175c:	13 06       	cpc	r1, r19
    175e:	e4 07       	cpc	r30, r20
    1760:	f5 07       	cpc	r31, r21
    1762:	98 f0       	brcs	.+38     	; 0x178a <__fp_cmp+0x46>
    1764:	62 1b       	sub	r22, r18
    1766:	73 0b       	sbc	r23, r19
    1768:	84 0b       	sbc	r24, r20
    176a:	95 0b       	sbc	r25, r21
    176c:	39 f4       	brne	.+14     	; 0x177c <__fp_cmp+0x38>
    176e:	0a 26       	eor	r0, r26
    1770:	61 f0       	breq	.+24     	; 0x178a <__fp_cmp+0x46>
    1772:	23 2b       	or	r18, r19
    1774:	24 2b       	or	r18, r20
    1776:	25 2b       	or	r18, r21
    1778:	21 f4       	brne	.+8      	; 0x1782 <__fp_cmp+0x3e>
    177a:	08 95       	ret
    177c:	0a 26       	eor	r0, r26
    177e:	09 f4       	brne	.+2      	; 0x1782 <__fp_cmp+0x3e>
    1780:	a1 40       	sbci	r26, 0x01	; 1
    1782:	a6 95       	lsr	r26
    1784:	8f ef       	ldi	r24, 0xFF	; 255
    1786:	81 1d       	adc	r24, r1
    1788:	81 1d       	adc	r24, r1
    178a:	08 95       	ret

0000178c <__fp_inf>:
    178c:	97 f9       	bld	r25, 7
    178e:	9f 67       	ori	r25, 0x7F	; 127
    1790:	80 e8       	ldi	r24, 0x80	; 128
    1792:	70 e0       	ldi	r23, 0x00	; 0
    1794:	60 e0       	ldi	r22, 0x00	; 0
    1796:	08 95       	ret

00001798 <__fp_nan>:
    1798:	9f ef       	ldi	r25, 0xFF	; 255
    179a:	80 ec       	ldi	r24, 0xC0	; 192
    179c:	08 95       	ret

0000179e <__fp_pscA>:
    179e:	00 24       	eor	r0, r0
    17a0:	0a 94       	dec	r0
    17a2:	16 16       	cp	r1, r22
    17a4:	17 06       	cpc	r1, r23
    17a6:	18 06       	cpc	r1, r24
    17a8:	09 06       	cpc	r0, r25
    17aa:	08 95       	ret

000017ac <__fp_pscB>:
    17ac:	00 24       	eor	r0, r0
    17ae:	0a 94       	dec	r0
    17b0:	12 16       	cp	r1, r18
    17b2:	13 06       	cpc	r1, r19
    17b4:	14 06       	cpc	r1, r20
    17b6:	05 06       	cpc	r0, r21
    17b8:	08 95       	ret

000017ba <__fp_round>:
    17ba:	09 2e       	mov	r0, r25
    17bc:	03 94       	inc	r0
    17be:	00 0c       	add	r0, r0
    17c0:	11 f4       	brne	.+4      	; 0x17c6 <__fp_round+0xc>
    17c2:	88 23       	and	r24, r24
    17c4:	52 f0       	brmi	.+20     	; 0x17da <__fp_round+0x20>
    17c6:	bb 0f       	add	r27, r27
    17c8:	40 f4       	brcc	.+16     	; 0x17da <__fp_round+0x20>
    17ca:	bf 2b       	or	r27, r31
    17cc:	11 f4       	brne	.+4      	; 0x17d2 <__fp_round+0x18>
    17ce:	60 ff       	sbrs	r22, 0
    17d0:	04 c0       	rjmp	.+8      	; 0x17da <__fp_round+0x20>
    17d2:	6f 5f       	subi	r22, 0xFF	; 255
    17d4:	7f 4f       	sbci	r23, 0xFF	; 255
    17d6:	8f 4f       	sbci	r24, 0xFF	; 255
    17d8:	9f 4f       	sbci	r25, 0xFF	; 255
    17da:	08 95       	ret

000017dc <__fp_split3>:
    17dc:	57 fd       	sbrc	r21, 7
    17de:	90 58       	subi	r25, 0x80	; 128
    17e0:	44 0f       	add	r20, r20
    17e2:	55 1f       	adc	r21, r21
    17e4:	59 f0       	breq	.+22     	; 0x17fc <__fp_splitA+0x10>
    17e6:	5f 3f       	cpi	r21, 0xFF	; 255
    17e8:	71 f0       	breq	.+28     	; 0x1806 <__fp_splitA+0x1a>
    17ea:	47 95       	ror	r20

000017ec <__fp_splitA>:
    17ec:	88 0f       	add	r24, r24
    17ee:	97 fb       	bst	r25, 7
    17f0:	99 1f       	adc	r25, r25
    17f2:	61 f0       	breq	.+24     	; 0x180c <__fp_splitA+0x20>
    17f4:	9f 3f       	cpi	r25, 0xFF	; 255
    17f6:	79 f0       	breq	.+30     	; 0x1816 <__fp_splitA+0x2a>
    17f8:	87 95       	ror	r24
    17fa:	08 95       	ret
    17fc:	12 16       	cp	r1, r18
    17fe:	13 06       	cpc	r1, r19
    1800:	14 06       	cpc	r1, r20
    1802:	55 1f       	adc	r21, r21
    1804:	f2 cf       	rjmp	.-28     	; 0x17ea <__fp_split3+0xe>
    1806:	46 95       	lsr	r20
    1808:	f1 df       	rcall	.-30     	; 0x17ec <__fp_splitA>
    180a:	08 c0       	rjmp	.+16     	; 0x181c <__fp_splitA+0x30>
    180c:	16 16       	cp	r1, r22
    180e:	17 06       	cpc	r1, r23
    1810:	18 06       	cpc	r1, r24
    1812:	99 1f       	adc	r25, r25
    1814:	f1 cf       	rjmp	.-30     	; 0x17f8 <__fp_splitA+0xc>
    1816:	86 95       	lsr	r24
    1818:	71 05       	cpc	r23, r1
    181a:	61 05       	cpc	r22, r1
    181c:	08 94       	sec
    181e:	08 95       	ret

00001820 <__fp_zero>:
    1820:	e8 94       	clt

00001822 <__fp_szero>:
    1822:	bb 27       	eor	r27, r27
    1824:	66 27       	eor	r22, r22
    1826:	77 27       	eor	r23, r23
    1828:	cb 01       	movw	r24, r22
    182a:	97 f9       	bld	r25, 7
    182c:	08 95       	ret

0000182e <__gesf2>:
    182e:	8a df       	rcall	.-236    	; 0x1744 <__fp_cmp>
    1830:	08 f4       	brcc	.+2      	; 0x1834 <__gesf2+0x6>
    1832:	8f ef       	ldi	r24, 0xFF	; 255
    1834:	08 95       	ret
    1836:	0e f0       	brts	.+2      	; 0x183a <__gesf2+0xc>
    1838:	23 c1       	rjmp	.+582    	; 0x1a80 <__fp_mpack>
    183a:	ae cf       	rjmp	.-164    	; 0x1798 <__fp_nan>
    183c:	68 94       	set
    183e:	a6 cf       	rjmp	.-180    	; 0x178c <__fp_inf>

00001840 <log>:
    1840:	d5 df       	rcall	.-86     	; 0x17ec <__fp_splitA>
    1842:	c8 f3       	brcs	.-14     	; 0x1836 <__gesf2+0x8>
    1844:	99 23       	and	r25, r25
    1846:	d1 f3       	breq	.-12     	; 0x183c <__gesf2+0xe>
    1848:	c6 f3       	brts	.-16     	; 0x183a <__gesf2+0xc>
    184a:	df 93       	push	r29
    184c:	cf 93       	push	r28
    184e:	1f 93       	push	r17
    1850:	0f 93       	push	r16
    1852:	ff 92       	push	r15
    1854:	c9 2f       	mov	r28, r25
    1856:	dd 27       	eor	r29, r29
    1858:	88 23       	and	r24, r24
    185a:	2a f0       	brmi	.+10     	; 0x1866 <log+0x26>
    185c:	21 97       	sbiw	r28, 0x01	; 1
    185e:	66 0f       	add	r22, r22
    1860:	77 1f       	adc	r23, r23
    1862:	88 1f       	adc	r24, r24
    1864:	da f7       	brpl	.-10     	; 0x185c <log+0x1c>
    1866:	20 e0       	ldi	r18, 0x00	; 0
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	40 e8       	ldi	r20, 0x80	; 128
    186c:	5f eb       	ldi	r21, 0xBF	; 191
    186e:	9f e3       	ldi	r25, 0x3F	; 63
    1870:	88 39       	cpi	r24, 0x98	; 152
    1872:	20 f0       	brcs	.+8      	; 0x187c <log+0x3c>
    1874:	80 3e       	cpi	r24, 0xE0	; 224
    1876:	30 f0       	brcs	.+12     	; 0x1884 <log+0x44>
    1878:	21 96       	adiw	r28, 0x01	; 1
    187a:	8f 77       	andi	r24, 0x7F	; 127
    187c:	25 de       	rcall	.-950    	; 0x14c8 <__addsf3>
    187e:	ec e8       	ldi	r30, 0x8C	; 140
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	03 c0       	rjmp	.+6      	; 0x188a <log+0x4a>
    1884:	21 de       	rcall	.-958    	; 0x14c8 <__addsf3>
    1886:	e9 eb       	ldi	r30, 0xB9	; 185
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	08 d1       	rcall	.+528    	; 0x1a9c <__fp_powser>
    188c:	8b 01       	movw	r16, r22
    188e:	be 01       	movw	r22, r28
    1890:	ec 01       	movw	r28, r24
    1892:	fb 2e       	mov	r15, r27
    1894:	6f 57       	subi	r22, 0x7F	; 127
    1896:	71 09       	sbc	r23, r1
    1898:	75 95       	asr	r23
    189a:	77 1f       	adc	r23, r23
    189c:	88 0b       	sbc	r24, r24
    189e:	99 0b       	sbc	r25, r25
    18a0:	16 df       	rcall	.-468    	; 0x16ce <__floatsisf>
    18a2:	28 e1       	ldi	r18, 0x18	; 24
    18a4:	32 e7       	ldi	r19, 0x72	; 114
    18a6:	41 e3       	ldi	r20, 0x31	; 49
    18a8:	5f e3       	ldi	r21, 0x3F	; 63
    18aa:	16 d0       	rcall	.+44     	; 0x18d8 <__mulsf3x>
    18ac:	af 2d       	mov	r26, r15
    18ae:	98 01       	movw	r18, r16
    18b0:	ae 01       	movw	r20, r28
    18b2:	ff 90       	pop	r15
    18b4:	0f 91       	pop	r16
    18b6:	1f 91       	pop	r17
    18b8:	cf 91       	pop	r28
    18ba:	df 91       	pop	r29
    18bc:	16 de       	rcall	.-980    	; 0x14ea <__addsf3x>
    18be:	7d cf       	rjmp	.-262    	; 0x17ba <__fp_round>

000018c0 <__mulsf3>:
    18c0:	0b d0       	rcall	.+22     	; 0x18d8 <__mulsf3x>
    18c2:	7b cf       	rjmp	.-266    	; 0x17ba <__fp_round>
    18c4:	6c df       	rcall	.-296    	; 0x179e <__fp_pscA>
    18c6:	28 f0       	brcs	.+10     	; 0x18d2 <__mulsf3+0x12>
    18c8:	71 df       	rcall	.-286    	; 0x17ac <__fp_pscB>
    18ca:	18 f0       	brcs	.+6      	; 0x18d2 <__mulsf3+0x12>
    18cc:	95 23       	and	r25, r21
    18ce:	09 f0       	breq	.+2      	; 0x18d2 <__mulsf3+0x12>
    18d0:	5d cf       	rjmp	.-326    	; 0x178c <__fp_inf>
    18d2:	62 cf       	rjmp	.-316    	; 0x1798 <__fp_nan>
    18d4:	11 24       	eor	r1, r1
    18d6:	a5 cf       	rjmp	.-182    	; 0x1822 <__fp_szero>

000018d8 <__mulsf3x>:
    18d8:	81 df       	rcall	.-254    	; 0x17dc <__fp_split3>
    18da:	a0 f3       	brcs	.-24     	; 0x18c4 <__mulsf3+0x4>

000018dc <__mulsf3_pse>:
    18dc:	95 9f       	mul	r25, r21
    18de:	d1 f3       	breq	.-12     	; 0x18d4 <__mulsf3+0x14>
    18e0:	95 0f       	add	r25, r21
    18e2:	50 e0       	ldi	r21, 0x00	; 0
    18e4:	55 1f       	adc	r21, r21
    18e6:	62 9f       	mul	r22, r18
    18e8:	f0 01       	movw	r30, r0
    18ea:	72 9f       	mul	r23, r18
    18ec:	bb 27       	eor	r27, r27
    18ee:	f0 0d       	add	r31, r0
    18f0:	b1 1d       	adc	r27, r1
    18f2:	63 9f       	mul	r22, r19
    18f4:	aa 27       	eor	r26, r26
    18f6:	f0 0d       	add	r31, r0
    18f8:	b1 1d       	adc	r27, r1
    18fa:	aa 1f       	adc	r26, r26
    18fc:	64 9f       	mul	r22, r20
    18fe:	66 27       	eor	r22, r22
    1900:	b0 0d       	add	r27, r0
    1902:	a1 1d       	adc	r26, r1
    1904:	66 1f       	adc	r22, r22
    1906:	82 9f       	mul	r24, r18
    1908:	22 27       	eor	r18, r18
    190a:	b0 0d       	add	r27, r0
    190c:	a1 1d       	adc	r26, r1
    190e:	62 1f       	adc	r22, r18
    1910:	73 9f       	mul	r23, r19
    1912:	b0 0d       	add	r27, r0
    1914:	a1 1d       	adc	r26, r1
    1916:	62 1f       	adc	r22, r18
    1918:	83 9f       	mul	r24, r19
    191a:	a0 0d       	add	r26, r0
    191c:	61 1d       	adc	r22, r1
    191e:	22 1f       	adc	r18, r18
    1920:	74 9f       	mul	r23, r20
    1922:	33 27       	eor	r19, r19
    1924:	a0 0d       	add	r26, r0
    1926:	61 1d       	adc	r22, r1
    1928:	23 1f       	adc	r18, r19
    192a:	84 9f       	mul	r24, r20
    192c:	60 0d       	add	r22, r0
    192e:	21 1d       	adc	r18, r1
    1930:	82 2f       	mov	r24, r18
    1932:	76 2f       	mov	r23, r22
    1934:	6a 2f       	mov	r22, r26
    1936:	11 24       	eor	r1, r1
    1938:	9f 57       	subi	r25, 0x7F	; 127
    193a:	50 40       	sbci	r21, 0x00	; 0
    193c:	8a f0       	brmi	.+34     	; 0x1960 <__mulsf3_pse+0x84>
    193e:	e1 f0       	breq	.+56     	; 0x1978 <__mulsf3_pse+0x9c>
    1940:	88 23       	and	r24, r24
    1942:	4a f0       	brmi	.+18     	; 0x1956 <__mulsf3_pse+0x7a>
    1944:	ee 0f       	add	r30, r30
    1946:	ff 1f       	adc	r31, r31
    1948:	bb 1f       	adc	r27, r27
    194a:	66 1f       	adc	r22, r22
    194c:	77 1f       	adc	r23, r23
    194e:	88 1f       	adc	r24, r24
    1950:	91 50       	subi	r25, 0x01	; 1
    1952:	50 40       	sbci	r21, 0x00	; 0
    1954:	a9 f7       	brne	.-22     	; 0x1940 <__mulsf3_pse+0x64>
    1956:	9e 3f       	cpi	r25, 0xFE	; 254
    1958:	51 05       	cpc	r21, r1
    195a:	70 f0       	brcs	.+28     	; 0x1978 <__mulsf3_pse+0x9c>
    195c:	17 cf       	rjmp	.-466    	; 0x178c <__fp_inf>
    195e:	61 cf       	rjmp	.-318    	; 0x1822 <__fp_szero>
    1960:	5f 3f       	cpi	r21, 0xFF	; 255
    1962:	ec f3       	brlt	.-6      	; 0x195e <__mulsf3_pse+0x82>
    1964:	98 3e       	cpi	r25, 0xE8	; 232
    1966:	dc f3       	brlt	.-10     	; 0x195e <__mulsf3_pse+0x82>
    1968:	86 95       	lsr	r24
    196a:	77 95       	ror	r23
    196c:	67 95       	ror	r22
    196e:	b7 95       	ror	r27
    1970:	f7 95       	ror	r31
    1972:	e7 95       	ror	r30
    1974:	9f 5f       	subi	r25, 0xFF	; 255
    1976:	c1 f7       	brne	.-16     	; 0x1968 <__mulsf3_pse+0x8c>
    1978:	fe 2b       	or	r31, r30
    197a:	88 0f       	add	r24, r24
    197c:	91 1d       	adc	r25, r1
    197e:	96 95       	lsr	r25
    1980:	87 95       	ror	r24
    1982:	97 f9       	bld	r25, 7
    1984:	08 95       	ret

00001986 <pow>:
    1986:	fa 01       	movw	r30, r20
    1988:	ee 0f       	add	r30, r30
    198a:	ff 1f       	adc	r31, r31
    198c:	30 96       	adiw	r30, 0x00	; 0
    198e:	21 05       	cpc	r18, r1
    1990:	31 05       	cpc	r19, r1
    1992:	99 f1       	breq	.+102    	; 0x19fa <pow+0x74>
    1994:	61 15       	cp	r22, r1
    1996:	71 05       	cpc	r23, r1
    1998:	61 f4       	brne	.+24     	; 0x19b2 <pow+0x2c>
    199a:	80 38       	cpi	r24, 0x80	; 128
    199c:	bf e3       	ldi	r27, 0x3F	; 63
    199e:	9b 07       	cpc	r25, r27
    19a0:	49 f1       	breq	.+82     	; 0x19f4 <pow+0x6e>
    19a2:	68 94       	set
    19a4:	90 38       	cpi	r25, 0x80	; 128
    19a6:	81 05       	cpc	r24, r1
    19a8:	61 f0       	breq	.+24     	; 0x19c2 <pow+0x3c>
    19aa:	80 38       	cpi	r24, 0x80	; 128
    19ac:	bf ef       	ldi	r27, 0xFF	; 255
    19ae:	9b 07       	cpc	r25, r27
    19b0:	41 f0       	breq	.+16     	; 0x19c2 <pow+0x3c>
    19b2:	99 23       	and	r25, r25
    19b4:	42 f5       	brpl	.+80     	; 0x1a06 <pow+0x80>
    19b6:	ff 3f       	cpi	r31, 0xFF	; 255
    19b8:	e1 05       	cpc	r30, r1
    19ba:	31 05       	cpc	r19, r1
    19bc:	21 05       	cpc	r18, r1
    19be:	11 f1       	breq	.+68     	; 0x1a04 <pow+0x7e>
    19c0:	e8 94       	clt
    19c2:	08 94       	sec
    19c4:	e7 95       	ror	r30
    19c6:	d9 01       	movw	r26, r18
    19c8:	aa 23       	and	r26, r26
    19ca:	29 f4       	brne	.+10     	; 0x19d6 <pow+0x50>
    19cc:	ab 2f       	mov	r26, r27
    19ce:	be 2f       	mov	r27, r30
    19d0:	f8 5f       	subi	r31, 0xF8	; 248
    19d2:	d0 f3       	brcs	.-12     	; 0x19c8 <pow+0x42>
    19d4:	10 c0       	rjmp	.+32     	; 0x19f6 <pow+0x70>
    19d6:	ff 5f       	subi	r31, 0xFF	; 255
    19d8:	70 f4       	brcc	.+28     	; 0x19f6 <pow+0x70>
    19da:	a6 95       	lsr	r26
    19dc:	e0 f7       	brcc	.-8      	; 0x19d6 <pow+0x50>
    19de:	f7 39       	cpi	r31, 0x97	; 151
    19e0:	50 f0       	brcs	.+20     	; 0x19f6 <pow+0x70>
    19e2:	19 f0       	breq	.+6      	; 0x19ea <pow+0x64>
    19e4:	ff 3a       	cpi	r31, 0xAF	; 175
    19e6:	38 f4       	brcc	.+14     	; 0x19f6 <pow+0x70>
    19e8:	9f 77       	andi	r25, 0x7F	; 127
    19ea:	9f 93       	push	r25
    19ec:	0c d0       	rcall	.+24     	; 0x1a06 <pow+0x80>
    19ee:	0f 90       	pop	r0
    19f0:	07 fc       	sbrc	r0, 7
    19f2:	90 58       	subi	r25, 0x80	; 128
    19f4:	08 95       	ret
    19f6:	3e f0       	brts	.+14     	; 0x1a06 <pow+0x80>
    19f8:	cf ce       	rjmp	.-610    	; 0x1798 <__fp_nan>
    19fa:	60 e0       	ldi	r22, 0x00	; 0
    19fc:	70 e0       	ldi	r23, 0x00	; 0
    19fe:	80 e8       	ldi	r24, 0x80	; 128
    1a00:	9f e3       	ldi	r25, 0x3F	; 63
    1a02:	08 95       	ret
    1a04:	4f e7       	ldi	r20, 0x7F	; 127
    1a06:	9f 77       	andi	r25, 0x7F	; 127
    1a08:	5f 93       	push	r21
    1a0a:	4f 93       	push	r20
    1a0c:	3f 93       	push	r19
    1a0e:	2f 93       	push	r18
    1a10:	17 df       	rcall	.-466    	; 0x1840 <log>
    1a12:	2f 91       	pop	r18
    1a14:	3f 91       	pop	r19
    1a16:	4f 91       	pop	r20
    1a18:	5f 91       	pop	r21
    1a1a:	52 df       	rcall	.-348    	; 0x18c0 <__mulsf3>
    1a1c:	05 c0       	rjmp	.+10     	; 0x1a28 <exp>
    1a1e:	19 f4       	brne	.+6      	; 0x1a26 <pow+0xa0>
    1a20:	0e f0       	brts	.+2      	; 0x1a24 <pow+0x9e>
    1a22:	b4 ce       	rjmp	.-664    	; 0x178c <__fp_inf>
    1a24:	fd ce       	rjmp	.-518    	; 0x1820 <__fp_zero>
    1a26:	b8 ce       	rjmp	.-656    	; 0x1798 <__fp_nan>

00001a28 <exp>:
    1a28:	e1 de       	rcall	.-574    	; 0x17ec <__fp_splitA>
    1a2a:	c8 f3       	brcs	.-14     	; 0x1a1e <pow+0x98>
    1a2c:	96 38       	cpi	r25, 0x86	; 134
    1a2e:	c0 f7       	brcc	.-16     	; 0x1a20 <pow+0x9a>
    1a30:	07 f8       	bld	r0, 7
    1a32:	0f 92       	push	r0
    1a34:	e8 94       	clt
    1a36:	2b e3       	ldi	r18, 0x3B	; 59
    1a38:	3a ea       	ldi	r19, 0xAA	; 170
    1a3a:	48 eb       	ldi	r20, 0xB8	; 184
    1a3c:	5f e7       	ldi	r21, 0x7F	; 127
    1a3e:	4e df       	rcall	.-356    	; 0x18dc <__mulsf3_pse>
    1a40:	0f 92       	push	r0
    1a42:	0f 92       	push	r0
    1a44:	0f 92       	push	r0
    1a46:	4d b7       	in	r20, 0x3d	; 61
    1a48:	5e b7       	in	r21, 0x3e	; 62
    1a4a:	0f 92       	push	r0
    1a4c:	89 d0       	rcall	.+274    	; 0x1b60 <modf>
    1a4e:	e6 ee       	ldi	r30, 0xE6	; 230
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	24 d0       	rcall	.+72     	; 0x1a9c <__fp_powser>
    1a54:	4f 91       	pop	r20
    1a56:	5f 91       	pop	r21
    1a58:	ef 91       	pop	r30
    1a5a:	ff 91       	pop	r31
    1a5c:	e5 95       	asr	r30
    1a5e:	ee 1f       	adc	r30, r30
    1a60:	ff 1f       	adc	r31, r31
    1a62:	49 f0       	breq	.+18     	; 0x1a76 <exp+0x4e>
    1a64:	fe 57       	subi	r31, 0x7E	; 126
    1a66:	e0 68       	ori	r30, 0x80	; 128
    1a68:	44 27       	eor	r20, r20
    1a6a:	ee 0f       	add	r30, r30
    1a6c:	44 1f       	adc	r20, r20
    1a6e:	fa 95       	dec	r31
    1a70:	e1 f7       	brne	.-8      	; 0x1a6a <exp+0x42>
    1a72:	41 95       	neg	r20
    1a74:	55 0b       	sbc	r21, r21
    1a76:	40 d0       	rcall	.+128    	; 0x1af8 <ldexp>
    1a78:	0f 90       	pop	r0
    1a7a:	07 fe       	sbrs	r0, 7
    1a7c:	34 c0       	rjmp	.+104    	; 0x1ae6 <inverse>
    1a7e:	08 95       	ret

00001a80 <__fp_mpack>:
    1a80:	9f 3f       	cpi	r25, 0xFF	; 255
    1a82:	31 f0       	breq	.+12     	; 0x1a90 <__fp_mpack_finite+0xc>

00001a84 <__fp_mpack_finite>:
    1a84:	91 50       	subi	r25, 0x01	; 1
    1a86:	20 f4       	brcc	.+8      	; 0x1a90 <__fp_mpack_finite+0xc>
    1a88:	87 95       	ror	r24
    1a8a:	77 95       	ror	r23
    1a8c:	67 95       	ror	r22
    1a8e:	b7 95       	ror	r27
    1a90:	88 0f       	add	r24, r24
    1a92:	91 1d       	adc	r25, r1
    1a94:	96 95       	lsr	r25
    1a96:	87 95       	ror	r24
    1a98:	97 f9       	bld	r25, 7
    1a9a:	08 95       	ret

00001a9c <__fp_powser>:
    1a9c:	df 93       	push	r29
    1a9e:	cf 93       	push	r28
    1aa0:	1f 93       	push	r17
    1aa2:	0f 93       	push	r16
    1aa4:	ff 92       	push	r15
    1aa6:	ef 92       	push	r14
    1aa8:	df 92       	push	r13
    1aaa:	7b 01       	movw	r14, r22
    1aac:	8c 01       	movw	r16, r24
    1aae:	68 94       	set
    1ab0:	05 c0       	rjmp	.+10     	; 0x1abc <__fp_powser+0x20>
    1ab2:	da 2e       	mov	r13, r26
    1ab4:	ef 01       	movw	r28, r30
    1ab6:	10 df       	rcall	.-480    	; 0x18d8 <__mulsf3x>
    1ab8:	fe 01       	movw	r30, r28
    1aba:	e8 94       	clt
    1abc:	a5 91       	lpm	r26, Z+
    1abe:	25 91       	lpm	r18, Z+
    1ac0:	35 91       	lpm	r19, Z+
    1ac2:	45 91       	lpm	r20, Z+
    1ac4:	55 91       	lpm	r21, Z+
    1ac6:	ae f3       	brts	.-22     	; 0x1ab2 <__fp_powser+0x16>
    1ac8:	ef 01       	movw	r28, r30
    1aca:	0f dd       	rcall	.-1506   	; 0x14ea <__addsf3x>
    1acc:	fe 01       	movw	r30, r28
    1ace:	97 01       	movw	r18, r14
    1ad0:	a8 01       	movw	r20, r16
    1ad2:	da 94       	dec	r13
    1ad4:	79 f7       	brne	.-34     	; 0x1ab4 <__fp_powser+0x18>
    1ad6:	df 90       	pop	r13
    1ad8:	ef 90       	pop	r14
    1ada:	ff 90       	pop	r15
    1adc:	0f 91       	pop	r16
    1ade:	1f 91       	pop	r17
    1ae0:	cf 91       	pop	r28
    1ae2:	df 91       	pop	r29
    1ae4:	08 95       	ret

00001ae6 <inverse>:
    1ae6:	9b 01       	movw	r18, r22
    1ae8:	ac 01       	movw	r20, r24
    1aea:	60 e0       	ldi	r22, 0x00	; 0
    1aec:	70 e0       	ldi	r23, 0x00	; 0
    1aee:	80 e8       	ldi	r24, 0x80	; 128
    1af0:	9f e3       	ldi	r25, 0x3F	; 63
    1af2:	52 cd       	rjmp	.-1372   	; 0x1598 <__divsf3>
    1af4:	4b ce       	rjmp	.-874    	; 0x178c <__fp_inf>
    1af6:	c4 cf       	rjmp	.-120    	; 0x1a80 <__fp_mpack>

00001af8 <ldexp>:
    1af8:	79 de       	rcall	.-782    	; 0x17ec <__fp_splitA>
    1afa:	e8 f3       	brcs	.-6      	; 0x1af6 <inverse+0x10>
    1afc:	99 23       	and	r25, r25
    1afe:	d9 f3       	breq	.-10     	; 0x1af6 <inverse+0x10>
    1b00:	94 0f       	add	r25, r20
    1b02:	51 1d       	adc	r21, r1
    1b04:	bb f3       	brvs	.-18     	; 0x1af4 <inverse+0xe>
    1b06:	91 50       	subi	r25, 0x01	; 1
    1b08:	50 40       	sbci	r21, 0x00	; 0
    1b0a:	94 f0       	brlt	.+36     	; 0x1b30 <ldexp+0x38>
    1b0c:	59 f0       	breq	.+22     	; 0x1b24 <ldexp+0x2c>
    1b0e:	88 23       	and	r24, r24
    1b10:	32 f0       	brmi	.+12     	; 0x1b1e <ldexp+0x26>
    1b12:	66 0f       	add	r22, r22
    1b14:	77 1f       	adc	r23, r23
    1b16:	88 1f       	adc	r24, r24
    1b18:	91 50       	subi	r25, 0x01	; 1
    1b1a:	50 40       	sbci	r21, 0x00	; 0
    1b1c:	c1 f7       	brne	.-16     	; 0x1b0e <ldexp+0x16>
    1b1e:	9e 3f       	cpi	r25, 0xFE	; 254
    1b20:	51 05       	cpc	r21, r1
    1b22:	44 f7       	brge	.-48     	; 0x1af4 <inverse+0xe>
    1b24:	88 0f       	add	r24, r24
    1b26:	91 1d       	adc	r25, r1
    1b28:	96 95       	lsr	r25
    1b2a:	87 95       	ror	r24
    1b2c:	97 f9       	bld	r25, 7
    1b2e:	08 95       	ret
    1b30:	5f 3f       	cpi	r21, 0xFF	; 255
    1b32:	ac f0       	brlt	.+42     	; 0x1b5e <ldexp+0x66>
    1b34:	98 3e       	cpi	r25, 0xE8	; 232
    1b36:	9c f0       	brlt	.+38     	; 0x1b5e <ldexp+0x66>
    1b38:	bb 27       	eor	r27, r27
    1b3a:	86 95       	lsr	r24
    1b3c:	77 95       	ror	r23
    1b3e:	67 95       	ror	r22
    1b40:	b7 95       	ror	r27
    1b42:	08 f4       	brcc	.+2      	; 0x1b46 <ldexp+0x4e>
    1b44:	b1 60       	ori	r27, 0x01	; 1
    1b46:	93 95       	inc	r25
    1b48:	c1 f7       	brne	.-16     	; 0x1b3a <ldexp+0x42>
    1b4a:	bb 0f       	add	r27, r27
    1b4c:	58 f7       	brcc	.-42     	; 0x1b24 <ldexp+0x2c>
    1b4e:	11 f4       	brne	.+4      	; 0x1b54 <ldexp+0x5c>
    1b50:	60 ff       	sbrs	r22, 0
    1b52:	e8 cf       	rjmp	.-48     	; 0x1b24 <ldexp+0x2c>
    1b54:	6f 5f       	subi	r22, 0xFF	; 255
    1b56:	7f 4f       	sbci	r23, 0xFF	; 255
    1b58:	8f 4f       	sbci	r24, 0xFF	; 255
    1b5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b5c:	e3 cf       	rjmp	.-58     	; 0x1b24 <ldexp+0x2c>
    1b5e:	61 ce       	rjmp	.-830    	; 0x1822 <__fp_szero>

00001b60 <modf>:
    1b60:	fa 01       	movw	r30, r20
    1b62:	dc 01       	movw	r26, r24
    1b64:	aa 0f       	add	r26, r26
    1b66:	bb 1f       	adc	r27, r27
    1b68:	9b 01       	movw	r18, r22
    1b6a:	ac 01       	movw	r20, r24
    1b6c:	bf 57       	subi	r27, 0x7F	; 127
    1b6e:	28 f4       	brcc	.+10     	; 0x1b7a <modf+0x1a>
    1b70:	22 27       	eor	r18, r18
    1b72:	33 27       	eor	r19, r19
    1b74:	44 27       	eor	r20, r20
    1b76:	50 78       	andi	r21, 0x80	; 128
    1b78:	1f c0       	rjmp	.+62     	; 0x1bb8 <modf+0x58>
    1b7a:	b7 51       	subi	r27, 0x17	; 23
    1b7c:	88 f4       	brcc	.+34     	; 0x1ba0 <modf+0x40>
    1b7e:	ab 2f       	mov	r26, r27
    1b80:	00 24       	eor	r0, r0
    1b82:	46 95       	lsr	r20
    1b84:	37 95       	ror	r19
    1b86:	27 95       	ror	r18
    1b88:	01 1c       	adc	r0, r1
    1b8a:	a3 95       	inc	r26
    1b8c:	d2 f3       	brmi	.-12     	; 0x1b82 <modf+0x22>
    1b8e:	00 20       	and	r0, r0
    1b90:	69 f0       	breq	.+26     	; 0x1bac <modf+0x4c>
    1b92:	22 0f       	add	r18, r18
    1b94:	33 1f       	adc	r19, r19
    1b96:	44 1f       	adc	r20, r20
    1b98:	b3 95       	inc	r27
    1b9a:	da f3       	brmi	.-10     	; 0x1b92 <modf+0x32>
    1b9c:	0d d0       	rcall	.+26     	; 0x1bb8 <modf+0x58>
    1b9e:	93 cc       	rjmp	.-1754   	; 0x14c6 <__subsf3>
    1ba0:	61 30       	cpi	r22, 0x01	; 1
    1ba2:	71 05       	cpc	r23, r1
    1ba4:	a0 e8       	ldi	r26, 0x80	; 128
    1ba6:	8a 07       	cpc	r24, r26
    1ba8:	b9 46       	sbci	r27, 0x69	; 105
    1baa:	30 f4       	brcc	.+12     	; 0x1bb8 <modf+0x58>
    1bac:	9b 01       	movw	r18, r22
    1bae:	ac 01       	movw	r20, r24
    1bb0:	66 27       	eor	r22, r22
    1bb2:	77 27       	eor	r23, r23
    1bb4:	88 27       	eor	r24, r24
    1bb6:	90 78       	andi	r25, 0x80	; 128
    1bb8:	30 96       	adiw	r30, 0x00	; 0
    1bba:	21 f0       	breq	.+8      	; 0x1bc4 <modf+0x64>
    1bbc:	20 83       	st	Z, r18
    1bbe:	31 83       	std	Z+1, r19	; 0x01
    1bc0:	42 83       	std	Z+2, r20	; 0x02
    1bc2:	53 83       	std	Z+3, r21	; 0x03
    1bc4:	08 95       	ret

00001bc6 <__divmodhi4>:
    1bc6:	97 fb       	bst	r25, 7
    1bc8:	07 2e       	mov	r0, r23
    1bca:	16 f4       	brtc	.+4      	; 0x1bd0 <__divmodhi4+0xa>
    1bcc:	00 94       	com	r0
    1bce:	06 d0       	rcall	.+12     	; 0x1bdc <__divmodhi4_neg1>
    1bd0:	77 fd       	sbrc	r23, 7
    1bd2:	08 d0       	rcall	.+16     	; 0x1be4 <__divmodhi4_neg2>
    1bd4:	2d d0       	rcall	.+90     	; 0x1c30 <__udivmodhi4>
    1bd6:	07 fc       	sbrc	r0, 7
    1bd8:	05 d0       	rcall	.+10     	; 0x1be4 <__divmodhi4_neg2>
    1bda:	3e f4       	brtc	.+14     	; 0x1bea <__divmodhi4_exit>

00001bdc <__divmodhi4_neg1>:
    1bdc:	90 95       	com	r25
    1bde:	81 95       	neg	r24
    1be0:	9f 4f       	sbci	r25, 0xFF	; 255
    1be2:	08 95       	ret

00001be4 <__divmodhi4_neg2>:
    1be4:	70 95       	com	r23
    1be6:	61 95       	neg	r22
    1be8:	7f 4f       	sbci	r23, 0xFF	; 255

00001bea <__divmodhi4_exit>:
    1bea:	08 95       	ret

00001bec <__divmodsi4>:
    1bec:	05 2e       	mov	r0, r21
    1bee:	97 fb       	bst	r25, 7
    1bf0:	16 f4       	brtc	.+4      	; 0x1bf6 <__divmodsi4+0xa>
    1bf2:	00 94       	com	r0
    1bf4:	0f d0       	rcall	.+30     	; 0x1c14 <__negsi2>
    1bf6:	57 fd       	sbrc	r21, 7
    1bf8:	05 d0       	rcall	.+10     	; 0x1c04 <__divmodsi4_neg2>
    1bfa:	2e d0       	rcall	.+92     	; 0x1c58 <__udivmodsi4>
    1bfc:	07 fc       	sbrc	r0, 7
    1bfe:	02 d0       	rcall	.+4      	; 0x1c04 <__divmodsi4_neg2>
    1c00:	46 f4       	brtc	.+16     	; 0x1c12 <__divmodsi4_exit>
    1c02:	08 c0       	rjmp	.+16     	; 0x1c14 <__negsi2>

00001c04 <__divmodsi4_neg2>:
    1c04:	50 95       	com	r21
    1c06:	40 95       	com	r20
    1c08:	30 95       	com	r19
    1c0a:	21 95       	neg	r18
    1c0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c0e:	4f 4f       	sbci	r20, 0xFF	; 255
    1c10:	5f 4f       	sbci	r21, 0xFF	; 255

00001c12 <__divmodsi4_exit>:
    1c12:	08 95       	ret

00001c14 <__negsi2>:
    1c14:	90 95       	com	r25
    1c16:	80 95       	com	r24
    1c18:	70 95       	com	r23
    1c1a:	61 95       	neg	r22
    1c1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c1e:	8f 4f       	sbci	r24, 0xFF	; 255
    1c20:	9f 4f       	sbci	r25, 0xFF	; 255
    1c22:	08 95       	ret

00001c24 <__mulshisi3>:
    1c24:	b7 ff       	sbrs	r27, 7
    1c26:	3a c0       	rjmp	.+116    	; 0x1c9c <__muluhisi3>

00001c28 <__mulohisi3>:
    1c28:	39 d0       	rcall	.+114    	; 0x1c9c <__muluhisi3>
    1c2a:	82 1b       	sub	r24, r18
    1c2c:	93 0b       	sbc	r25, r19
    1c2e:	08 95       	ret

00001c30 <__udivmodhi4>:
    1c30:	aa 1b       	sub	r26, r26
    1c32:	bb 1b       	sub	r27, r27
    1c34:	51 e1       	ldi	r21, 0x11	; 17
    1c36:	07 c0       	rjmp	.+14     	; 0x1c46 <__udivmodhi4_ep>

00001c38 <__udivmodhi4_loop>:
    1c38:	aa 1f       	adc	r26, r26
    1c3a:	bb 1f       	adc	r27, r27
    1c3c:	a6 17       	cp	r26, r22
    1c3e:	b7 07       	cpc	r27, r23
    1c40:	10 f0       	brcs	.+4      	; 0x1c46 <__udivmodhi4_ep>
    1c42:	a6 1b       	sub	r26, r22
    1c44:	b7 0b       	sbc	r27, r23

00001c46 <__udivmodhi4_ep>:
    1c46:	88 1f       	adc	r24, r24
    1c48:	99 1f       	adc	r25, r25
    1c4a:	5a 95       	dec	r21
    1c4c:	a9 f7       	brne	.-22     	; 0x1c38 <__udivmodhi4_loop>
    1c4e:	80 95       	com	r24
    1c50:	90 95       	com	r25
    1c52:	bc 01       	movw	r22, r24
    1c54:	cd 01       	movw	r24, r26
    1c56:	08 95       	ret

00001c58 <__udivmodsi4>:
    1c58:	a1 e2       	ldi	r26, 0x21	; 33
    1c5a:	1a 2e       	mov	r1, r26
    1c5c:	aa 1b       	sub	r26, r26
    1c5e:	bb 1b       	sub	r27, r27
    1c60:	fd 01       	movw	r30, r26
    1c62:	0d c0       	rjmp	.+26     	; 0x1c7e <__udivmodsi4_ep>

00001c64 <__udivmodsi4_loop>:
    1c64:	aa 1f       	adc	r26, r26
    1c66:	bb 1f       	adc	r27, r27
    1c68:	ee 1f       	adc	r30, r30
    1c6a:	ff 1f       	adc	r31, r31
    1c6c:	a2 17       	cp	r26, r18
    1c6e:	b3 07       	cpc	r27, r19
    1c70:	e4 07       	cpc	r30, r20
    1c72:	f5 07       	cpc	r31, r21
    1c74:	20 f0       	brcs	.+8      	; 0x1c7e <__udivmodsi4_ep>
    1c76:	a2 1b       	sub	r26, r18
    1c78:	b3 0b       	sbc	r27, r19
    1c7a:	e4 0b       	sbc	r30, r20
    1c7c:	f5 0b       	sbc	r31, r21

00001c7e <__udivmodsi4_ep>:
    1c7e:	66 1f       	adc	r22, r22
    1c80:	77 1f       	adc	r23, r23
    1c82:	88 1f       	adc	r24, r24
    1c84:	99 1f       	adc	r25, r25
    1c86:	1a 94       	dec	r1
    1c88:	69 f7       	brne	.-38     	; 0x1c64 <__udivmodsi4_loop>
    1c8a:	60 95       	com	r22
    1c8c:	70 95       	com	r23
    1c8e:	80 95       	com	r24
    1c90:	90 95       	com	r25
    1c92:	9b 01       	movw	r18, r22
    1c94:	ac 01       	movw	r20, r24
    1c96:	bd 01       	movw	r22, r26
    1c98:	cf 01       	movw	r24, r30
    1c9a:	08 95       	ret

00001c9c <__muluhisi3>:
    1c9c:	09 d0       	rcall	.+18     	; 0x1cb0 <__umulhisi3>
    1c9e:	a5 9f       	mul	r26, r21
    1ca0:	90 0d       	add	r25, r0
    1ca2:	b4 9f       	mul	r27, r20
    1ca4:	90 0d       	add	r25, r0
    1ca6:	a4 9f       	mul	r26, r20
    1ca8:	80 0d       	add	r24, r0
    1caa:	91 1d       	adc	r25, r1
    1cac:	11 24       	eor	r1, r1
    1cae:	08 95       	ret

00001cb0 <__umulhisi3>:
    1cb0:	a2 9f       	mul	r26, r18
    1cb2:	b0 01       	movw	r22, r0
    1cb4:	b3 9f       	mul	r27, r19
    1cb6:	c0 01       	movw	r24, r0
    1cb8:	a3 9f       	mul	r26, r19
    1cba:	70 0d       	add	r23, r0
    1cbc:	81 1d       	adc	r24, r1
    1cbe:	11 24       	eor	r1, r1
    1cc0:	91 1d       	adc	r25, r1
    1cc2:	b2 9f       	mul	r27, r18
    1cc4:	70 0d       	add	r23, r0
    1cc6:	81 1d       	adc	r24, r1
    1cc8:	11 24       	eor	r1, r1
    1cca:	91 1d       	adc	r25, r1
    1ccc:	08 95       	ret

00001cce <_exit>:
    1cce:	f8 94       	cli

00001cd0 <__stop_program>:
    1cd0:	ff cf       	rjmp	.-2      	; 0x1cd0 <__stop_program>
