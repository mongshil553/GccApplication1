
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00001116  000011aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001116  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000030  00800102  00800102  000011ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000011dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00001218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bde  00000000  00000000  000013c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d9d  00000000  00000000  00002fa6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f48  00000000  00000000  00003d43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000418  00000000  00000000  00004c8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000803  00000000  00000000  000050a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000890  00000000  00000000  000058a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00006137  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	86 c0       	rjmp	.+268    	; 0x10e <__ctors_end>
       2:	00 00       	nop
       4:	a1 c0       	rjmp	.+322    	; 0x148 <__bad_interrupt>
       6:	00 00       	nop
       8:	9f c0       	rjmp	.+318    	; 0x148 <__bad_interrupt>
       a:	00 00       	nop
       c:	9d c0       	rjmp	.+314    	; 0x148 <__bad_interrupt>
       e:	00 00       	nop
      10:	9b c0       	rjmp	.+310    	; 0x148 <__bad_interrupt>
      12:	00 00       	nop
      14:	99 c0       	rjmp	.+306    	; 0x148 <__bad_interrupt>
      16:	00 00       	nop
      18:	97 c0       	rjmp	.+302    	; 0x148 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	95 c0       	rjmp	.+298    	; 0x148 <__bad_interrupt>
      1e:	00 00       	nop
      20:	2c c2       	rjmp	.+1112   	; 0x47a <__vector_8>
      22:	00 00       	nop
      24:	91 c0       	rjmp	.+290    	; 0x148 <__bad_interrupt>
      26:	00 00       	nop
      28:	8f c0       	rjmp	.+286    	; 0x148 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8d c0       	rjmp	.+282    	; 0x148 <__bad_interrupt>
      2e:	00 00       	nop
      30:	8b c0       	rjmp	.+278    	; 0x148 <__bad_interrupt>
      32:	00 00       	nop
      34:	89 c0       	rjmp	.+274    	; 0x148 <__bad_interrupt>
      36:	00 00       	nop
      38:	87 c0       	rjmp	.+270    	; 0x148 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	85 c0       	rjmp	.+266    	; 0x148 <__bad_interrupt>
      3e:	00 00       	nop
      40:	6d c3       	rjmp	.+1754   	; 0x71c <__vector_16>
      42:	00 00       	nop
      44:	81 c0       	rjmp	.+258    	; 0x148 <__bad_interrupt>
      46:	00 00       	nop
      48:	7f c0       	rjmp	.+254    	; 0x148 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7d c0       	rjmp	.+250    	; 0x148 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ed c2       	rjmp	.+1498   	; 0x62c <__vector_20>
      52:	00 00       	nop
      54:	79 c0       	rjmp	.+242    	; 0x148 <__bad_interrupt>
      56:	00 00       	nop
      58:	77 c0       	rjmp	.+238    	; 0x148 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	75 c0       	rjmp	.+234    	; 0x148 <__bad_interrupt>
      5e:	00 00       	nop
      60:	73 c0       	rjmp	.+230    	; 0x148 <__bad_interrupt>
      62:	00 00       	nop
      64:	71 c0       	rjmp	.+226    	; 0x148 <__bad_interrupt>
      66:	00 00       	nop
      68:	6f c0       	rjmp	.+222    	; 0x148 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6d c0       	rjmp	.+218    	; 0x148 <__bad_interrupt>
      6e:	00 00       	nop
      70:	6b c0       	rjmp	.+214    	; 0x148 <__bad_interrupt>
      72:	00 00       	nop
      74:	69 c0       	rjmp	.+210    	; 0x148 <__bad_interrupt>
      76:	00 00       	nop
      78:	67 c0       	rjmp	.+206    	; 0x148 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	65 c0       	rjmp	.+202    	; 0x148 <__bad_interrupt>
      7e:	00 00       	nop
      80:	63 c0       	rjmp	.+198    	; 0x148 <__bad_interrupt>
      82:	00 00       	nop
      84:	61 c0       	rjmp	.+194    	; 0x148 <__bad_interrupt>
      86:	00 00       	nop
      88:	5f c0       	rjmp	.+190    	; 0x148 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	08 00       	.word	0x0008	; ????
      8e:	00 00       	nop
      90:	be 92       	st	-X, r11
      92:	24 49       	sbci	r18, 0x94	; 148
      94:	12 3e       	cpi	r17, 0xE2	; 226
      96:	ab aa       	std	Y+51, r10	; 0x33
      98:	aa 2a       	or	r10, r26
      9a:	be cd       	rjmp	.-1156   	; 0xfffffc18 <__eeprom_end+0xff7efc18>
      9c:	cc cc       	rjmp	.-1640   	; 0xfffffa36 <__eeprom_end+0xff7efa36>
      9e:	4c 3e       	cpi	r20, 0xEC	; 236
      a0:	00 00       	nop
      a2:	00 80       	ld	r0, Z
      a4:	be ab       	std	Y+54, r27	; 0x36
      a6:	aa aa       	std	Y+50, r10	; 0x32
      a8:	aa 3e       	cpi	r26, 0xEA	; 234
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	bf 00       	.word	0x00bf	; ????
      b0:	00 00       	nop
      b2:	80 3f       	cpi	r24, 0xF0	; 240
      b4:	00 00       	nop
      b6:	00 00       	nop
      b8:	00 08       	sbc	r0, r0
      ba:	41 78       	andi	r20, 0x81	; 129
      bc:	d3 bb       	out	0x13, r29	; 19
      be:	43 87       	std	Z+11, r20	; 0x0b
      c0:	d1 13       	cpse	r29, r17
      c2:	3d 19       	sub	r19, r13
      c4:	0e 3c       	cpi	r16, 0xCE	; 206
      c6:	c3 bd       	out	0x23, r28	; 35
      c8:	42 82       	std	Z+2, r4	; 0x02
      ca:	ad 2b       	or	r26, r29
      cc:	3e 68       	ori	r19, 0x8E	; 142
      ce:	ec 82       	std	Y+4, r14	; 0x04
      d0:	76 be       	out	0x36, r7	; 54
      d2:	d9 8f       	std	Y+25, r29	; 0x19
      d4:	e1 a9       	ldd	r30, Z+49	; 0x31
      d6:	3e 4c       	sbci	r19, 0xCE	; 206
      d8:	80 ef       	ldi	r24, 0xF0	; 240
      da:	ff be       	out	0x3f, r15	; 63
      dc:	01 c4       	rjmp	.+2050   	; 0x8e0 <__vector_16+0x1c4>
      de:	ff 7f       	andi	r31, 0xFF	; 255
      e0:	3f 00       	.word	0x003f	; ????
      e2:	00 00       	nop
      e4:	00 00       	nop
      e6:	07 63       	ori	r16, 0x37	; 55
      e8:	42 36       	cpi	r20, 0x62	; 98
      ea:	b7 9b       	sbis	0x16, 7	; 22
      ec:	d8 a7       	std	Y+40, r29	; 0x28
      ee:	1a 39       	cpi	r17, 0x9A	; 154
      f0:	68 56       	subi	r22, 0x68	; 104
      f2:	18 ae       	std	Y+56, r1	; 0x38
      f4:	ba ab       	std	Y+50, r27	; 0x32
      f6:	55 8c       	ldd	r5, Z+29	; 0x1d
      f8:	1d 3c       	cpi	r17, 0xCD	; 205
      fa:	b7 cc       	rjmp	.-1682   	; 0xfffffa6a <__eeprom_end+0xff7efa6a>
      fc:	57 63       	ori	r21, 0x37	; 55
      fe:	bd 6d       	ori	r27, 0xDD	; 221
     100:	ed fd       	.word	0xfded	; ????
     102:	75 3e       	cpi	r23, 0xE5	; 229
     104:	f6 17       	cp	r31, r22
     106:	72 31       	cpi	r23, 0x12	; 18
     108:	bf 00       	.word	0x00bf	; ????
     10a:	00 00       	nop
     10c:	80 3f       	cpi	r24, 0xF0	; 240

0000010e <__ctors_end>:
     10e:	11 24       	eor	r1, r1
     110:	1f be       	out	0x3f, r1	; 63
     112:	cf ef       	ldi	r28, 0xFF	; 255
     114:	d0 e1       	ldi	r29, 0x10	; 16
     116:	de bf       	out	0x3e, r29	; 62
     118:	cd bf       	out	0x3d, r28	; 61

0000011a <__do_copy_data>:
     11a:	11 e0       	ldi	r17, 0x01	; 1
     11c:	a0 e0       	ldi	r26, 0x00	; 0
     11e:	b1 e0       	ldi	r27, 0x01	; 1
     120:	e6 e1       	ldi	r30, 0x16	; 22
     122:	f1 e1       	ldi	r31, 0x11	; 17
     124:	00 e0       	ldi	r16, 0x00	; 0
     126:	0b bf       	out	0x3b, r16	; 59
     128:	02 c0       	rjmp	.+4      	; 0x12e <__do_copy_data+0x14>
     12a:	07 90       	elpm	r0, Z+
     12c:	0d 92       	st	X+, r0
     12e:	a2 30       	cpi	r26, 0x02	; 2
     130:	b1 07       	cpc	r27, r17
     132:	d9 f7       	brne	.-10     	; 0x12a <__do_copy_data+0x10>

00000134 <__do_clear_bss>:
     134:	21 e0       	ldi	r18, 0x01	; 1
     136:	a2 e0       	ldi	r26, 0x02	; 2
     138:	b1 e0       	ldi	r27, 0x01	; 1
     13a:	01 c0       	rjmp	.+2      	; 0x13e <.do_clear_bss_start>

0000013c <.do_clear_bss_loop>:
     13c:	1d 92       	st	X+, r1

0000013e <.do_clear_bss_start>:
     13e:	a2 33       	cpi	r26, 0x32	; 50
     140:	b2 07       	cpc	r27, r18
     142:	e1 f7       	brne	.-8      	; 0x13c <.do_clear_bss_loop>
     144:	cb d1       	rcall	.+918    	; 0x4dc <main>
     146:	e5 c7       	rjmp	.+4042   	; 0x1112 <_exit>

00000148 <__bad_interrupt>:
     148:	5b cf       	rjmp	.-330    	; 0x0 <__vectors>

0000014a <init_BT>:
#include "Bluetooth.h"
#include "Marble.h"
#include <avr/io.h>

void init_BT(){
	UCSR1A = 0x00;
     14a:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
	UCSR1B = 0x18;
     14e:	88 e1       	ldi	r24, 0x18	; 24
     150:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	UCSR1C = 0x06;
     154:	86 e0       	ldi	r24, 0x06	; 6
     156:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
	
	UBRR1H = 0x00;
     15a:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 103;
     15e:	87 e6       	ldi	r24, 0x67	; 103
     160:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     164:	08 95       	ret

00000166 <BT_send>:
	return 0x00;
}

void BT_send(char msg){
	//send msg
	while(!(UCSR1A & (1<<UDRE))); //Wait for buffer to clear
     166:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     16a:	95 ff       	sbrs	r25, 5
     16c:	fc cf       	rjmp	.-8      	; 0x166 <BT_send>
	UDR1 = msg; //send msg
     16e:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     172:	08 95       	ret

00000174 <BT_Receive>:
char BT_Receive(){
	
	static char step = 0;
	static char tmp = 0;
	
	if(!(UCSR1A&(1<<RXC1))) return 0x00;
     174:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     178:	88 23       	and	r24, r24
     17a:	0c f0       	brlt	.+2      	; 0x17e <BT_Receive+0xa>
     17c:	87 c0       	rjmp	.+270    	; 0x28c <BT_Receive+0x118>
	
	rdata = UDR1;
     17e:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     182:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <rdata>
	
	switch(step){
     186:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
     18a:	82 30       	cpi	r24, 0x02	; 2
     18c:	b1 f0       	breq	.+44     	; 0x1ba <BT_Receive+0x46>
     18e:	83 30       	cpi	r24, 0x03	; 3
     190:	b1 f1       	breq	.+108    	; 0x1fe <BT_Receive+0x8a>
     192:	81 30       	cpi	r24, 0x01	; 1
     194:	09 f0       	breq	.+2      	; 0x198 <BT_Receive+0x24>
     196:	54 c0       	rjmp	.+168    	; 0x240 <BT_Receive+0xcc>
		case 1:
		if(rdata == '.') {
     198:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rdata>
     19c:	8e 32       	cpi	r24, 0x2E	; 46
     19e:	39 f4       	brne	.+14     	; 0x1ae <BT_Receive+0x3a>
			step = 0;
     1a0:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
			BT_send(rdata);
     1a4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rdata>
     1a8:	de df       	rcall	.-68     	; 0x166 <BT_send>
			//ElectroMagnet_On();
			return 0x00;
     1aa:	80 e0       	ldi	r24, 0x00	; 0
     1ac:	08 95       	ret
		}
		else marble.color = rdata - '0';
     1ae:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rdata>
     1b2:	80 53       	subi	r24, 0x30	; 48
     1b4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <marble>
		break;
     1b8:	43 c0       	rjmp	.+134    	; 0x240 <BT_Receive+0xcc>
		
		case 2:
		if(rdata == '.') {
     1ba:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rdata>
     1be:	8e 32       	cpi	r24, 0x2E	; 46
     1c0:	39 f4       	brne	.+14     	; 0x1d0 <BT_Receive+0x5c>
			step = 0;
     1c2:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
			BT_send(rdata);
     1c6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rdata>
     1ca:	cd df       	rcall	.-102    	; 0x166 <BT_send>
			//ElectroMagnet_On();
			return 0x00;
     1cc:	80 e0       	ldi	r24, 0x00	; 0
     1ce:	08 95       	ret
		}
		else marble.posX = marble.posX * 10 + rdata - '0';
     1d0:	e4 e0       	ldi	r30, 0x04	; 4
     1d2:	f1 e0       	ldi	r31, 0x01	; 1
     1d4:	81 81       	ldd	r24, Z+1	; 0x01
     1d6:	92 81       	ldd	r25, Z+2	; 0x02
     1d8:	9c 01       	movw	r18, r24
     1da:	22 0f       	add	r18, r18
     1dc:	33 1f       	adc	r19, r19
     1de:	88 0f       	add	r24, r24
     1e0:	99 1f       	adc	r25, r25
     1e2:	88 0f       	add	r24, r24
     1e4:	99 1f       	adc	r25, r25
     1e6:	88 0f       	add	r24, r24
     1e8:	99 1f       	adc	r25, r25
     1ea:	82 0f       	add	r24, r18
     1ec:	93 1f       	adc	r25, r19
     1ee:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <rdata>
     1f2:	82 0f       	add	r24, r18
     1f4:	91 1d       	adc	r25, r1
     1f6:	c0 97       	sbiw	r24, 0x30	; 48
     1f8:	92 83       	std	Z+2, r25	; 0x02
     1fa:	81 83       	std	Z+1, r24	; 0x01
		break;
     1fc:	21 c0       	rjmp	.+66     	; 0x240 <BT_Receive+0xcc>
		
		case 3:
		if(rdata == '.') {
     1fe:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rdata>
     202:	8e 32       	cpi	r24, 0x2E	; 46
     204:	39 f4       	brne	.+14     	; 0x214 <BT_Receive+0xa0>
			step = 0;
     206:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
			BT_send(rdata);
     20a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rdata>
     20e:	ab df       	rcall	.-170    	; 0x166 <BT_send>
			//ElectroMagnet_Off();
			return 0x01;
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	08 95       	ret
		}
		else marble.posY = marble.posY * 10 + rdata -'0';
     214:	e4 e0       	ldi	r30, 0x04	; 4
     216:	f1 e0       	ldi	r31, 0x01	; 1
     218:	83 81       	ldd	r24, Z+3	; 0x03
     21a:	94 81       	ldd	r25, Z+4	; 0x04
     21c:	9c 01       	movw	r18, r24
     21e:	22 0f       	add	r18, r18
     220:	33 1f       	adc	r19, r19
     222:	88 0f       	add	r24, r24
     224:	99 1f       	adc	r25, r25
     226:	88 0f       	add	r24, r24
     228:	99 1f       	adc	r25, r25
     22a:	88 0f       	add	r24, r24
     22c:	99 1f       	adc	r25, r25
     22e:	82 0f       	add	r24, r18
     230:	93 1f       	adc	r25, r19
     232:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <rdata>
     236:	82 0f       	add	r24, r18
     238:	91 1d       	adc	r25, r1
     23a:	c0 97       	sbiw	r24, 0x30	; 48
     23c:	94 83       	std	Z+4, r25	; 0x04
     23e:	83 83       	std	Z+3, r24	; 0x03
		break;
	}
	
	if(rdata == '#') {
     240:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rdata>
     244:	83 32       	cpi	r24, 0x23	; 35
     246:	31 f4       	brne	.+12     	; 0x254 <BT_Receive+0xe0>
		marble.color = 0;
     248:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <marble>
		step = 1;
     24c:	81 e0       	ldi	r24, 0x01	; 1
     24e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
     252:	17 c0       	rjmp	.+46     	; 0x282 <BT_Receive+0x10e>
	}
	else if(rdata == '!'){
     254:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rdata>
     258:	81 32       	cpi	r24, 0x21	; 33
     25a:	41 f4       	brne	.+16     	; 0x26c <BT_Receive+0xf8>
		marble.posX = 0;
     25c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <marble+0x2>
     260:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <marble+0x1>
		step = 2;
     264:	82 e0       	ldi	r24, 0x02	; 2
     266:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
     26a:	0b c0       	rjmp	.+22     	; 0x282 <BT_Receive+0x10e>
	}
	else if(rdata == '*'){
     26c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rdata>
     270:	8a 32       	cpi	r24, 0x2A	; 42
     272:	39 f4       	brne	.+14     	; 0x282 <BT_Receive+0x10e>
		marble.posY = 0;
     274:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <marble+0x4>
     278:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <marble+0x3>
		step = 3;
     27c:	83 e0       	ldi	r24, 0x03	; 3
     27e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	}
	
	BT_send(rdata);
     282:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rdata>
     286:	6f df       	rcall	.-290    	; 0x166 <BT_send>

	return 0x00;
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	08 95       	ret
char BT_Receive(){
	
	static char step = 0;
	static char tmp = 0;
	
	if(!(UCSR1A&(1<<RXC1))) return 0x00;
     28c:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	BT_send(rdata);

	return 0x00;
}
     28e:	08 95       	ret

00000290 <Select_Item>:
     290:	95 b3       	in	r25, 0x15	; 21
     292:	90 7f       	andi	r25, 0xF0	; 240
     294:	89 2b       	or	r24, r25
     296:	85 bb       	out	0x15, r24	; 21
     298:	2f ef       	ldi	r18, 0xFF	; 255
     29a:	81 ee       	ldi	r24, 0xE1	; 225
     29c:	94 e0       	ldi	r25, 0x04	; 4
     29e:	21 50       	subi	r18, 0x01	; 1
     2a0:	80 40       	sbci	r24, 0x00	; 0
     2a2:	90 40       	sbci	r25, 0x00	; 0
     2a4:	e1 f7       	brne	.-8      	; 0x29e <Select_Item+0xe>
     2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <Select_Item+0x18>
     2a8:	00 00       	nop
     2aa:	08 95       	ret

000002ac <Servo_Act>:
     2ac:	40 e0       	ldi	r20, 0x00	; 0
     2ae:	50 e0       	ldi	r21, 0x00	; 0
     2b0:	21 c0       	rjmp	.+66     	; 0x2f4 <Servo_Act+0x48>
     2b2:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <Servo_Allowed>
     2b6:	22 23       	and	r18, r18
     2b8:	b9 f0       	breq	.+46     	; 0x2e8 <Servo_Act+0x3c>
     2ba:	4f 5f       	subi	r20, 0xFF	; 255
     2bc:	5f 4f       	sbci	r21, 0xFF	; 255
     2be:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <Servo_increment_threshold>
     2c2:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <Servo_increment_threshold+0x1>
     2c6:	42 17       	cp	r20, r18
     2c8:	53 07       	cpc	r21, r19
     2ca:	71 f4       	brne	.+28     	; 0x2e8 <Servo_Act+0x3c>
     2cc:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <Servo_step>
     2d0:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <Servo_step+0x1>
     2d4:	82 0f       	add	r24, r18
     2d6:	93 1f       	adc	r25, r19
     2d8:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <Servo_pos+0x1>
     2dc:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <Servo_pos>
     2e0:	9b bd       	out	0x2b, r25	; 43
     2e2:	8a bd       	out	0x2a, r24	; 42
     2e4:	40 e0       	ldi	r20, 0x00	; 0
     2e6:	50 e0       	ldi	r21, 0x00	; 0
     2e8:	8f e8       	ldi	r24, 0x8F	; 143
     2ea:	91 e0       	ldi	r25, 0x01	; 1
     2ec:	01 97       	sbiw	r24, 0x01	; 1
     2ee:	f1 f7       	brne	.-4      	; 0x2ec <Servo_Act+0x40>
     2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <Servo_Act+0x46>
     2f2:	00 00       	nop
     2f4:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <Servo_pos>
     2f8:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <Servo_pos+0x1>
     2fc:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <Servo_target>
     300:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <Servo_target+0x1>
     304:	82 17       	cp	r24, r18
     306:	93 07       	cpc	r25, r19
     308:	a1 f6       	brne	.-88     	; 0x2b2 <Servo_Act+0x6>
     30a:	08 95       	ret

0000030c <Servo_Go_Home>:
     30c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <Servo_pos>
     310:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <Servo_pos+0x1>
     314:	9b bd       	out	0x2b, r25	; 43
     316:	8a bd       	out	0x2a, r24	; 42
     318:	82 e0       	ldi	r24, 0x02	; 2
     31a:	ba df       	rcall	.-140    	; 0x290 <Select_Item>
     31c:	82 e0       	ldi	r24, 0x02	; 2
     31e:	b8 df       	rcall	.-144    	; 0x290 <Select_Item>
     320:	82 e8       	ldi	r24, 0x82	; 130
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <Servo_target+0x1>
     328:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <Servo_target>
     32c:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <Servo_pos>
     330:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <Servo_pos+0x1>
     334:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <Servo_target>
     338:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <Servo_target+0x1>
     33c:	28 17       	cp	r18, r24
     33e:	39 07       	cpc	r19, r25
     340:	38 f0       	brcs	.+14     	; 0x350 <Servo_Go_Home+0x44>
     342:	8f ef       	ldi	r24, 0xFF	; 255
     344:	9f ef       	ldi	r25, 0xFF	; 255
     346:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <Servo_step+0x1>
     34a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <Servo_step>
     34e:	06 c0       	rjmp	.+12     	; 0x35c <Servo_Go_Home+0x50>
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <Servo_step+0x1>
     358:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <Servo_step>
     35c:	a7 cf       	rjmp	.-178    	; 0x2ac <Servo_Act>
     35e:	08 95       	ret

00000360 <Servo_Go_Box>:
     360:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <Servo_pos>
     364:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <Servo_pos+0x1>
     368:	9b bd       	out	0x2b, r25	; 43
     36a:	8a bd       	out	0x2a, r24	; 42
     36c:	82 e0       	ldi	r24, 0x02	; 2
     36e:	90 df       	rcall	.-224    	; 0x290 <Select_Item>
     370:	82 e0       	ldi	r24, 0x02	; 2
     372:	8e df       	rcall	.-228    	; 0x290 <Select_Item>
     374:	8c e6       	ldi	r24, 0x6C	; 108
     376:	92 e0       	ldi	r25, 0x02	; 2
     378:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <Servo_target+0x1>
     37c:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <Servo_target>
     380:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <Servo_pos>
     384:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <Servo_pos+0x1>
     388:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <Servo_target>
     38c:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <Servo_target+0x1>
     390:	28 17       	cp	r18, r24
     392:	39 07       	cpc	r19, r25
     394:	38 f0       	brcs	.+14     	; 0x3a4 <Servo_Go_Box+0x44>
     396:	8f ef       	ldi	r24, 0xFF	; 255
     398:	9f ef       	ldi	r25, 0xFF	; 255
     39a:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <Servo_step+0x1>
     39e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <Servo_step>
     3a2:	06 c0       	rjmp	.+12     	; 0x3b0 <Servo_Go_Box+0x50>
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <Servo_step+0x1>
     3ac:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <Servo_step>
     3b0:	7d cf       	rjmp	.-262    	; 0x2ac <Servo_Act>
     3b2:	08 95       	ret

000003b4 <Servo_Goto>:
     3b4:	cf 93       	push	r28
     3b6:	df 93       	push	r29
     3b8:	ec 01       	movw	r28, r24
     3ba:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <Servo_pos>
     3be:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <Servo_pos+0x1>
     3c2:	9b bd       	out	0x2b, r25	; 43
     3c4:	8a bd       	out	0x2a, r24	; 42
     3c6:	82 e0       	ldi	r24, 0x02	; 2
     3c8:	63 df       	rcall	.-314    	; 0x290 <Select_Item>
     3ca:	82 e0       	ldi	r24, 0x02	; 2
     3cc:	61 df       	rcall	.-318    	; 0x290 <Select_Item>
     3ce:	d0 93 18 01 	sts	0x0118, r29	; 0x800118 <Servo_target+0x1>
     3d2:	c0 93 17 01 	sts	0x0117, r28	; 0x800117 <Servo_target>
     3d6:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <Servo_pos>
     3da:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <Servo_pos+0x1>
     3de:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <Servo_target>
     3e2:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <Servo_target+0x1>
     3e6:	28 17       	cp	r18, r24
     3e8:	39 07       	cpc	r19, r25
     3ea:	38 f0       	brcs	.+14     	; 0x3fa <Servo_Goto+0x46>
     3ec:	8f ef       	ldi	r24, 0xFF	; 255
     3ee:	9f ef       	ldi	r25, 0xFF	; 255
     3f0:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <Servo_step+0x1>
     3f4:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <Servo_step>
     3f8:	06 c0       	rjmp	.+12     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     3fa:	81 e0       	ldi	r24, 0x01	; 1
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <Servo_step+0x1>
     402:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <Servo_step>
     406:	52 df       	rcall	.-348    	; 0x2ac <Servo_Act>
     408:	df 91       	pop	r29
     40a:	cf 91       	pop	r28
     40c:	08 95       	ret

0000040e <Servo_Set_Speed>:
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <Servo_increment_threshold+0x1>
     414:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <Servo_increment_threshold>
     418:	08 95       	ret

0000041a <RED_LED_On>:
     41a:	cf 93       	push	r28
     41c:	df 93       	push	r29
     41e:	ec 01       	movw	r28, r24
     420:	83 e0       	ldi	r24, 0x03	; 3
     422:	36 df       	rcall	.-404    	; 0x290 <Select_Item>
     424:	87 e8       	ldi	r24, 0x87	; 135
     426:	93 e1       	ldi	r25, 0x13	; 19
     428:	97 bd       	out	0x27, r25	; 39
     42a:	86 bd       	out	0x26, r24	; 38
     42c:	db bd       	out	0x2b, r29	; 43
     42e:	ca bd       	out	0x2a, r28	; 42
     430:	89 e0       	ldi	r24, 0x09	; 9
     432:	2e df       	rcall	.-420    	; 0x290 <Select_Item>
     434:	df 91       	pop	r29
     436:	cf 91       	pop	r28
     438:	08 95       	ret

0000043a <GREEN_LED_On>:
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	ec 01       	movw	r28, r24
     440:	83 e0       	ldi	r24, 0x03	; 3
     442:	26 df       	rcall	.-436    	; 0x290 <Select_Item>
     444:	87 e8       	ldi	r24, 0x87	; 135
     446:	93 e1       	ldi	r25, 0x13	; 19
     448:	97 bd       	out	0x27, r25	; 39
     44a:	86 bd       	out	0x26, r24	; 38
     44c:	db bd       	out	0x2b, r29	; 43
     44e:	ca bd       	out	0x2a, r28	; 42
     450:	8d e0       	ldi	r24, 0x0D	; 13
     452:	1e df       	rcall	.-452    	; 0x290 <Select_Item>
     454:	df 91       	pop	r29
     456:	cf 91       	pop	r28
     458:	08 95       	ret

0000045a <BLUE_LED_On>:
     45a:	cf 93       	push	r28
     45c:	df 93       	push	r29
     45e:	ec 01       	movw	r28, r24
     460:	83 e0       	ldi	r24, 0x03	; 3
     462:	16 df       	rcall	.-468    	; 0x290 <Select_Item>
     464:	87 e8       	ldi	r24, 0x87	; 135
     466:	93 e1       	ldi	r25, 0x13	; 19
     468:	97 bd       	out	0x27, r25	; 39
     46a:	86 bd       	out	0x26, r24	; 38
     46c:	db bd       	out	0x2b, r29	; 43
     46e:	ca bd       	out	0x2a, r28	; 42
     470:	81 e0       	ldi	r24, 0x01	; 1
     472:	0e df       	rcall	.-484    	; 0x290 <Select_Item>
     474:	df 91       	pop	r29
     476:	cf 91       	pop	r28
     478:	08 95       	ret

0000047a <__vector_8>:
			}
		}
	}
	else{
		was = 0x00;
		Buzzer_off();
     47a:	1f 92       	push	r1
     47c:	0f 92       	push	r0
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	0f 92       	push	r0
     482:	11 24       	eor	r1, r1
     484:	0f 90       	pop	r0
     486:	0f be       	out	0x3f, r0	; 63
     488:	0f 90       	pop	r0
     48a:	1f 90       	pop	r1
     48c:	18 95       	reti

0000048e <timer0_init>:
     48e:	83 b7       	in	r24, 0x33	; 51
     490:	87 60       	ori	r24, 0x07	; 7
     492:	83 bf       	out	0x33, r24	; 51
     494:	87 b7       	in	r24, 0x37	; 55
     496:	81 60       	ori	r24, 0x01	; 1
     498:	87 bf       	out	0x37, r24	; 55
     49a:	12 be       	out	0x32, r1	; 50
     49c:	08 95       	ret

0000049e <timer1_init>:
     49e:	82 e8       	ldi	r24, 0x82	; 130
     4a0:	8f bd       	out	0x2f, r24	; 47
     4a2:	8b e1       	ldi	r24, 0x1B	; 27
     4a4:	8e bd       	out	0x2e, r24	; 46
     4a6:	87 e8       	ldi	r24, 0x87	; 135
     4a8:	93 e1       	ldi	r25, 0x13	; 19
     4aa:	97 bd       	out	0x27, r25	; 39
     4ac:	86 bd       	out	0x26, r24	; 38
     4ae:	08 95       	ret

000004b0 <port_setup>:
     4b0:	8f ef       	ldi	r24, 0xFF	; 255
     4b2:	8a bb       	out	0x1a, r24	; 26
     4b4:	11 ba       	out	0x11, r1	; 17
     4b6:	87 bb       	out	0x17, r24	; 23
     4b8:	84 bb       	out	0x14, r24	; 20
     4ba:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     4be:	12 b8       	out	0x02, r1	; 2
     4c0:	08 95       	ret

000004c2 <adc_init>:
     4c2:	80 e4       	ldi	r24, 0x40	; 64
     4c4:	87 b9       	out	0x07, r24	; 7
     4c6:	87 e8       	ldi	r24, 0x87	; 135
     4c8:	86 b9       	out	0x06, r24	; 6
     4ca:	08 95       	ret

000004cc <ElectroMagnet_On>:
     4cc:	85 b3       	in	r24, 0x15	; 21
     4ce:	8f 77       	andi	r24, 0x7F	; 127
     4d0:	85 bb       	out	0x15, r24	; 21
     4d2:	08 95       	ret

000004d4 <ElectroMagnet_Off>:
     4d4:	85 b3       	in	r24, 0x15	; 21
     4d6:	80 68       	ori	r24, 0x80	; 128
     4d8:	85 bb       	out	0x15, r24	; 21
     4da:	08 95       	ret

000004dc <main>:
     4dc:	e9 df       	rcall	.-46     	; 0x4b0 <port_setup>
     4de:	f1 df       	rcall	.-30     	; 0x4c2 <adc_init>
     4e0:	d6 df       	rcall	.-84     	; 0x48e <timer0_init>
     4e2:	dd df       	rcall	.-70     	; 0x49e <timer1_init>
     4e4:	32 de       	rcall	.-924    	; 0x14a <init_BT>
     4e6:	80 ec       	ldi	r24, 0xC0	; 192
     4e8:	89 bf       	out	0x39, r24	; 57
     4ea:	80 ef       	ldi	r24, 0xF0	; 240
     4ec:	8a bf       	out	0x3a, r24	; 58
     4ee:	94 d2       	rcall	.+1320   	; 0xa18 <Reset_sensor_val>
     4f0:	f1 df       	rcall	.-30     	; 0x4d4 <ElectroMagnet_Off>
     4f2:	e4 e0       	ldi	r30, 0x04	; 4
     4f4:	f1 e0       	ldi	r31, 0x01	; 1
     4f6:	85 e0       	ldi	r24, 0x05	; 5
     4f8:	80 83       	st	Z, r24
     4fa:	8f ef       	ldi	r24, 0xFF	; 255
     4fc:	9f ef       	ldi	r25, 0xFF	; 255
     4fe:	92 83       	std	Z+2, r25	; 0x02
     500:	81 83       	std	Z+1, r24	; 0x01
     502:	94 83       	std	Z+4, r25	; 0x04
     504:	83 83       	std	Z+3, r24	; 0x03
     506:	78 94       	sei
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <Servo_Allowed>
     50e:	84 e1       	ldi	r24, 0x14	; 20
     510:	7e df       	rcall	.-260    	; 0x40e <Servo_Set_Speed>
     512:	87 e7       	ldi	r24, 0x77	; 119
     514:	91 e0       	ldi	r25, 0x01	; 1
     516:	4e df       	rcall	.-356    	; 0x3b4 <Servo_Goto>
     518:	f9 de       	rcall	.-526    	; 0x30c <Servo_Go_Home>
     51a:	c1 e0       	ldi	r28, 0x01	; 1
     51c:	c4 30       	cpi	r28, 0x04	; 4
     51e:	f9 f0       	breq	.+62     	; 0x55e <main+0x82>
     520:	28 f4       	brcc	.+10     	; 0x52c <main+0x50>
     522:	c1 30       	cpi	r28, 0x01	; 1
     524:	49 f0       	breq	.+18     	; 0x538 <main+0x5c>
     526:	c2 30       	cpi	r28, 0x02	; 2
     528:	a9 f0       	breq	.+42     	; 0x554 <main+0x78>
     52a:	f8 cf       	rjmp	.-16     	; 0x51c <main+0x40>
     52c:	c8 30       	cpi	r28, 0x08	; 8
     52e:	51 f1       	breq	.+84     	; 0x584 <main+0xa8>
     530:	c0 31       	cpi	r28, 0x10	; 16
     532:	09 f4       	brne	.+2      	; 0x536 <main+0x5a>
     534:	47 c0       	rjmp	.+142    	; 0x5c4 <main+0xe8>
     536:	f2 cf       	rjmp	.-28     	; 0x51c <main+0x40>
     538:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <pressure_sensor_val>
     53c:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <pressure_sensor_val+0x1>
     540:	85 38       	cpi	r24, 0x85	; 133
     542:	93 40       	sbci	r25, 0x03	; 3
     544:	58 f3       	brcs	.-42     	; 0x51c <main+0x40>
     546:	83 e0       	ldi	r24, 0x03	; 3
     548:	a3 de       	rcall	.-698    	; 0x290 <Select_Item>
     54a:	c0 df       	rcall	.-128    	; 0x4cc <ElectroMagnet_On>
     54c:	80 e3       	ldi	r24, 0x30	; 48
     54e:	0b de       	rcall	.-1002   	; 0x166 <BT_send>
     550:	cc 0f       	add	r28, r28
     552:	e4 cf       	rjmp	.-56     	; 0x51c <main+0x40>
     554:	0f de       	rcall	.-994    	; 0x174 <BT_Receive>
     556:	88 23       	and	r24, r24
     558:	09 f3       	breq	.-62     	; 0x51c <main+0x40>
     55a:	cc 0f       	add	r28, r28
     55c:	df cf       	rjmp	.-66     	; 0x51c <main+0x40>
     55e:	87 e7       	ldi	r24, 0x77	; 119
     560:	91 e0       	ldi	r25, 0x01	; 1
     562:	28 df       	rcall	.-432    	; 0x3b4 <Servo_Goto>
     564:	b3 df       	rcall	.-154    	; 0x4cc <ElectroMagnet_On>
     566:	fc de       	rcall	.-520    	; 0x360 <Servo_Go_Box>
     568:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <shk_detected>
     56c:	b3 df       	rcall	.-154    	; 0x4d4 <ElectroMagnet_Off>
     56e:	8f ef       	ldi	r24, 0xFF	; 255
     570:	97 ea       	ldi	r25, 0xA7	; 167
     572:	21 e6       	ldi	r18, 0x61	; 97
     574:	81 50       	subi	r24, 0x01	; 1
     576:	90 40       	sbci	r25, 0x00	; 0
     578:	20 40       	sbci	r18, 0x00	; 0
     57a:	e1 f7       	brne	.-8      	; 0x574 <main+0x98>
     57c:	00 c0       	rjmp	.+0      	; 0x57e <main+0xa2>
     57e:	00 00       	nop
     580:	cc 0f       	add	r28, r28
     582:	cc cf       	rjmp	.-104    	; 0x51c <main+0x40>
     584:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <shk_detected>
     588:	81 30       	cpi	r24, 0x01	; 1
     58a:	29 f4       	brne	.+10     	; 0x596 <main+0xba>
     58c:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <shk_detected>
     590:	bd de       	rcall	.-646    	; 0x30c <Servo_Go_Home>
     592:	cc 0f       	add	r28, r28
     594:	c3 cf       	rjmp	.-122    	; 0x51c <main+0x40>
     596:	84 e1       	ldi	r24, 0x14	; 20
     598:	3a df       	rcall	.-396    	; 0x40e <Servo_Set_Speed>
     59a:	b8 de       	rcall	.-656    	; 0x30c <Servo_Go_Home>
     59c:	97 df       	rcall	.-210    	; 0x4cc <ElectroMagnet_On>
     59e:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <temp_en+0x1>
     5a2:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <temp_en>
     5a6:	80 e5       	ldi	r24, 0x50	; 80
     5a8:	32 df       	rcall	.-412    	; 0x40e <Servo_Set_Speed>
     5aa:	da de       	rcall	.-588    	; 0x360 <Servo_Go_Box>
     5ac:	93 df       	rcall	.-218    	; 0x4d4 <ElectroMagnet_Off>
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <temp_en+0x1>
     5b6:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <temp_en>
     5ba:	84 e1       	ldi	r24, 0x14	; 20
     5bc:	28 df       	rcall	.-432    	; 0x40e <Servo_Set_Speed>
     5be:	a6 de       	rcall	.-692    	; 0x30c <Servo_Go_Home>
     5c0:	cc 0f       	add	r28, r28
     5c2:	ac cf       	rjmp	.-168    	; 0x51c <main+0x40>
     5c4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <marble>
     5c8:	81 11       	cpse	r24, r1
     5ca:	05 c0       	rjmp	.+10     	; 0x5d6 <main+0xfa>
     5cc:	84 ef       	ldi	r24, 0xF4	; 244
     5ce:	91 e0       	ldi	r25, 0x01	; 1
     5d0:	24 df       	rcall	.-440    	; 0x41a <RED_LED_On>
     5d2:	c1 e0       	ldi	r28, 0x01	; 1
     5d4:	a3 cf       	rjmp	.-186    	; 0x51c <main+0x40>
     5d6:	82 30       	cpi	r24, 0x02	; 2
     5d8:	29 f4       	brne	.+10     	; 0x5e4 <main+0x108>
     5da:	84 ef       	ldi	r24, 0xF4	; 244
     5dc:	91 e0       	ldi	r25, 0x01	; 1
     5de:	2d df       	rcall	.-422    	; 0x43a <GREEN_LED_On>
     5e0:	c1 e0       	ldi	r28, 0x01	; 1
     5e2:	9c cf       	rjmp	.-200    	; 0x51c <main+0x40>
     5e4:	81 30       	cpi	r24, 0x01	; 1
     5e6:	29 f4       	brne	.+10     	; 0x5f2 <main+0x116>
     5e8:	84 ef       	ldi	r24, 0xF4	; 244
     5ea:	91 e0       	ldi	r25, 0x01	; 1
     5ec:	36 df       	rcall	.-404    	; 0x45a <BLUE_LED_On>
     5ee:	c1 e0       	ldi	r28, 0x01	; 1
     5f0:	95 cf       	rjmp	.-214    	; 0x51c <main+0x40>
     5f2:	83 e0       	ldi	r24, 0x03	; 3
     5f4:	4d de       	rcall	.-870    	; 0x290 <Select_Item>
     5f6:	c1 e0       	ldi	r28, 0x01	; 1
     5f8:	91 cf       	rjmp	.-222    	; 0x51c <main+0x40>

000005fa <If_Shock_Detected>:
     5fa:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <shk_sensor_val>
     5fe:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <shk_sensor_val+0x1>
     602:	85 38       	cpi	r24, 0x85	; 133
     604:	93 40       	sbci	r25, 0x03	; 3
     606:	18 f4       	brcc	.+6      	; 0x60e <If_Shock_Detected+0x14>
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <shk_detected>
     60e:	08 95       	ret

00000610 <If_PSD_Detected>:
     610:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <psd_sensor_val>
     614:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <psd_sensor_val+0x1>
     618:	89 30       	cpi	r24, 0x09	; 9
     61a:	92 40       	sbci	r25, 0x02	; 2
     61c:	18 f0       	brcs	.+6      	; 0x624 <If_PSD_Detected+0x14>
     61e:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <Servo_Allowed>
     622:	08 95       	ret
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <Servo_Allowed>
     62a:	08 95       	ret

0000062c <__vector_20>:
	}
}


void USART0_TX_vect(unsigned char data){
	while(!(UCSR0A & (1<<UDRE0)));
     62c:	5d 9b       	sbis	0x0b, 5	; 11
     62e:	fe cf       	rjmp	.-4      	; 0x62c <__vector_20>
	UDR0 = data;
     630:	8c b9       	out	0x0c, r24	; 12
     632:	08 95       	ret

00000634 <USART0_NUM>:
}

void USART0_NUM(unsigned short num){
     634:	ef 92       	push	r14
     636:	ff 92       	push	r15
     638:	0f 93       	push	r16
     63a:	1f 93       	push	r17
     63c:	cf 93       	push	r28
     63e:	df 93       	push	r29
     640:	ec 01       	movw	r28, r24

	USART0_TX_vect(num / 1000 + 48);
     642:	7c 01       	movw	r14, r24
     644:	f6 94       	lsr	r15
     646:	e7 94       	ror	r14
     648:	f6 94       	lsr	r15
     64a:	e7 94       	ror	r14
     64c:	f6 94       	lsr	r15
     64e:	e7 94       	ror	r14
     650:	97 01       	movw	r18, r14
     652:	a5 ec       	ldi	r26, 0xC5	; 197
     654:	b0 e2       	ldi	r27, 0x20	; 32
     656:	4e d5       	rcall	.+2716   	; 0x10f4 <__umulhisi3>
     658:	8c 01       	movw	r16, r24
     65a:	12 95       	swap	r17
     65c:	02 95       	swap	r16
     65e:	0f 70       	andi	r16, 0x0F	; 15
     660:	01 27       	eor	r16, r17
     662:	1f 70       	andi	r17, 0x0F	; 15
     664:	01 27       	eor	r16, r17
     666:	80 e3       	ldi	r24, 0x30	; 48
     668:	80 0f       	add	r24, r16
     66a:	e0 df       	rcall	.-64     	; 0x62c <__vector_20>
	USART0_TX_vect((num%1000) / 100 + 48);
     66c:	28 ee       	ldi	r18, 0xE8	; 232
     66e:	33 e0       	ldi	r19, 0x03	; 3
     670:	02 9f       	mul	r16, r18
     672:	c0 01       	movw	r24, r0
     674:	03 9f       	mul	r16, r19
     676:	90 0d       	add	r25, r0
     678:	12 9f       	mul	r17, r18
     67a:	90 0d       	add	r25, r0
     67c:	11 24       	eor	r1, r1
     67e:	9e 01       	movw	r18, r28
     680:	28 1b       	sub	r18, r24
     682:	39 0b       	sbc	r19, r25
     684:	36 95       	lsr	r19
     686:	27 95       	ror	r18
     688:	36 95       	lsr	r19
     68a:	27 95       	ror	r18
     68c:	ab e7       	ldi	r26, 0x7B	; 123
     68e:	b4 e1       	ldi	r27, 0x14	; 20
     690:	31 d5       	rcall	.+2658   	; 0x10f4 <__umulhisi3>
     692:	96 95       	lsr	r25
     694:	87 95       	ror	r24
     696:	80 5d       	subi	r24, 0xD0	; 208
     698:	c9 df       	rcall	.-110    	; 0x62c <__vector_20>
	USART0_TX_vect((num%100)/10 + 48);
     69a:	9e 01       	movw	r18, r28
     69c:	36 95       	lsr	r19
     69e:	27 95       	ror	r18
     6a0:	36 95       	lsr	r19
     6a2:	27 95       	ror	r18
     6a4:	ab e7       	ldi	r26, 0x7B	; 123
     6a6:	b4 e1       	ldi	r27, 0x14	; 20
     6a8:	25 d5       	rcall	.+2634   	; 0x10f4 <__umulhisi3>
     6aa:	9c 01       	movw	r18, r24
     6ac:	36 95       	lsr	r19
     6ae:	27 95       	ror	r18
     6b0:	44 e6       	ldi	r20, 0x64	; 100
     6b2:	42 9f       	mul	r20, r18
     6b4:	c0 01       	movw	r24, r0
     6b6:	43 9f       	mul	r20, r19
     6b8:	90 0d       	add	r25, r0
     6ba:	11 24       	eor	r1, r1
     6bc:	9e 01       	movw	r18, r28
     6be:	28 1b       	sub	r18, r24
     6c0:	39 0b       	sbc	r19, r25
     6c2:	ad ec       	ldi	r26, 0xCD	; 205
     6c4:	bc ec       	ldi	r27, 0xCC	; 204
     6c6:	16 d5       	rcall	.+2604   	; 0x10f4 <__umulhisi3>
     6c8:	96 95       	lsr	r25
     6ca:	87 95       	ror	r24
     6cc:	96 95       	lsr	r25
     6ce:	87 95       	ror	r24
     6d0:	96 95       	lsr	r25
     6d2:	87 95       	ror	r24
     6d4:	80 5d       	subi	r24, 0xD0	; 208
	USART0_TX_vect((num%10) + 48);
     6d6:	aa df       	rcall	.-172    	; 0x62c <__vector_20>
     6d8:	9e 01       	movw	r18, r28
     6da:	ad ec       	ldi	r26, 0xCD	; 205
     6dc:	bc ec       	ldi	r27, 0xCC	; 204
     6de:	0a d5       	rcall	.+2580   	; 0x10f4 <__umulhisi3>
     6e0:	96 95       	lsr	r25
     6e2:	87 95       	ror	r24
     6e4:	96 95       	lsr	r25
     6e6:	87 95       	ror	r24
     6e8:	96 95       	lsr	r25
     6ea:	87 95       	ror	r24
     6ec:	9c 01       	movw	r18, r24
     6ee:	22 0f       	add	r18, r18
     6f0:	33 1f       	adc	r19, r19
     6f2:	88 0f       	add	r24, r24
     6f4:	99 1f       	adc	r25, r25
     6f6:	88 0f       	add	r24, r24
     6f8:	99 1f       	adc	r25, r25
     6fa:	88 0f       	add	r24, r24
     6fc:	99 1f       	adc	r25, r25
     6fe:	82 0f       	add	r24, r18
     700:	93 1f       	adc	r25, r19
     702:	9e 01       	movw	r18, r28
     704:	28 1b       	sub	r18, r24
     706:	39 0b       	sbc	r19, r25
     708:	c9 01       	movw	r24, r18
     70a:	80 5d       	subi	r24, 0xD0	; 208
     70c:	8f df       	rcall	.-226    	; 0x62c <__vector_20>
     70e:	df 91       	pop	r29
     710:	cf 91       	pop	r28
     712:	1f 91       	pop	r17
     714:	0f 91       	pop	r16
     716:	ff 90       	pop	r15
     718:	ef 90       	pop	r14
     71a:	08 95       	ret

0000071c <__vector_16>:
	else {
		PORTA |= ~0xBF;
	}
}

ISR(TIMER0_OVF_vect){ //Use Timer0 for collecting sensor value
     71c:	1f 92       	push	r1
     71e:	0f 92       	push	r0
     720:	0f b6       	in	r0, 0x3f	; 63
     722:	0f 92       	push	r0
     724:	11 24       	eor	r1, r1
     726:	0b b6       	in	r0, 0x3b	; 59
     728:	0f 92       	push	r0
     72a:	2f 93       	push	r18
     72c:	3f 93       	push	r19
     72e:	4f 93       	push	r20
     730:	5f 93       	push	r21
     732:	6f 93       	push	r22
     734:	7f 93       	push	r23
     736:	8f 93       	push	r24
     738:	9f 93       	push	r25
     73a:	af 93       	push	r26
     73c:	bf 93       	push	r27
     73e:	ef 93       	push	r30
     740:	ff 93       	push	r31
	static char idx = 0x01;
	
	switch(idx){
     742:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     746:	84 30       	cpi	r24, 0x04	; 4
     748:	79 f1       	breq	.+94     	; 0x7a8 <__vector_16+0x8c>
     74a:	28 f4       	brcc	.+10     	; 0x756 <__vector_16+0x3a>
     74c:	81 30       	cpi	r24, 0x01	; 1
     74e:	61 f0       	breq	.+24     	; 0x768 <__vector_16+0x4c>
     750:	82 30       	cpi	r24, 0x02	; 2
     752:	d1 f0       	breq	.+52     	; 0x788 <__vector_16+0x6c>
     754:	6a c0       	rjmp	.+212    	; 0x82a <__vector_16+0x10e>
     756:	86 30       	cpi	r24, 0x06	; 6
     758:	09 f4       	brne	.+2      	; 0x75c <__vector_16+0x40>
     75a:	47 c0       	rjmp	.+142    	; 0x7ea <__vector_16+0xce>
     75c:	08 f4       	brcc	.+2      	; 0x760 <__vector_16+0x44>
     75e:	34 c0       	rjmp	.+104    	; 0x7c8 <__vector_16+0xac>
     760:	87 30       	cpi	r24, 0x07	; 7
     762:	09 f4       	brne	.+2      	; 0x766 <__vector_16+0x4a>
     764:	52 c0       	rjmp	.+164    	; 0x80a <__vector_16+0xee>
     766:	61 c0       	rjmp	.+194    	; 0x82a <__vector_16+0x10e>
		case 0x01:
			Read_CDS();
     768:	cb d0       	rcall	.+406    	; 0x900 <Read_CDS>
			USART0_NUM(cds_sensor_val);
     76a:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <cds_sensor_val>
     76e:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <cds_sensor_val+0x1>
     772:	60 df       	rcall	.-320    	; 0x634 <USART0_NUM>
			USART0_TX_vect('\n');
     774:	8a e0       	ldi	r24, 0x0A	; 10
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	59 df       	rcall	.-334    	; 0x62c <__vector_20>
			USART0_TX_vect('\r');
     77a:	8d e0       	ldi	r24, 0x0D	; 13
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	56 df       	rcall	.-340    	; 0x62c <__vector_20>
     780:	82 e0       	ldi	r24, 0x02	; 2
			
			idx=0x02;
     782:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
     786:	51 c0       	rjmp	.+162    	; 0x82a <__vector_16+0x10e>
		
		case 0x02:
			Read_Thermister();
     788:	29 d1       	rcall	.+594    	; 0x9dc <Read_Thermister>
			//Servo_Set_Speed();
			USART0_NUM(temp_sensor_val);
     78a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <temp_sensor_val>
     78e:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <temp_sensor_val+0x1>
     792:	50 df       	rcall	.-352    	; 0x634 <USART0_NUM>
			USART0_TX_vect('\n');
     794:	8a e0       	ldi	r24, 0x0A	; 10
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	49 df       	rcall	.-366    	; 0x62c <__vector_20>
     79a:	8d e0       	ldi	r24, 0x0D	; 13
			USART0_TX_vect('\r');
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	46 df       	rcall	.-372    	; 0x62c <__vector_20>
     7a0:	84 e0       	ldi	r24, 0x04	; 4
			idx=0x04;
     7a2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
     7a6:	41 c0       	rjmp	.+130    	; 0x82a <__vector_16+0x10e>
		
		case 0x04:
			Read_Pressure();
     7a8:	0a d1       	rcall	.+532    	; 0x9be <Read_Pressure>
			USART0_NUM(pressure_sensor_val);
     7aa:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <pressure_sensor_val>
     7ae:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <pressure_sensor_val+0x1>
     7b2:	40 df       	rcall	.-384    	; 0x634 <USART0_NUM>
			USART0_TX_vect('\n');
     7b4:	8a e0       	ldi	r24, 0x0A	; 10
     7b6:	90 e0       	ldi	r25, 0x00	; 0
			USART0_TX_vect('\r');
     7b8:	39 df       	rcall	.-398    	; 0x62c <__vector_20>
     7ba:	8d e0       	ldi	r24, 0x0D	; 13
     7bc:	90 e0       	ldi	r25, 0x00	; 0
			idx=0x05;
     7be:	36 df       	rcall	.-404    	; 0x62c <__vector_20>
     7c0:	85 e0       	ldi	r24, 0x05	; 5
		break;
     7c2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		case 0x05:
		
			Read_Shock();
			If_Shock_Detected();
     7c6:	31 c0       	rjmp	.+98     	; 0x82a <__vector_16+0x10e>
     7c8:	18 d1       	rcall	.+560    	; 0x9fa <Read_Shock>
			USART0_NUM(shk_sensor_val);
     7ca:	17 df       	rcall	.-466    	; 0x5fa <If_Shock_Detected>
     7cc:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <shk_sensor_val>
     7d0:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <shk_sensor_val+0x1>
			USART0_TX_vect('\n');
     7d4:	2f df       	rcall	.-418    	; 0x634 <USART0_NUM>
     7d6:	8a e0       	ldi	r24, 0x0A	; 10
     7d8:	90 e0       	ldi	r25, 0x00	; 0
			USART0_TX_vect('\r');
     7da:	28 df       	rcall	.-432    	; 0x62c <__vector_20>
     7dc:	8d e0       	ldi	r24, 0x0D	; 13
     7de:	90 e0       	ldi	r25, 0x00	; 0
			idx=0x06;
     7e0:	25 df       	rcall	.-438    	; 0x62c <__vector_20>
     7e2:	86 e0       	ldi	r24, 0x06	; 6
     7e4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		case 0x06:
		
			Read_Fire();
			//If_Fire_Detected();
			USART0_NUM(fire_sensor_val);
     7e8:	20 c0       	rjmp	.+64     	; 0x82a <__vector_16+0x10e>
     7ea:	b6 d0       	rcall	.+364    	; 0x958 <Read_Fire>
     7ec:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <fire_sensor_val>
     7f0:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <fire_sensor_val+0x1>
			USART0_TX_vect('\n');
     7f4:	1f df       	rcall	.-450    	; 0x634 <USART0_NUM>
     7f6:	8a e0       	ldi	r24, 0x0A	; 10
			USART0_TX_vect('\r');
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	18 df       	rcall	.-464    	; 0x62c <__vector_20>
     7fc:	8d e0       	ldi	r24, 0x0D	; 13
     7fe:	90 e0       	ldi	r25, 0x00	; 0
			idx = 0x07;
     800:	15 df       	rcall	.-470    	; 0x62c <__vector_20>
     802:	87 e0       	ldi	r24, 0x07	; 7
     804:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
		
		case 0x07:
		
			Read_PSD();
     808:	10 c0       	rjmp	.+32     	; 0x82a <__vector_16+0x10e>
     80a:	b5 d0       	rcall	.+362    	; 0x976 <Read_PSD>
			If_PSD_Detected();
     80c:	01 df       	rcall	.-510    	; 0x610 <If_PSD_Detected>
     80e:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <psd_sensor_val>
			USART0_NUM(psd_sensor_val);
     812:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <psd_sensor_val+0x1>
     816:	0e df       	rcall	.-484    	; 0x634 <USART0_NUM>
     818:	8a e0       	ldi	r24, 0x0A	; 10
     81a:	90 e0       	ldi	r25, 0x00	; 0
			USART0_TX_vect('\n');
     81c:	07 df       	rcall	.-498    	; 0x62c <__vector_20>
     81e:	8d e0       	ldi	r24, 0x0D	; 13
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	04 df       	rcall	.-504    	; 0x62c <__vector_20>
			USART0_TX_vect('\r');
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     82a:	87 b1       	in	r24, 0x07	; 7
			idx = 0x01;
     82c:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     830:	9f 70       	andi	r25, 0x0F	; 15
		break;
	}
	
	//ADC Mux 선택, ADC 시작 시키고 ISR 종료
	ADMUX = (ADMUX & 0x40) | (idx & 0x0F); //다음 센서 선택
     832:	80 74       	andi	r24, 0x40	; 64
     834:	89 2b       	or	r24, r25
     836:	87 b9       	out	0x07, r24	; 7
     838:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <cds_sensor_val>
     83c:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <cds_sensor_val+0x1>
	ADMUX=(1<<REFS0); //외부 레퍼런스 접압을 기준 전압으로 선택, 우측정렬, 초기 입력핀은 0번
	ADCSRA=(1<<ADEN)|(0<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //ADC enable, ADC interrupt enable 분주비 128
}

inline void Sensor_show(){
	if (cds_sensor_val > 100) { //CDS
     840:	85 36       	cpi	r24, 0x65	; 101
     842:	91 05       	cpc	r25, r1
     844:	20 f0       	brcs	.+8      	; 0x84e <__vector_16+0x132>
     846:	8b b3       	in	r24, 0x1b	; 27
     848:	8e 7f       	andi	r24, 0xFE	; 254
     84a:	8b bb       	out	0x1b, r24	; 27
     84c:	03 c0       	rjmp	.+6      	; 0x854 <__vector_16+0x138>
		PORTA &= 0xFE; //CDS에 해당하는 LED만 켜기 //1111 1110
     84e:	8b b3       	in	r24, 0x1b	; 27
     850:	81 60       	ori	r24, 0x01	; 1
     852:	8b bb       	out	0x1b, r24	; 27
     854:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <temp_sensor_val>
	}
	else {
		PORTA |= ~0xFE; //CDS에 해단하는 LED만 끄기
     858:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <temp_sensor_val+0x1>
	}
	
	if (temp_sensor_val > 200) {
     85c:	89 3c       	cpi	r24, 0xC9	; 201
     85e:	91 05       	cpc	r25, r1
     860:	20 f0       	brcs	.+8      	; 0x86a <__vector_16+0x14e>
     862:	8b b3       	in	r24, 0x1b	; 27
     864:	8d 7f       	andi	r24, 0xFD	; 253
     866:	8b bb       	out	0x1b, r24	; 27
     868:	03 c0       	rjmp	.+6      	; 0x870 <__vector_16+0x154>
		PORTA &= 0xFD; // 1111 1101
     86a:	8b b3       	in	r24, 0x1b	; 27
     86c:	82 60       	ori	r24, 0x02	; 2
     86e:	8b bb       	out	0x1b, r24	; 27
     870:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <pressure_sensor_val>
	}
	else {
		PORTA |= ~0xFD;
     874:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <pressure_sensor_val+0x1>
	}
	
	
	
	if (pressure_sensor_val > 900) {//보류 -
     878:	85 38       	cpi	r24, 0x85	; 133
     87a:	93 40       	sbci	r25, 0x03	; 3
     87c:	20 f0       	brcs	.+8      	; 0x886 <__vector_16+0x16a>
     87e:	8b b3       	in	r24, 0x1b	; 27
     880:	8b 7f       	andi	r24, 0xFB	; 251
     882:	8b bb       	out	0x1b, r24	; 27
     884:	03 c0       	rjmp	.+6      	; 0x88c <__vector_16+0x170>
		PORTA &= 0xFB; //1111 1011
     886:	8b b3       	in	r24, 0x1b	; 27
     888:	84 60       	ori	r24, 0x04	; 4
     88a:	8b bb       	out	0x1b, r24	; 27
     88c:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <shk_detected>
	}
	else {
		PORTA |= ~0xFB;
     890:	88 23       	and	r24, r24
     892:	21 f0       	breq	.+8      	; 0x89c <__vector_16+0x180>
	}
	
	if ( shk_detected) {
     894:	8b b3       	in	r24, 0x1b	; 27
     896:	87 7f       	andi	r24, 0xF7	; 247
     898:	8b bb       	out	0x1b, r24	; 27
     89a:	03 c0       	rjmp	.+6      	; 0x8a2 <__vector_16+0x186>
		PORTA &= 0xF7;
     89c:	8b b3       	in	r24, 0x1b	; 27
     89e:	88 60       	ori	r24, 0x08	; 8
     8a0:	8b bb       	out	0x1b, r24	; 27
     8a2:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <fire_sensor_val>
		//shk_detected = 0x00;
	}
	else {
		PORTA |= ~0xF7;
     8a6:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <fire_sensor_val+0x1>
	}
	
	if (fire_sensor_val > 100) {//-
     8aa:	85 36       	cpi	r24, 0x65	; 101
     8ac:	91 05       	cpc	r25, r1
     8ae:	20 f0       	brcs	.+8      	; 0x8b8 <__vector_16+0x19c>
     8b0:	8b b3       	in	r24, 0x1b	; 27
     8b2:	8f 7e       	andi	r24, 0xEF	; 239
     8b4:	8b bb       	out	0x1b, r24	; 27
     8b6:	03 c0       	rjmp	.+6      	; 0x8be <__vector_16+0x1a2>
		PORTA &= 0xEF;
     8b8:	8b b3       	in	r24, 0x1b	; 27
     8ba:	80 61       	ori	r24, 0x10	; 16
     8bc:	8b bb       	out	0x1b, r24	; 27
     8be:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <psd_sensor_val>
	}
	else {
		PORTA |= ~0xEF;
     8c2:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <psd_sensor_val+0x1>
	}
	
	
	if ( (psd_sensor_val> 520)) {
     8c6:	89 30       	cpi	r24, 0x09	; 9
     8c8:	92 40       	sbci	r25, 0x02	; 2
     8ca:	20 f0       	brcs	.+8      	; 0x8d4 <__vector_16+0x1b8>
     8cc:	8b b3       	in	r24, 0x1b	; 27
     8ce:	8f 7b       	andi	r24, 0xBF	; 191
     8d0:	8b bb       	out	0x1b, r24	; 27
     8d2:	03 c0       	rjmp	.+6      	; 0x8da <__vector_16+0x1be>
		
		PORTA &= 0xBF;
     8d4:	8b b3       	in	r24, 0x1b	; 27
     8d6:	80 64       	ori	r24, 0x40	; 64
     8d8:	8b bb       	out	0x1b, r24	; 27
     8da:	ff 91       	pop	r31
	}
	else {
		PORTA |= ~0xBF;
     8dc:	ef 91       	pop	r30
     8de:	bf 91       	pop	r27
     8e0:	af 91       	pop	r26
	//ADC Mux 선택, ADC 시작 시키고 ISR 종료
	ADMUX = (ADMUX & 0x40) | (idx & 0x0F); //다음 센서 선택
	//ADCSRA |= (1 << ADSC); // ADC 변환 시작
	
	Sensor_show(); //LED A
}
     8e2:	9f 91       	pop	r25
     8e4:	8f 91       	pop	r24
     8e6:	7f 91       	pop	r23
     8e8:	6f 91       	pop	r22
     8ea:	5f 91       	pop	r21
     8ec:	4f 91       	pop	r20
     8ee:	3f 91       	pop	r19
     8f0:	2f 91       	pop	r18
     8f2:	0f 90       	pop	r0
     8f4:	0b be       	out	0x3b, r0	; 59
     8f6:	0f 90       	pop	r0
     8f8:	0f be       	out	0x3f, r0	; 63
     8fa:	0f 90       	pop	r0
     8fc:	1f 90       	pop	r1
     8fe:	18 95       	reti

00000900 <Read_CDS>:
     900:	86 b1       	in	r24, 0x06	; 6
     902:	80 64       	ori	r24, 0x40	; 64
     904:	86 b9       	out	0x06, r24	; 6
     906:	34 9b       	sbis	0x06, 4	; 6
	return (unsigned short)(alpha * (previous_value + new_value) - previous_value);
}

inline void Read_CDS(){
	ADCSRA |= (1 << ADSC); // ADC 변환 시작
	while(!(ADCSRA & (1 << ADIF))); // ADC 변환 완료 플래그가 설정될 때까지 기다림
     908:	fe cf       	rjmp	.-4      	; 0x906 <Read_CDS+0x6>
	ADCSRA |= (1<< ADIF); // ADC 변환 완료 플래그 클리어
     90a:	86 b1       	in	r24, 0x06	; 6
     90c:	80 61       	ori	r24, 0x10	; 16
     90e:	86 b9       	out	0x06, r24	; 6
	/*static unsigned short previous_value = 0;
	cds_sensor_val = lpf(previous_value, ADC, 0.1);
	previous_value = cds_sensor_val;*/
	cds_sensor_val=pow(10, 1-(log(ADC)-log(40000))/0.8);
     910:	64 b1       	in	r22, 0x04	; 4
     912:	75 b1       	in	r23, 0x05	; 5
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	97 d1       	rcall	.+814    	; 0xc48 <__floatunsisf>
     91a:	29 d2       	rcall	.+1106   	; 0xd6e <log>
     91c:	21 ed       	ldi	r18, 0xD1	; 209
     91e:	3b e8       	ldi	r19, 0x8B	; 139
     920:	49 e2       	ldi	r20, 0x29	; 41
     922:	51 e4       	ldi	r21, 0x41	; 65
     924:	98 d0       	rcall	.+304    	; 0xa56 <__subsf3>
     926:	2d ec       	ldi	r18, 0xCD	; 205
     928:	3c ec       	ldi	r19, 0xCC	; 204
     92a:	4c e4       	ldi	r20, 0x4C	; 76
     92c:	5f e3       	ldi	r21, 0x3F	; 63
     92e:	f8 d0       	rcall	.+496    	; 0xb20 <__divsf3>
     930:	9b 01       	movw	r18, r22
     932:	ac 01       	movw	r20, r24
     934:	60 e0       	ldi	r22, 0x00	; 0
     936:	70 e0       	ldi	r23, 0x00	; 0
     938:	80 e8       	ldi	r24, 0x80	; 128
     93a:	9f e3       	ldi	r25, 0x3F	; 63
     93c:	8c d0       	rcall	.+280    	; 0xa56 <__subsf3>
     93e:	9b 01       	movw	r18, r22
     940:	ac 01       	movw	r20, r24
     942:	60 e0       	ldi	r22, 0x00	; 0
     944:	70 e0       	ldi	r23, 0x00	; 0
     946:	80 e2       	ldi	r24, 0x20	; 32
     948:	91 e4       	ldi	r25, 0x41	; 65
     94a:	b4 d2       	rcall	.+1384   	; 0xeb4 <pow>
     94c:	51 d1       	rcall	.+674    	; 0xbf0 <__fixunssfsi>
     94e:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <cds_sensor_val+0x1>
     952:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <cds_sensor_val>
     956:	08 95       	ret

00000958 <Read_Fire>:
	//필터링 해야됨
}

inline void Read_Fire(){
	ADCSRA |= (1 << ADSC); // ADC 변환 시작
     958:	86 b1       	in	r24, 0x06	; 6
     95a:	80 64       	ori	r24, 0x40	; 64
     95c:	86 b9       	out	0x06, r24	; 6
	while(!(ADCSRA & (1 << ADIF))); // ADC 변환 완료 플래그가 설정될 때까지 기다림
     95e:	34 9b       	sbis	0x06, 4	; 6
     960:	fe cf       	rjmp	.-4      	; 0x95e <Read_Fire+0x6>
	ADCSRA |= (1 << ADIF); // ADC 변환 완료 플래그 클리어
     962:	86 b1       	in	r24, 0x06	; 6
     964:	80 61       	ori	r24, 0x10	; 16
     966:	86 b9       	out	0x06, r24	; 6
	//static unsigned short previous_value = 0;
	fire_sensor_val = ADC;//lpf(previous_value, ADC, 0.1);
     968:	84 b1       	in	r24, 0x04	; 4
     96a:	95 b1       	in	r25, 0x05	; 5
     96c:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <fire_sensor_val+0x1>
     970:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <fire_sensor_val>
     974:	08 95       	ret

00000976 <Read_PSD>:
	//previous_value = fire_sensor_val;
	//필터링 해야됨
}
inline void Read_PSD(){
	ADCSRA |= (1 << ADSC); // ADC 변환 시작
     976:	86 b1       	in	r24, 0x06	; 6
     978:	80 64       	ori	r24, 0x40	; 64
     97a:	86 b9       	out	0x06, r24	; 6
	while(!(ADCSRA & (1 << ADIF))); // ADC 변환 완료 플래그가 설정될 때까지 기다림
     97c:	34 9b       	sbis	0x06, 4	; 6
     97e:	fe cf       	rjmp	.-4      	; 0x97c <Read_PSD+0x6>
	ADCSRA |= (1 << ADIF); // ADC 변환 완료 플래그 클리어
     980:	86 b1       	in	r24, 0x06	; 6
     982:	80 61       	ori	r24, 0x10	; 16
     984:	86 b9       	out	0x06, r24	; 6
	//static unsigned short previous_value = 0;
	psd_sensor_val = (27.61 / (ADC - 0.1696)) * 1000;//lpf(previous_value, ADC, 0.1);
     986:	64 b1       	in	r22, 0x04	; 4
     988:	75 b1       	in	r23, 0x05	; 5
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	5c d1       	rcall	.+696    	; 0xc48 <__floatunsisf>
     990:	2f e9       	ldi	r18, 0x9F	; 159
     992:	3b ea       	ldi	r19, 0xAB	; 171
     994:	4d e2       	ldi	r20, 0x2D	; 45
     996:	5e e3       	ldi	r21, 0x3E	; 62
     998:	5e d0       	rcall	.+188    	; 0xa56 <__subsf3>
     99a:	9b 01       	movw	r18, r22
     99c:	ac 01       	movw	r20, r24
     99e:	68 e4       	ldi	r22, 0x48	; 72
     9a0:	71 ee       	ldi	r23, 0xE1	; 225
     9a2:	8c ed       	ldi	r24, 0xDC	; 220
     9a4:	91 e4       	ldi	r25, 0x41	; 65
     9a6:	bc d0       	rcall	.+376    	; 0xb20 <__divsf3>
     9a8:	20 e0       	ldi	r18, 0x00	; 0
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	4a e7       	ldi	r20, 0x7A	; 122
     9ae:	54 e4       	ldi	r21, 0x44	; 68
     9b0:	1e d2       	rcall	.+1084   	; 0xdee <__mulsf3>
     9b2:	1e d1       	rcall	.+572    	; 0xbf0 <__fixunssfsi>
     9b4:	70 93 2c 01 	sts	0x012C, r23	; 0x80012c <psd_sensor_val+0x1>
     9b8:	60 93 2b 01 	sts	0x012B, r22	; 0x80012b <psd_sensor_val>
     9bc:	08 95       	ret

000009be <Read_Pressure>:
	//previous_value = psd_sensor_val;
	//필터링 해야됨
}

inline void Read_Pressure(){
	ADCSRA |= (1 << ADSC); // ADC 변환 시작
     9be:	86 b1       	in	r24, 0x06	; 6
     9c0:	80 64       	ori	r24, 0x40	; 64
     9c2:	86 b9       	out	0x06, r24	; 6
	while(!(ADCSRA & (1 << ADIF))); // ADC 변환 완료 플래그가 설정될 때까지 기다림
     9c4:	34 9b       	sbis	0x06, 4	; 6
     9c6:	fe cf       	rjmp	.-4      	; 0x9c4 <Read_Pressure+0x6>
	ADCSRA |= (1 << ADIF); // ADC 변환 완료 플래그 클리어
     9c8:	86 b1       	in	r24, 0x06	; 6
     9ca:	80 61       	ori	r24, 0x10	; 16
     9cc:	86 b9       	out	0x06, r24	; 6
	//static uint16_t previous_value = 0;
	pressure_sensor_val = ADC;//lpf(previous_value, ADC, 1);
     9ce:	84 b1       	in	r24, 0x04	; 4
     9d0:	95 b1       	in	r25, 0x05	; 5
     9d2:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <pressure_sensor_val+0x1>
     9d6:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <pressure_sensor_val>
     9da:	08 95       	ret

000009dc <Read_Thermister>:
	//previous_value = pressure_sensor_val;
	//필터링 해야됨
}

inline void Read_Thermister(){
	ADCSRA |= (1 << ADSC); // ADC 변환 시작
     9dc:	86 b1       	in	r24, 0x06	; 6
     9de:	80 64       	ori	r24, 0x40	; 64
     9e0:	86 b9       	out	0x06, r24	; 6
	while(!(ADCSRA & (1 << ADIF))); // ADC 변환 완료 플래그가 설정될 때까지 기다림
     9e2:	34 9b       	sbis	0x06, 4	; 6
     9e4:	fe cf       	rjmp	.-4      	; 0x9e2 <Read_Thermister+0x6>
	ADCSRA |= (1 << ADIF); // ADC 변환 완료 플래그 클리어
     9e6:	86 b1       	in	r24, 0x06	; 6
     9e8:	80 61       	ori	r24, 0x10	; 16
     9ea:	86 b9       	out	0x06, r24	; 6
	//static unsigned short previous_value = 0;
	temp_sensor_val = ADC;//lpf(previous_value, ADC, 1);
     9ec:	84 b1       	in	r24, 0x04	; 4
     9ee:	95 b1       	in	r25, 0x05	; 5
     9f0:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <temp_sensor_val+0x1>
     9f4:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <temp_sensor_val>
     9f8:	08 95       	ret

000009fa <Read_Shock>:
	//previous_value = temp_sensor_val;
	//필터링 해야됨
}

inline void Read_Shock(){
	ADCSRA |= (1 << ADSC); // ADC 변환 시작
     9fa:	86 b1       	in	r24, 0x06	; 6
     9fc:	80 64       	ori	r24, 0x40	; 64
     9fe:	86 b9       	out	0x06, r24	; 6
	while(!(ADCSRA & (1 << ADIF))); // ADC 변환 완료 플래그가 설정될 때까지 기다림
     a00:	34 9b       	sbis	0x06, 4	; 6
     a02:	fe cf       	rjmp	.-4      	; 0xa00 <Read_Shock+0x6>
	ADCSRA |= (1 << ADIF); // ADC 변환 완료 플래그 클리어
     a04:	86 b1       	in	r24, 0x06	; 6
     a06:	80 61       	ori	r24, 0x10	; 16
     a08:	86 b9       	out	0x06, r24	; 6
	//static unsigned short previous_value = 0;
	shk_sensor_val = ADC;//hpf(previous_value, ADC, 1);
     a0a:	84 b1       	in	r24, 0x04	; 4
     a0c:	95 b1       	in	r25, 0x05	; 5
     a0e:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <shk_sensor_val+0x1>
     a12:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <shk_sensor_val>
     a16:	08 95       	ret

00000a18 <Reset_sensor_val>:
	//previous_value = shk_sensor_val;
	//필터링 해야됨
}

inline void Reset_sensor_val(){
	pressure_sensor_val = 0;
     a18:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <pressure_sensor_val+0x1>
     a1c:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <pressure_sensor_val>
	cds_sensor_val	= 0;
     a20:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <cds_sensor_val+0x1>
     a24:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <cds_sensor_val>
	temp_sensor_val = 0;	temp_en = 0;
     a28:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <temp_sensor_val+0x1>
     a2c:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <temp_sensor_val>
     a30:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <temp_en+0x1>
     a34:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <temp_en>
	shk_sensor_val	= 0;	shk_detected = 0;
     a38:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <shk_sensor_val+0x1>
     a3c:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <shk_sensor_val>
     a40:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <shk_detected>
	psd_sensor_val	= 0;
     a44:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <psd_sensor_val+0x1>
     a48:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <psd_sensor_val>
	fire_sensor_val	= 0;
     a4c:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <fire_sensor_val+0x1>
     a50:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <fire_sensor_val>
     a54:	08 95       	ret

00000a56 <__subsf3>:
     a56:	50 58       	subi	r21, 0x80	; 128

00000a58 <__addsf3>:
     a58:	bb 27       	eor	r27, r27
     a5a:	aa 27       	eor	r26, r26
     a5c:	0e d0       	rcall	.+28     	; 0xa7a <__addsf3x>
     a5e:	48 c1       	rjmp	.+656    	; 0xcf0 <__fp_round>
     a60:	39 d1       	rcall	.+626    	; 0xcd4 <__fp_pscA>
     a62:	30 f0       	brcs	.+12     	; 0xa70 <__addsf3+0x18>
     a64:	3e d1       	rcall	.+636    	; 0xce2 <__fp_pscB>
     a66:	20 f0       	brcs	.+8      	; 0xa70 <__addsf3+0x18>
     a68:	31 f4       	brne	.+12     	; 0xa76 <__addsf3+0x1e>
     a6a:	9f 3f       	cpi	r25, 0xFF	; 255
     a6c:	11 f4       	brne	.+4      	; 0xa72 <__addsf3+0x1a>
     a6e:	1e f4       	brtc	.+6      	; 0xa76 <__addsf3+0x1e>
     a70:	2e c1       	rjmp	.+604    	; 0xcce <__fp_nan>
     a72:	0e f4       	brtc	.+2      	; 0xa76 <__addsf3+0x1e>
     a74:	e0 95       	com	r30
     a76:	e7 fb       	bst	r30, 7
     a78:	24 c1       	rjmp	.+584    	; 0xcc2 <__fp_inf>

00000a7a <__addsf3x>:
     a7a:	e9 2f       	mov	r30, r25
     a7c:	4a d1       	rcall	.+660    	; 0xd12 <__fp_split3>
     a7e:	80 f3       	brcs	.-32     	; 0xa60 <__addsf3+0x8>
     a80:	ba 17       	cp	r27, r26
     a82:	62 07       	cpc	r22, r18
     a84:	73 07       	cpc	r23, r19
     a86:	84 07       	cpc	r24, r20
     a88:	95 07       	cpc	r25, r21
     a8a:	18 f0       	brcs	.+6      	; 0xa92 <__addsf3x+0x18>
     a8c:	71 f4       	brne	.+28     	; 0xaaa <__addsf3x+0x30>
     a8e:	9e f5       	brtc	.+102    	; 0xaf6 <__addsf3x+0x7c>
     a90:	62 c1       	rjmp	.+708    	; 0xd56 <__fp_zero>
     a92:	0e f4       	brtc	.+2      	; 0xa96 <__addsf3x+0x1c>
     a94:	e0 95       	com	r30
     a96:	0b 2e       	mov	r0, r27
     a98:	ba 2f       	mov	r27, r26
     a9a:	a0 2d       	mov	r26, r0
     a9c:	0b 01       	movw	r0, r22
     a9e:	b9 01       	movw	r22, r18
     aa0:	90 01       	movw	r18, r0
     aa2:	0c 01       	movw	r0, r24
     aa4:	ca 01       	movw	r24, r20
     aa6:	a0 01       	movw	r20, r0
     aa8:	11 24       	eor	r1, r1
     aaa:	ff 27       	eor	r31, r31
     aac:	59 1b       	sub	r21, r25
     aae:	99 f0       	breq	.+38     	; 0xad6 <__addsf3x+0x5c>
     ab0:	59 3f       	cpi	r21, 0xF9	; 249
     ab2:	50 f4       	brcc	.+20     	; 0xac8 <__addsf3x+0x4e>
     ab4:	50 3e       	cpi	r21, 0xE0	; 224
     ab6:	68 f1       	brcs	.+90     	; 0xb12 <__addsf3x+0x98>
     ab8:	1a 16       	cp	r1, r26
     aba:	f0 40       	sbci	r31, 0x00	; 0
     abc:	a2 2f       	mov	r26, r18
     abe:	23 2f       	mov	r18, r19
     ac0:	34 2f       	mov	r19, r20
     ac2:	44 27       	eor	r20, r20
     ac4:	58 5f       	subi	r21, 0xF8	; 248
     ac6:	f3 cf       	rjmp	.-26     	; 0xaae <__addsf3x+0x34>
     ac8:	46 95       	lsr	r20
     aca:	37 95       	ror	r19
     acc:	27 95       	ror	r18
     ace:	a7 95       	ror	r26
     ad0:	f0 40       	sbci	r31, 0x00	; 0
     ad2:	53 95       	inc	r21
     ad4:	c9 f7       	brne	.-14     	; 0xac8 <__addsf3x+0x4e>
     ad6:	7e f4       	brtc	.+30     	; 0xaf6 <__addsf3x+0x7c>
     ad8:	1f 16       	cp	r1, r31
     ada:	ba 0b       	sbc	r27, r26
     adc:	62 0b       	sbc	r22, r18
     ade:	73 0b       	sbc	r23, r19
     ae0:	84 0b       	sbc	r24, r20
     ae2:	ba f0       	brmi	.+46     	; 0xb12 <__addsf3x+0x98>
     ae4:	91 50       	subi	r25, 0x01	; 1
     ae6:	a1 f0       	breq	.+40     	; 0xb10 <__addsf3x+0x96>
     ae8:	ff 0f       	add	r31, r31
     aea:	bb 1f       	adc	r27, r27
     aec:	66 1f       	adc	r22, r22
     aee:	77 1f       	adc	r23, r23
     af0:	88 1f       	adc	r24, r24
     af2:	c2 f7       	brpl	.-16     	; 0xae4 <__addsf3x+0x6a>
     af4:	0e c0       	rjmp	.+28     	; 0xb12 <__addsf3x+0x98>
     af6:	ba 0f       	add	r27, r26
     af8:	62 1f       	adc	r22, r18
     afa:	73 1f       	adc	r23, r19
     afc:	84 1f       	adc	r24, r20
     afe:	48 f4       	brcc	.+18     	; 0xb12 <__addsf3x+0x98>
     b00:	87 95       	ror	r24
     b02:	77 95       	ror	r23
     b04:	67 95       	ror	r22
     b06:	b7 95       	ror	r27
     b08:	f7 95       	ror	r31
     b0a:	9e 3f       	cpi	r25, 0xFE	; 254
     b0c:	08 f0       	brcs	.+2      	; 0xb10 <__addsf3x+0x96>
     b0e:	b3 cf       	rjmp	.-154    	; 0xa76 <__addsf3+0x1e>
     b10:	93 95       	inc	r25
     b12:	88 0f       	add	r24, r24
     b14:	08 f0       	brcs	.+2      	; 0xb18 <__addsf3x+0x9e>
     b16:	99 27       	eor	r25, r25
     b18:	ee 0f       	add	r30, r30
     b1a:	97 95       	ror	r25
     b1c:	87 95       	ror	r24
     b1e:	08 95       	ret

00000b20 <__divsf3>:
     b20:	0c d0       	rcall	.+24     	; 0xb3a <__divsf3x>
     b22:	e6 c0       	rjmp	.+460    	; 0xcf0 <__fp_round>
     b24:	de d0       	rcall	.+444    	; 0xce2 <__fp_pscB>
     b26:	40 f0       	brcs	.+16     	; 0xb38 <__divsf3+0x18>
     b28:	d5 d0       	rcall	.+426    	; 0xcd4 <__fp_pscA>
     b2a:	30 f0       	brcs	.+12     	; 0xb38 <__divsf3+0x18>
     b2c:	21 f4       	brne	.+8      	; 0xb36 <__divsf3+0x16>
     b2e:	5f 3f       	cpi	r21, 0xFF	; 255
     b30:	19 f0       	breq	.+6      	; 0xb38 <__divsf3+0x18>
     b32:	c7 c0       	rjmp	.+398    	; 0xcc2 <__fp_inf>
     b34:	51 11       	cpse	r21, r1
     b36:	10 c1       	rjmp	.+544    	; 0xd58 <__fp_szero>
     b38:	ca c0       	rjmp	.+404    	; 0xcce <__fp_nan>

00000b3a <__divsf3x>:
     b3a:	eb d0       	rcall	.+470    	; 0xd12 <__fp_split3>
     b3c:	98 f3       	brcs	.-26     	; 0xb24 <__divsf3+0x4>

00000b3e <__divsf3_pse>:
     b3e:	99 23       	and	r25, r25
     b40:	c9 f3       	breq	.-14     	; 0xb34 <__divsf3+0x14>
     b42:	55 23       	and	r21, r21
     b44:	b1 f3       	breq	.-20     	; 0xb32 <__divsf3+0x12>
     b46:	95 1b       	sub	r25, r21
     b48:	55 0b       	sbc	r21, r21
     b4a:	bb 27       	eor	r27, r27
     b4c:	aa 27       	eor	r26, r26
     b4e:	62 17       	cp	r22, r18
     b50:	73 07       	cpc	r23, r19
     b52:	84 07       	cpc	r24, r20
     b54:	38 f0       	brcs	.+14     	; 0xb64 <__divsf3_pse+0x26>
     b56:	9f 5f       	subi	r25, 0xFF	; 255
     b58:	5f 4f       	sbci	r21, 0xFF	; 255
     b5a:	22 0f       	add	r18, r18
     b5c:	33 1f       	adc	r19, r19
     b5e:	44 1f       	adc	r20, r20
     b60:	aa 1f       	adc	r26, r26
     b62:	a9 f3       	breq	.-22     	; 0xb4e <__divsf3_pse+0x10>
     b64:	33 d0       	rcall	.+102    	; 0xbcc <__divsf3_pse+0x8e>
     b66:	0e 2e       	mov	r0, r30
     b68:	3a f0       	brmi	.+14     	; 0xb78 <__divsf3_pse+0x3a>
     b6a:	e0 e8       	ldi	r30, 0x80	; 128
     b6c:	30 d0       	rcall	.+96     	; 0xbce <__divsf3_pse+0x90>
     b6e:	91 50       	subi	r25, 0x01	; 1
     b70:	50 40       	sbci	r21, 0x00	; 0
     b72:	e6 95       	lsr	r30
     b74:	00 1c       	adc	r0, r0
     b76:	ca f7       	brpl	.-14     	; 0xb6a <__divsf3_pse+0x2c>
     b78:	29 d0       	rcall	.+82     	; 0xbcc <__divsf3_pse+0x8e>
     b7a:	fe 2f       	mov	r31, r30
     b7c:	27 d0       	rcall	.+78     	; 0xbcc <__divsf3_pse+0x8e>
     b7e:	66 0f       	add	r22, r22
     b80:	77 1f       	adc	r23, r23
     b82:	88 1f       	adc	r24, r24
     b84:	bb 1f       	adc	r27, r27
     b86:	26 17       	cp	r18, r22
     b88:	37 07       	cpc	r19, r23
     b8a:	48 07       	cpc	r20, r24
     b8c:	ab 07       	cpc	r26, r27
     b8e:	b0 e8       	ldi	r27, 0x80	; 128
     b90:	09 f0       	breq	.+2      	; 0xb94 <__divsf3_pse+0x56>
     b92:	bb 0b       	sbc	r27, r27
     b94:	80 2d       	mov	r24, r0
     b96:	bf 01       	movw	r22, r30
     b98:	ff 27       	eor	r31, r31
     b9a:	93 58       	subi	r25, 0x83	; 131
     b9c:	5f 4f       	sbci	r21, 0xFF	; 255
     b9e:	2a f0       	brmi	.+10     	; 0xbaa <__divsf3_pse+0x6c>
     ba0:	9e 3f       	cpi	r25, 0xFE	; 254
     ba2:	51 05       	cpc	r21, r1
     ba4:	68 f0       	brcs	.+26     	; 0xbc0 <__divsf3_pse+0x82>
     ba6:	8d c0       	rjmp	.+282    	; 0xcc2 <__fp_inf>
     ba8:	d7 c0       	rjmp	.+430    	; 0xd58 <__fp_szero>
     baa:	5f 3f       	cpi	r21, 0xFF	; 255
     bac:	ec f3       	brlt	.-6      	; 0xba8 <__divsf3_pse+0x6a>
     bae:	98 3e       	cpi	r25, 0xE8	; 232
     bb0:	dc f3       	brlt	.-10     	; 0xba8 <__divsf3_pse+0x6a>
     bb2:	86 95       	lsr	r24
     bb4:	77 95       	ror	r23
     bb6:	67 95       	ror	r22
     bb8:	b7 95       	ror	r27
     bba:	f7 95       	ror	r31
     bbc:	9f 5f       	subi	r25, 0xFF	; 255
     bbe:	c9 f7       	brne	.-14     	; 0xbb2 <__divsf3_pse+0x74>
     bc0:	88 0f       	add	r24, r24
     bc2:	91 1d       	adc	r25, r1
     bc4:	96 95       	lsr	r25
     bc6:	87 95       	ror	r24
     bc8:	97 f9       	bld	r25, 7
     bca:	08 95       	ret
     bcc:	e1 e0       	ldi	r30, 0x01	; 1
     bce:	66 0f       	add	r22, r22
     bd0:	77 1f       	adc	r23, r23
     bd2:	88 1f       	adc	r24, r24
     bd4:	bb 1f       	adc	r27, r27
     bd6:	62 17       	cp	r22, r18
     bd8:	73 07       	cpc	r23, r19
     bda:	84 07       	cpc	r24, r20
     bdc:	ba 07       	cpc	r27, r26
     bde:	20 f0       	brcs	.+8      	; 0xbe8 <__divsf3_pse+0xaa>
     be0:	62 1b       	sub	r22, r18
     be2:	73 0b       	sbc	r23, r19
     be4:	84 0b       	sbc	r24, r20
     be6:	ba 0b       	sbc	r27, r26
     be8:	ee 1f       	adc	r30, r30
     bea:	88 f7       	brcc	.-30     	; 0xbce <__divsf3_pse+0x90>
     bec:	e0 95       	com	r30
     bee:	08 95       	ret

00000bf0 <__fixunssfsi>:
     bf0:	98 d0       	rcall	.+304    	; 0xd22 <__fp_splitA>
     bf2:	88 f0       	brcs	.+34     	; 0xc16 <__fixunssfsi+0x26>
     bf4:	9f 57       	subi	r25, 0x7F	; 127
     bf6:	90 f0       	brcs	.+36     	; 0xc1c <__fixunssfsi+0x2c>
     bf8:	b9 2f       	mov	r27, r25
     bfa:	99 27       	eor	r25, r25
     bfc:	b7 51       	subi	r27, 0x17	; 23
     bfe:	a0 f0       	brcs	.+40     	; 0xc28 <__fixunssfsi+0x38>
     c00:	d1 f0       	breq	.+52     	; 0xc36 <__fixunssfsi+0x46>
     c02:	66 0f       	add	r22, r22
     c04:	77 1f       	adc	r23, r23
     c06:	88 1f       	adc	r24, r24
     c08:	99 1f       	adc	r25, r25
     c0a:	1a f0       	brmi	.+6      	; 0xc12 <__fixunssfsi+0x22>
     c0c:	ba 95       	dec	r27
     c0e:	c9 f7       	brne	.-14     	; 0xc02 <__fixunssfsi+0x12>
     c10:	12 c0       	rjmp	.+36     	; 0xc36 <__fixunssfsi+0x46>
     c12:	b1 30       	cpi	r27, 0x01	; 1
     c14:	81 f0       	breq	.+32     	; 0xc36 <__fixunssfsi+0x46>
     c16:	9f d0       	rcall	.+318    	; 0xd56 <__fp_zero>
     c18:	b1 e0       	ldi	r27, 0x01	; 1
     c1a:	08 95       	ret
     c1c:	9c c0       	rjmp	.+312    	; 0xd56 <__fp_zero>
     c1e:	67 2f       	mov	r22, r23
     c20:	78 2f       	mov	r23, r24
     c22:	88 27       	eor	r24, r24
     c24:	b8 5f       	subi	r27, 0xF8	; 248
     c26:	39 f0       	breq	.+14     	; 0xc36 <__fixunssfsi+0x46>
     c28:	b9 3f       	cpi	r27, 0xF9	; 249
     c2a:	cc f3       	brlt	.-14     	; 0xc1e <__fixunssfsi+0x2e>
     c2c:	86 95       	lsr	r24
     c2e:	77 95       	ror	r23
     c30:	67 95       	ror	r22
     c32:	b3 95       	inc	r27
     c34:	d9 f7       	brne	.-10     	; 0xc2c <__fixunssfsi+0x3c>
     c36:	3e f4       	brtc	.+14     	; 0xc46 <__fixunssfsi+0x56>
     c38:	90 95       	com	r25
     c3a:	80 95       	com	r24
     c3c:	70 95       	com	r23
     c3e:	61 95       	neg	r22
     c40:	7f 4f       	sbci	r23, 0xFF	; 255
     c42:	8f 4f       	sbci	r24, 0xFF	; 255
     c44:	9f 4f       	sbci	r25, 0xFF	; 255
     c46:	08 95       	ret

00000c48 <__floatunsisf>:
     c48:	e8 94       	clt
     c4a:	09 c0       	rjmp	.+18     	; 0xc5e <__floatsisf+0x12>

00000c4c <__floatsisf>:
     c4c:	97 fb       	bst	r25, 7
     c4e:	3e f4       	brtc	.+14     	; 0xc5e <__floatsisf+0x12>
     c50:	90 95       	com	r25
     c52:	80 95       	com	r24
     c54:	70 95       	com	r23
     c56:	61 95       	neg	r22
     c58:	7f 4f       	sbci	r23, 0xFF	; 255
     c5a:	8f 4f       	sbci	r24, 0xFF	; 255
     c5c:	9f 4f       	sbci	r25, 0xFF	; 255
     c5e:	99 23       	and	r25, r25
     c60:	a9 f0       	breq	.+42     	; 0xc8c <__floatsisf+0x40>
     c62:	f9 2f       	mov	r31, r25
     c64:	96 e9       	ldi	r25, 0x96	; 150
     c66:	bb 27       	eor	r27, r27
     c68:	93 95       	inc	r25
     c6a:	f6 95       	lsr	r31
     c6c:	87 95       	ror	r24
     c6e:	77 95       	ror	r23
     c70:	67 95       	ror	r22
     c72:	b7 95       	ror	r27
     c74:	f1 11       	cpse	r31, r1
     c76:	f8 cf       	rjmp	.-16     	; 0xc68 <__floatsisf+0x1c>
     c78:	fa f4       	brpl	.+62     	; 0xcb8 <__floatsisf+0x6c>
     c7a:	bb 0f       	add	r27, r27
     c7c:	11 f4       	brne	.+4      	; 0xc82 <__floatsisf+0x36>
     c7e:	60 ff       	sbrs	r22, 0
     c80:	1b c0       	rjmp	.+54     	; 0xcb8 <__floatsisf+0x6c>
     c82:	6f 5f       	subi	r22, 0xFF	; 255
     c84:	7f 4f       	sbci	r23, 0xFF	; 255
     c86:	8f 4f       	sbci	r24, 0xFF	; 255
     c88:	9f 4f       	sbci	r25, 0xFF	; 255
     c8a:	16 c0       	rjmp	.+44     	; 0xcb8 <__floatsisf+0x6c>
     c8c:	88 23       	and	r24, r24
     c8e:	11 f0       	breq	.+4      	; 0xc94 <__floatsisf+0x48>
     c90:	96 e9       	ldi	r25, 0x96	; 150
     c92:	11 c0       	rjmp	.+34     	; 0xcb6 <__floatsisf+0x6a>
     c94:	77 23       	and	r23, r23
     c96:	21 f0       	breq	.+8      	; 0xca0 <__floatsisf+0x54>
     c98:	9e e8       	ldi	r25, 0x8E	; 142
     c9a:	87 2f       	mov	r24, r23
     c9c:	76 2f       	mov	r23, r22
     c9e:	05 c0       	rjmp	.+10     	; 0xcaa <__floatsisf+0x5e>
     ca0:	66 23       	and	r22, r22
     ca2:	71 f0       	breq	.+28     	; 0xcc0 <__floatsisf+0x74>
     ca4:	96 e8       	ldi	r25, 0x86	; 134
     ca6:	86 2f       	mov	r24, r22
     ca8:	70 e0       	ldi	r23, 0x00	; 0
     caa:	60 e0       	ldi	r22, 0x00	; 0
     cac:	2a f0       	brmi	.+10     	; 0xcb8 <__floatsisf+0x6c>
     cae:	9a 95       	dec	r25
     cb0:	66 0f       	add	r22, r22
     cb2:	77 1f       	adc	r23, r23
     cb4:	88 1f       	adc	r24, r24
     cb6:	da f7       	brpl	.-10     	; 0xcae <__floatsisf+0x62>
     cb8:	88 0f       	add	r24, r24
     cba:	96 95       	lsr	r25
     cbc:	87 95       	ror	r24
     cbe:	97 f9       	bld	r25, 7
     cc0:	08 95       	ret

00000cc2 <__fp_inf>:
     cc2:	97 f9       	bld	r25, 7
     cc4:	9f 67       	ori	r25, 0x7F	; 127
     cc6:	80 e8       	ldi	r24, 0x80	; 128
     cc8:	70 e0       	ldi	r23, 0x00	; 0
     cca:	60 e0       	ldi	r22, 0x00	; 0
     ccc:	08 95       	ret

00000cce <__fp_nan>:
     cce:	9f ef       	ldi	r25, 0xFF	; 255
     cd0:	80 ec       	ldi	r24, 0xC0	; 192
     cd2:	08 95       	ret

00000cd4 <__fp_pscA>:
     cd4:	00 24       	eor	r0, r0
     cd6:	0a 94       	dec	r0
     cd8:	16 16       	cp	r1, r22
     cda:	17 06       	cpc	r1, r23
     cdc:	18 06       	cpc	r1, r24
     cde:	09 06       	cpc	r0, r25
     ce0:	08 95       	ret

00000ce2 <__fp_pscB>:
     ce2:	00 24       	eor	r0, r0
     ce4:	0a 94       	dec	r0
     ce6:	12 16       	cp	r1, r18
     ce8:	13 06       	cpc	r1, r19
     cea:	14 06       	cpc	r1, r20
     cec:	05 06       	cpc	r0, r21
     cee:	08 95       	ret

00000cf0 <__fp_round>:
     cf0:	09 2e       	mov	r0, r25
     cf2:	03 94       	inc	r0
     cf4:	00 0c       	add	r0, r0
     cf6:	11 f4       	brne	.+4      	; 0xcfc <__fp_round+0xc>
     cf8:	88 23       	and	r24, r24
     cfa:	52 f0       	brmi	.+20     	; 0xd10 <__fp_round+0x20>
     cfc:	bb 0f       	add	r27, r27
     cfe:	40 f4       	brcc	.+16     	; 0xd10 <__fp_round+0x20>
     d00:	bf 2b       	or	r27, r31
     d02:	11 f4       	brne	.+4      	; 0xd08 <__fp_round+0x18>
     d04:	60 ff       	sbrs	r22, 0
     d06:	04 c0       	rjmp	.+8      	; 0xd10 <__fp_round+0x20>
     d08:	6f 5f       	subi	r22, 0xFF	; 255
     d0a:	7f 4f       	sbci	r23, 0xFF	; 255
     d0c:	8f 4f       	sbci	r24, 0xFF	; 255
     d0e:	9f 4f       	sbci	r25, 0xFF	; 255
     d10:	08 95       	ret

00000d12 <__fp_split3>:
     d12:	57 fd       	sbrc	r21, 7
     d14:	90 58       	subi	r25, 0x80	; 128
     d16:	44 0f       	add	r20, r20
     d18:	55 1f       	adc	r21, r21
     d1a:	59 f0       	breq	.+22     	; 0xd32 <__fp_splitA+0x10>
     d1c:	5f 3f       	cpi	r21, 0xFF	; 255
     d1e:	71 f0       	breq	.+28     	; 0xd3c <__fp_splitA+0x1a>
     d20:	47 95       	ror	r20

00000d22 <__fp_splitA>:
     d22:	88 0f       	add	r24, r24
     d24:	97 fb       	bst	r25, 7
     d26:	99 1f       	adc	r25, r25
     d28:	61 f0       	breq	.+24     	; 0xd42 <__fp_splitA+0x20>
     d2a:	9f 3f       	cpi	r25, 0xFF	; 255
     d2c:	79 f0       	breq	.+30     	; 0xd4c <__fp_splitA+0x2a>
     d2e:	87 95       	ror	r24
     d30:	08 95       	ret
     d32:	12 16       	cp	r1, r18
     d34:	13 06       	cpc	r1, r19
     d36:	14 06       	cpc	r1, r20
     d38:	55 1f       	adc	r21, r21
     d3a:	f2 cf       	rjmp	.-28     	; 0xd20 <__fp_split3+0xe>
     d3c:	46 95       	lsr	r20
     d3e:	f1 df       	rcall	.-30     	; 0xd22 <__fp_splitA>
     d40:	08 c0       	rjmp	.+16     	; 0xd52 <__fp_splitA+0x30>
     d42:	16 16       	cp	r1, r22
     d44:	17 06       	cpc	r1, r23
     d46:	18 06       	cpc	r1, r24
     d48:	99 1f       	adc	r25, r25
     d4a:	f1 cf       	rjmp	.-30     	; 0xd2e <__fp_splitA+0xc>
     d4c:	86 95       	lsr	r24
     d4e:	71 05       	cpc	r23, r1
     d50:	61 05       	cpc	r22, r1
     d52:	08 94       	sec
     d54:	08 95       	ret

00000d56 <__fp_zero>:
     d56:	e8 94       	clt

00000d58 <__fp_szero>:
     d58:	bb 27       	eor	r27, r27
     d5a:	66 27       	eor	r22, r22
     d5c:	77 27       	eor	r23, r23
     d5e:	cb 01       	movw	r24, r22
     d60:	97 f9       	bld	r25, 7
     d62:	08 95       	ret
     d64:	0e f0       	brts	.+2      	; 0xd68 <__fp_szero+0x10>
     d66:	23 c1       	rjmp	.+582    	; 0xfae <__fp_mpack>
     d68:	b2 cf       	rjmp	.-156    	; 0xcce <__fp_nan>
     d6a:	68 94       	set
     d6c:	aa cf       	rjmp	.-172    	; 0xcc2 <__fp_inf>

00000d6e <log>:
     d6e:	d9 df       	rcall	.-78     	; 0xd22 <__fp_splitA>
     d70:	c8 f3       	brcs	.-14     	; 0xd64 <__fp_szero+0xc>
     d72:	99 23       	and	r25, r25
     d74:	d1 f3       	breq	.-12     	; 0xd6a <__fp_szero+0x12>
     d76:	c6 f3       	brts	.-16     	; 0xd68 <__fp_szero+0x10>
     d78:	df 93       	push	r29
     d7a:	cf 93       	push	r28
     d7c:	1f 93       	push	r17
     d7e:	0f 93       	push	r16
     d80:	ff 92       	push	r15
     d82:	c9 2f       	mov	r28, r25
     d84:	dd 27       	eor	r29, r29
     d86:	88 23       	and	r24, r24
     d88:	2a f0       	brmi	.+10     	; 0xd94 <log+0x26>
     d8a:	21 97       	sbiw	r28, 0x01	; 1
     d8c:	66 0f       	add	r22, r22
     d8e:	77 1f       	adc	r23, r23
     d90:	88 1f       	adc	r24, r24
     d92:	da f7       	brpl	.-10     	; 0xd8a <log+0x1c>
     d94:	20 e0       	ldi	r18, 0x00	; 0
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	40 e8       	ldi	r20, 0x80	; 128
     d9a:	5f eb       	ldi	r21, 0xBF	; 191
     d9c:	9f e3       	ldi	r25, 0x3F	; 63
     d9e:	88 39       	cpi	r24, 0x98	; 152
     da0:	20 f0       	brcs	.+8      	; 0xdaa <log+0x3c>
     da2:	80 3e       	cpi	r24, 0xE0	; 224
     da4:	30 f0       	brcs	.+12     	; 0xdb2 <log+0x44>
     da6:	21 96       	adiw	r28, 0x01	; 1
     da8:	8f 77       	andi	r24, 0x7F	; 127
     daa:	56 de       	rcall	.-852    	; 0xa58 <__addsf3>
     dac:	ec e8       	ldi	r30, 0x8C	; 140
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	03 c0       	rjmp	.+6      	; 0xdb8 <log+0x4a>
     db2:	52 de       	rcall	.-860    	; 0xa58 <__addsf3>
     db4:	e9 eb       	ldi	r30, 0xB9	; 185
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	08 d1       	rcall	.+528    	; 0xfca <__fp_powser>
     dba:	8b 01       	movw	r16, r22
     dbc:	be 01       	movw	r22, r28
     dbe:	ec 01       	movw	r28, r24
     dc0:	fb 2e       	mov	r15, r27
     dc2:	6f 57       	subi	r22, 0x7F	; 127
     dc4:	71 09       	sbc	r23, r1
     dc6:	75 95       	asr	r23
     dc8:	77 1f       	adc	r23, r23
     dca:	88 0b       	sbc	r24, r24
     dcc:	99 0b       	sbc	r25, r25
     dce:	3e df       	rcall	.-388    	; 0xc4c <__floatsisf>
     dd0:	28 e1       	ldi	r18, 0x18	; 24
     dd2:	32 e7       	ldi	r19, 0x72	; 114
     dd4:	41 e3       	ldi	r20, 0x31	; 49
     dd6:	5f e3       	ldi	r21, 0x3F	; 63
     dd8:	16 d0       	rcall	.+44     	; 0xe06 <__mulsf3x>
     dda:	af 2d       	mov	r26, r15
     ddc:	98 01       	movw	r18, r16
     dde:	ae 01       	movw	r20, r28
     de0:	ff 90       	pop	r15
     de2:	0f 91       	pop	r16
     de4:	1f 91       	pop	r17
     de6:	cf 91       	pop	r28
     de8:	df 91       	pop	r29
     dea:	47 de       	rcall	.-882    	; 0xa7a <__addsf3x>
     dec:	81 cf       	rjmp	.-254    	; 0xcf0 <__fp_round>

00000dee <__mulsf3>:
     dee:	0b d0       	rcall	.+22     	; 0xe06 <__mulsf3x>
     df0:	7f cf       	rjmp	.-258    	; 0xcf0 <__fp_round>
     df2:	70 df       	rcall	.-288    	; 0xcd4 <__fp_pscA>
     df4:	28 f0       	brcs	.+10     	; 0xe00 <__mulsf3+0x12>
     df6:	75 df       	rcall	.-278    	; 0xce2 <__fp_pscB>
     df8:	18 f0       	brcs	.+6      	; 0xe00 <__mulsf3+0x12>
     dfa:	95 23       	and	r25, r21
     dfc:	09 f0       	breq	.+2      	; 0xe00 <__mulsf3+0x12>
     dfe:	61 cf       	rjmp	.-318    	; 0xcc2 <__fp_inf>
     e00:	66 cf       	rjmp	.-308    	; 0xcce <__fp_nan>
     e02:	11 24       	eor	r1, r1
     e04:	a9 cf       	rjmp	.-174    	; 0xd58 <__fp_szero>

00000e06 <__mulsf3x>:
     e06:	85 df       	rcall	.-246    	; 0xd12 <__fp_split3>
     e08:	a0 f3       	brcs	.-24     	; 0xdf2 <__mulsf3+0x4>

00000e0a <__mulsf3_pse>:
     e0a:	95 9f       	mul	r25, r21
     e0c:	d1 f3       	breq	.-12     	; 0xe02 <__mulsf3+0x14>
     e0e:	95 0f       	add	r25, r21
     e10:	50 e0       	ldi	r21, 0x00	; 0
     e12:	55 1f       	adc	r21, r21
     e14:	62 9f       	mul	r22, r18
     e16:	f0 01       	movw	r30, r0
     e18:	72 9f       	mul	r23, r18
     e1a:	bb 27       	eor	r27, r27
     e1c:	f0 0d       	add	r31, r0
     e1e:	b1 1d       	adc	r27, r1
     e20:	63 9f       	mul	r22, r19
     e22:	aa 27       	eor	r26, r26
     e24:	f0 0d       	add	r31, r0
     e26:	b1 1d       	adc	r27, r1
     e28:	aa 1f       	adc	r26, r26
     e2a:	64 9f       	mul	r22, r20
     e2c:	66 27       	eor	r22, r22
     e2e:	b0 0d       	add	r27, r0
     e30:	a1 1d       	adc	r26, r1
     e32:	66 1f       	adc	r22, r22
     e34:	82 9f       	mul	r24, r18
     e36:	22 27       	eor	r18, r18
     e38:	b0 0d       	add	r27, r0
     e3a:	a1 1d       	adc	r26, r1
     e3c:	62 1f       	adc	r22, r18
     e3e:	73 9f       	mul	r23, r19
     e40:	b0 0d       	add	r27, r0
     e42:	a1 1d       	adc	r26, r1
     e44:	62 1f       	adc	r22, r18
     e46:	83 9f       	mul	r24, r19
     e48:	a0 0d       	add	r26, r0
     e4a:	61 1d       	adc	r22, r1
     e4c:	22 1f       	adc	r18, r18
     e4e:	74 9f       	mul	r23, r20
     e50:	33 27       	eor	r19, r19
     e52:	a0 0d       	add	r26, r0
     e54:	61 1d       	adc	r22, r1
     e56:	23 1f       	adc	r18, r19
     e58:	84 9f       	mul	r24, r20
     e5a:	60 0d       	add	r22, r0
     e5c:	21 1d       	adc	r18, r1
     e5e:	82 2f       	mov	r24, r18
     e60:	76 2f       	mov	r23, r22
     e62:	6a 2f       	mov	r22, r26
     e64:	11 24       	eor	r1, r1
     e66:	9f 57       	subi	r25, 0x7F	; 127
     e68:	50 40       	sbci	r21, 0x00	; 0
     e6a:	8a f0       	brmi	.+34     	; 0xe8e <__mulsf3_pse+0x84>
     e6c:	e1 f0       	breq	.+56     	; 0xea6 <__mulsf3_pse+0x9c>
     e6e:	88 23       	and	r24, r24
     e70:	4a f0       	brmi	.+18     	; 0xe84 <__mulsf3_pse+0x7a>
     e72:	ee 0f       	add	r30, r30
     e74:	ff 1f       	adc	r31, r31
     e76:	bb 1f       	adc	r27, r27
     e78:	66 1f       	adc	r22, r22
     e7a:	77 1f       	adc	r23, r23
     e7c:	88 1f       	adc	r24, r24
     e7e:	91 50       	subi	r25, 0x01	; 1
     e80:	50 40       	sbci	r21, 0x00	; 0
     e82:	a9 f7       	brne	.-22     	; 0xe6e <__mulsf3_pse+0x64>
     e84:	9e 3f       	cpi	r25, 0xFE	; 254
     e86:	51 05       	cpc	r21, r1
     e88:	70 f0       	brcs	.+28     	; 0xea6 <__mulsf3_pse+0x9c>
     e8a:	1b cf       	rjmp	.-458    	; 0xcc2 <__fp_inf>
     e8c:	65 cf       	rjmp	.-310    	; 0xd58 <__fp_szero>
     e8e:	5f 3f       	cpi	r21, 0xFF	; 255
     e90:	ec f3       	brlt	.-6      	; 0xe8c <__mulsf3_pse+0x82>
     e92:	98 3e       	cpi	r25, 0xE8	; 232
     e94:	dc f3       	brlt	.-10     	; 0xe8c <__mulsf3_pse+0x82>
     e96:	86 95       	lsr	r24
     e98:	77 95       	ror	r23
     e9a:	67 95       	ror	r22
     e9c:	b7 95       	ror	r27
     e9e:	f7 95       	ror	r31
     ea0:	e7 95       	ror	r30
     ea2:	9f 5f       	subi	r25, 0xFF	; 255
     ea4:	c1 f7       	brne	.-16     	; 0xe96 <__mulsf3_pse+0x8c>
     ea6:	fe 2b       	or	r31, r30
     ea8:	88 0f       	add	r24, r24
     eaa:	91 1d       	adc	r25, r1
     eac:	96 95       	lsr	r25
     eae:	87 95       	ror	r24
     eb0:	97 f9       	bld	r25, 7
     eb2:	08 95       	ret

00000eb4 <pow>:
     eb4:	fa 01       	movw	r30, r20
     eb6:	ee 0f       	add	r30, r30
     eb8:	ff 1f       	adc	r31, r31
     eba:	30 96       	adiw	r30, 0x00	; 0
     ebc:	21 05       	cpc	r18, r1
     ebe:	31 05       	cpc	r19, r1
     ec0:	99 f1       	breq	.+102    	; 0xf28 <pow+0x74>
     ec2:	61 15       	cp	r22, r1
     ec4:	71 05       	cpc	r23, r1
     ec6:	61 f4       	brne	.+24     	; 0xee0 <pow+0x2c>
     ec8:	80 38       	cpi	r24, 0x80	; 128
     eca:	bf e3       	ldi	r27, 0x3F	; 63
     ecc:	9b 07       	cpc	r25, r27
     ece:	49 f1       	breq	.+82     	; 0xf22 <pow+0x6e>
     ed0:	68 94       	set
     ed2:	90 38       	cpi	r25, 0x80	; 128
     ed4:	81 05       	cpc	r24, r1
     ed6:	61 f0       	breq	.+24     	; 0xef0 <pow+0x3c>
     ed8:	80 38       	cpi	r24, 0x80	; 128
     eda:	bf ef       	ldi	r27, 0xFF	; 255
     edc:	9b 07       	cpc	r25, r27
     ede:	41 f0       	breq	.+16     	; 0xef0 <pow+0x3c>
     ee0:	99 23       	and	r25, r25
     ee2:	42 f5       	brpl	.+80     	; 0xf34 <pow+0x80>
     ee4:	ff 3f       	cpi	r31, 0xFF	; 255
     ee6:	e1 05       	cpc	r30, r1
     ee8:	31 05       	cpc	r19, r1
     eea:	21 05       	cpc	r18, r1
     eec:	11 f1       	breq	.+68     	; 0xf32 <pow+0x7e>
     eee:	e8 94       	clt
     ef0:	08 94       	sec
     ef2:	e7 95       	ror	r30
     ef4:	d9 01       	movw	r26, r18
     ef6:	aa 23       	and	r26, r26
     ef8:	29 f4       	brne	.+10     	; 0xf04 <pow+0x50>
     efa:	ab 2f       	mov	r26, r27
     efc:	be 2f       	mov	r27, r30
     efe:	f8 5f       	subi	r31, 0xF8	; 248
     f00:	d0 f3       	brcs	.-12     	; 0xef6 <pow+0x42>
     f02:	10 c0       	rjmp	.+32     	; 0xf24 <pow+0x70>
     f04:	ff 5f       	subi	r31, 0xFF	; 255
     f06:	70 f4       	brcc	.+28     	; 0xf24 <pow+0x70>
     f08:	a6 95       	lsr	r26
     f0a:	e0 f7       	brcc	.-8      	; 0xf04 <pow+0x50>
     f0c:	f7 39       	cpi	r31, 0x97	; 151
     f0e:	50 f0       	brcs	.+20     	; 0xf24 <pow+0x70>
     f10:	19 f0       	breq	.+6      	; 0xf18 <pow+0x64>
     f12:	ff 3a       	cpi	r31, 0xAF	; 175
     f14:	38 f4       	brcc	.+14     	; 0xf24 <pow+0x70>
     f16:	9f 77       	andi	r25, 0x7F	; 127
     f18:	9f 93       	push	r25
     f1a:	0c d0       	rcall	.+24     	; 0xf34 <pow+0x80>
     f1c:	0f 90       	pop	r0
     f1e:	07 fc       	sbrc	r0, 7
     f20:	90 58       	subi	r25, 0x80	; 128
     f22:	08 95       	ret
     f24:	3e f0       	brts	.+14     	; 0xf34 <pow+0x80>
     f26:	d3 ce       	rjmp	.-602    	; 0xcce <__fp_nan>
     f28:	60 e0       	ldi	r22, 0x00	; 0
     f2a:	70 e0       	ldi	r23, 0x00	; 0
     f2c:	80 e8       	ldi	r24, 0x80	; 128
     f2e:	9f e3       	ldi	r25, 0x3F	; 63
     f30:	08 95       	ret
     f32:	4f e7       	ldi	r20, 0x7F	; 127
     f34:	9f 77       	andi	r25, 0x7F	; 127
     f36:	5f 93       	push	r21
     f38:	4f 93       	push	r20
     f3a:	3f 93       	push	r19
     f3c:	2f 93       	push	r18
     f3e:	17 df       	rcall	.-466    	; 0xd6e <log>
     f40:	2f 91       	pop	r18
     f42:	3f 91       	pop	r19
     f44:	4f 91       	pop	r20
     f46:	5f 91       	pop	r21
     f48:	52 df       	rcall	.-348    	; 0xdee <__mulsf3>
     f4a:	05 c0       	rjmp	.+10     	; 0xf56 <exp>
     f4c:	19 f4       	brne	.+6      	; 0xf54 <pow+0xa0>
     f4e:	0e f0       	brts	.+2      	; 0xf52 <pow+0x9e>
     f50:	b8 ce       	rjmp	.-656    	; 0xcc2 <__fp_inf>
     f52:	01 cf       	rjmp	.-510    	; 0xd56 <__fp_zero>
     f54:	bc ce       	rjmp	.-648    	; 0xcce <__fp_nan>

00000f56 <exp>:
     f56:	e5 de       	rcall	.-566    	; 0xd22 <__fp_splitA>
     f58:	c8 f3       	brcs	.-14     	; 0xf4c <pow+0x98>
     f5a:	96 38       	cpi	r25, 0x86	; 134
     f5c:	c0 f7       	brcc	.-16     	; 0xf4e <pow+0x9a>
     f5e:	07 f8       	bld	r0, 7
     f60:	0f 92       	push	r0
     f62:	e8 94       	clt
     f64:	2b e3       	ldi	r18, 0x3B	; 59
     f66:	3a ea       	ldi	r19, 0xAA	; 170
     f68:	48 eb       	ldi	r20, 0xB8	; 184
     f6a:	5f e7       	ldi	r21, 0x7F	; 127
     f6c:	4e df       	rcall	.-356    	; 0xe0a <__mulsf3_pse>
     f6e:	0f 92       	push	r0
     f70:	0f 92       	push	r0
     f72:	0f 92       	push	r0
     f74:	4d b7       	in	r20, 0x3d	; 61
     f76:	5e b7       	in	r21, 0x3e	; 62
     f78:	0f 92       	push	r0
     f7a:	89 d0       	rcall	.+274    	; 0x108e <modf>
     f7c:	e6 ee       	ldi	r30, 0xE6	; 230
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	24 d0       	rcall	.+72     	; 0xfca <__fp_powser>
     f82:	4f 91       	pop	r20
     f84:	5f 91       	pop	r21
     f86:	ef 91       	pop	r30
     f88:	ff 91       	pop	r31
     f8a:	e5 95       	asr	r30
     f8c:	ee 1f       	adc	r30, r30
     f8e:	ff 1f       	adc	r31, r31
     f90:	49 f0       	breq	.+18     	; 0xfa4 <exp+0x4e>
     f92:	fe 57       	subi	r31, 0x7E	; 126
     f94:	e0 68       	ori	r30, 0x80	; 128
     f96:	44 27       	eor	r20, r20
     f98:	ee 0f       	add	r30, r30
     f9a:	44 1f       	adc	r20, r20
     f9c:	fa 95       	dec	r31
     f9e:	e1 f7       	brne	.-8      	; 0xf98 <exp+0x42>
     fa0:	41 95       	neg	r20
     fa2:	55 0b       	sbc	r21, r21
     fa4:	40 d0       	rcall	.+128    	; 0x1026 <ldexp>
     fa6:	0f 90       	pop	r0
     fa8:	07 fe       	sbrs	r0, 7
     faa:	34 c0       	rjmp	.+104    	; 0x1014 <inverse>
     fac:	08 95       	ret

00000fae <__fp_mpack>:
     fae:	9f 3f       	cpi	r25, 0xFF	; 255
     fb0:	31 f0       	breq	.+12     	; 0xfbe <__fp_mpack_finite+0xc>

00000fb2 <__fp_mpack_finite>:
     fb2:	91 50       	subi	r25, 0x01	; 1
     fb4:	20 f4       	brcc	.+8      	; 0xfbe <__fp_mpack_finite+0xc>
     fb6:	87 95       	ror	r24
     fb8:	77 95       	ror	r23
     fba:	67 95       	ror	r22
     fbc:	b7 95       	ror	r27
     fbe:	88 0f       	add	r24, r24
     fc0:	91 1d       	adc	r25, r1
     fc2:	96 95       	lsr	r25
     fc4:	87 95       	ror	r24
     fc6:	97 f9       	bld	r25, 7
     fc8:	08 95       	ret

00000fca <__fp_powser>:
     fca:	df 93       	push	r29
     fcc:	cf 93       	push	r28
     fce:	1f 93       	push	r17
     fd0:	0f 93       	push	r16
     fd2:	ff 92       	push	r15
     fd4:	ef 92       	push	r14
     fd6:	df 92       	push	r13
     fd8:	7b 01       	movw	r14, r22
     fda:	8c 01       	movw	r16, r24
     fdc:	68 94       	set
     fde:	05 c0       	rjmp	.+10     	; 0xfea <__fp_powser+0x20>
     fe0:	da 2e       	mov	r13, r26
     fe2:	ef 01       	movw	r28, r30
     fe4:	10 df       	rcall	.-480    	; 0xe06 <__mulsf3x>
     fe6:	fe 01       	movw	r30, r28
     fe8:	e8 94       	clt
     fea:	a5 91       	lpm	r26, Z+
     fec:	25 91       	lpm	r18, Z+
     fee:	35 91       	lpm	r19, Z+
     ff0:	45 91       	lpm	r20, Z+
     ff2:	55 91       	lpm	r21, Z+
     ff4:	ae f3       	brts	.-22     	; 0xfe0 <__fp_powser+0x16>
     ff6:	ef 01       	movw	r28, r30
     ff8:	40 dd       	rcall	.-1408   	; 0xa7a <__addsf3x>
     ffa:	fe 01       	movw	r30, r28
     ffc:	97 01       	movw	r18, r14
     ffe:	a8 01       	movw	r20, r16
    1000:	da 94       	dec	r13
    1002:	79 f7       	brne	.-34     	; 0xfe2 <__fp_powser+0x18>
    1004:	df 90       	pop	r13
    1006:	ef 90       	pop	r14
    1008:	ff 90       	pop	r15
    100a:	0f 91       	pop	r16
    100c:	1f 91       	pop	r17
    100e:	cf 91       	pop	r28
    1010:	df 91       	pop	r29
    1012:	08 95       	ret

00001014 <inverse>:
    1014:	9b 01       	movw	r18, r22
    1016:	ac 01       	movw	r20, r24
    1018:	60 e0       	ldi	r22, 0x00	; 0
    101a:	70 e0       	ldi	r23, 0x00	; 0
    101c:	80 e8       	ldi	r24, 0x80	; 128
    101e:	9f e3       	ldi	r25, 0x3F	; 63
    1020:	7f cd       	rjmp	.-1282   	; 0xb20 <__divsf3>
    1022:	4f ce       	rjmp	.-866    	; 0xcc2 <__fp_inf>
    1024:	c4 cf       	rjmp	.-120    	; 0xfae <__fp_mpack>

00001026 <ldexp>:
    1026:	7d de       	rcall	.-774    	; 0xd22 <__fp_splitA>
    1028:	e8 f3       	brcs	.-6      	; 0x1024 <inverse+0x10>
    102a:	99 23       	and	r25, r25
    102c:	d9 f3       	breq	.-10     	; 0x1024 <inverse+0x10>
    102e:	94 0f       	add	r25, r20
    1030:	51 1d       	adc	r21, r1
    1032:	bb f3       	brvs	.-18     	; 0x1022 <inverse+0xe>
    1034:	91 50       	subi	r25, 0x01	; 1
    1036:	50 40       	sbci	r21, 0x00	; 0
    1038:	94 f0       	brlt	.+36     	; 0x105e <ldexp+0x38>
    103a:	59 f0       	breq	.+22     	; 0x1052 <ldexp+0x2c>
    103c:	88 23       	and	r24, r24
    103e:	32 f0       	brmi	.+12     	; 0x104c <ldexp+0x26>
    1040:	66 0f       	add	r22, r22
    1042:	77 1f       	adc	r23, r23
    1044:	88 1f       	adc	r24, r24
    1046:	91 50       	subi	r25, 0x01	; 1
    1048:	50 40       	sbci	r21, 0x00	; 0
    104a:	c1 f7       	brne	.-16     	; 0x103c <ldexp+0x16>
    104c:	9e 3f       	cpi	r25, 0xFE	; 254
    104e:	51 05       	cpc	r21, r1
    1050:	44 f7       	brge	.-48     	; 0x1022 <inverse+0xe>
    1052:	88 0f       	add	r24, r24
    1054:	91 1d       	adc	r25, r1
    1056:	96 95       	lsr	r25
    1058:	87 95       	ror	r24
    105a:	97 f9       	bld	r25, 7
    105c:	08 95       	ret
    105e:	5f 3f       	cpi	r21, 0xFF	; 255
    1060:	ac f0       	brlt	.+42     	; 0x108c <ldexp+0x66>
    1062:	98 3e       	cpi	r25, 0xE8	; 232
    1064:	9c f0       	brlt	.+38     	; 0x108c <ldexp+0x66>
    1066:	bb 27       	eor	r27, r27
    1068:	86 95       	lsr	r24
    106a:	77 95       	ror	r23
    106c:	67 95       	ror	r22
    106e:	b7 95       	ror	r27
    1070:	08 f4       	brcc	.+2      	; 0x1074 <ldexp+0x4e>
    1072:	b1 60       	ori	r27, 0x01	; 1
    1074:	93 95       	inc	r25
    1076:	c1 f7       	brne	.-16     	; 0x1068 <ldexp+0x42>
    1078:	bb 0f       	add	r27, r27
    107a:	58 f7       	brcc	.-42     	; 0x1052 <ldexp+0x2c>
    107c:	11 f4       	brne	.+4      	; 0x1082 <ldexp+0x5c>
    107e:	60 ff       	sbrs	r22, 0
    1080:	e8 cf       	rjmp	.-48     	; 0x1052 <ldexp+0x2c>
    1082:	6f 5f       	subi	r22, 0xFF	; 255
    1084:	7f 4f       	sbci	r23, 0xFF	; 255
    1086:	8f 4f       	sbci	r24, 0xFF	; 255
    1088:	9f 4f       	sbci	r25, 0xFF	; 255
    108a:	e3 cf       	rjmp	.-58     	; 0x1052 <ldexp+0x2c>
    108c:	65 ce       	rjmp	.-822    	; 0xd58 <__fp_szero>

0000108e <modf>:
    108e:	fa 01       	movw	r30, r20
    1090:	dc 01       	movw	r26, r24
    1092:	aa 0f       	add	r26, r26
    1094:	bb 1f       	adc	r27, r27
    1096:	9b 01       	movw	r18, r22
    1098:	ac 01       	movw	r20, r24
    109a:	bf 57       	subi	r27, 0x7F	; 127
    109c:	28 f4       	brcc	.+10     	; 0x10a8 <modf+0x1a>
    109e:	22 27       	eor	r18, r18
    10a0:	33 27       	eor	r19, r19
    10a2:	44 27       	eor	r20, r20
    10a4:	50 78       	andi	r21, 0x80	; 128
    10a6:	1f c0       	rjmp	.+62     	; 0x10e6 <modf+0x58>
    10a8:	b7 51       	subi	r27, 0x17	; 23
    10aa:	88 f4       	brcc	.+34     	; 0x10ce <modf+0x40>
    10ac:	ab 2f       	mov	r26, r27
    10ae:	00 24       	eor	r0, r0
    10b0:	46 95       	lsr	r20
    10b2:	37 95       	ror	r19
    10b4:	27 95       	ror	r18
    10b6:	01 1c       	adc	r0, r1
    10b8:	a3 95       	inc	r26
    10ba:	d2 f3       	brmi	.-12     	; 0x10b0 <modf+0x22>
    10bc:	00 20       	and	r0, r0
    10be:	69 f0       	breq	.+26     	; 0x10da <modf+0x4c>
    10c0:	22 0f       	add	r18, r18
    10c2:	33 1f       	adc	r19, r19
    10c4:	44 1f       	adc	r20, r20
    10c6:	b3 95       	inc	r27
    10c8:	da f3       	brmi	.-10     	; 0x10c0 <modf+0x32>
    10ca:	0d d0       	rcall	.+26     	; 0x10e6 <modf+0x58>
    10cc:	c4 cc       	rjmp	.-1656   	; 0xa56 <__subsf3>
    10ce:	61 30       	cpi	r22, 0x01	; 1
    10d0:	71 05       	cpc	r23, r1
    10d2:	a0 e8       	ldi	r26, 0x80	; 128
    10d4:	8a 07       	cpc	r24, r26
    10d6:	b9 46       	sbci	r27, 0x69	; 105
    10d8:	30 f4       	brcc	.+12     	; 0x10e6 <modf+0x58>
    10da:	9b 01       	movw	r18, r22
    10dc:	ac 01       	movw	r20, r24
    10de:	66 27       	eor	r22, r22
    10e0:	77 27       	eor	r23, r23
    10e2:	88 27       	eor	r24, r24
    10e4:	90 78       	andi	r25, 0x80	; 128
    10e6:	30 96       	adiw	r30, 0x00	; 0
    10e8:	21 f0       	breq	.+8      	; 0x10f2 <modf+0x64>
    10ea:	20 83       	st	Z, r18
    10ec:	31 83       	std	Z+1, r19	; 0x01
    10ee:	42 83       	std	Z+2, r20	; 0x02
    10f0:	53 83       	std	Z+3, r21	; 0x03
    10f2:	08 95       	ret

000010f4 <__umulhisi3>:
    10f4:	a2 9f       	mul	r26, r18
    10f6:	b0 01       	movw	r22, r0
    10f8:	b3 9f       	mul	r27, r19
    10fa:	c0 01       	movw	r24, r0
    10fc:	a3 9f       	mul	r26, r19
    10fe:	70 0d       	add	r23, r0
    1100:	81 1d       	adc	r24, r1
    1102:	11 24       	eor	r1, r1
    1104:	91 1d       	adc	r25, r1
    1106:	b2 9f       	mul	r27, r18
    1108:	70 0d       	add	r23, r0
    110a:	81 1d       	adc	r24, r1
    110c:	11 24       	eor	r1, r1
    110e:	91 1d       	adc	r25, r1
    1110:	08 95       	ret

00001112 <_exit>:
    1112:	f8 94       	cli

00001114 <__stop_program>:
    1114:	ff cf       	rjmp	.-2      	; 0x1114 <__stop_program>
