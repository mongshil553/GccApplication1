
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000006d2  00000766  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800102  00800102  00000768  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000798  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000007d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001092  00000000  00000000  0000089c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009fe  00000000  00000000  0000192e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000652  00000000  00000000  0000232c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000204  00000000  00000000  00002980  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000679  00000000  00000000  00002b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003b4  00000000  00000000  000031fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000035b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	43 c0       	rjmp	.+134    	; 0xc8 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ed       	ldi	r30, 0xD2	; 210
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 32       	cpi	r26, 0x25	; 37
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	74 d0       	rcall	.+232    	; 0x1ac <main>
  c4:	04 c3       	rjmp	.+1544   	; 0x6ce <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_16>:
	
	return 0;
	
}

ISR(TIMER0_OVF_vect){ //Use Timer0 for collecting sensor value and PWM
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	0b b6       	in	r0, 0x3b	; 59
  d4:	0f 92       	push	r0
  d6:	2f 93       	push	r18
  d8:	3f 93       	push	r19
  da:	4f 93       	push	r20
  dc:	5f 93       	push	r21
  de:	6f 93       	push	r22
  e0:	7f 93       	push	r23
  e2:	8f 93       	push	r24
  e4:	9f 93       	push	r25
  e6:	af 93       	push	r26
  e8:	bf 93       	push	r27
  ea:	ef 93       	push	r30
  ec:	ff 93       	push	r31
	
	//idx = 0x08; //이 부분 주석처리 안 하면 idx에 해당하는 부분만 실행됨. 이 경우 0x08은 PSD이므로 PSD 센서값만 읽음.
	
	static char idx = 0x01;
	
	switch(idx){
  ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f2:	83 30       	cpi	r24, 0x03	; 3
  f4:	d1 f0       	breq	.+52     	; 0x12a <__vector_16+0x62>
  f6:	28 f4       	brcc	.+10     	; 0x102 <__vector_16+0x3a>
  f8:	81 30       	cpi	r24, 0x01	; 1
  fa:	49 f0       	breq	.+18     	; 0x10e <__vector_16+0x46>
  fc:	82 30       	cpi	r24, 0x02	; 2
  fe:	71 f0       	breq	.+28     	; 0x11c <__vector_16+0x54>
 100:	2d c0       	rjmp	.+90     	; 0x15c <__vector_16+0x94>
 102:	85 30       	cpi	r24, 0x05	; 5
 104:	01 f1       	breq	.+64     	; 0x146 <__vector_16+0x7e>
 106:	c0 f0       	brcs	.+48     	; 0x138 <__vector_16+0x70>
 108:	86 30       	cpi	r24, 0x06	; 6
 10a:	21 f1       	breq	.+72     	; 0x154 <__vector_16+0x8c>
 10c:	27 c0       	rjmp	.+78     	; 0x15c <__vector_16+0x94>
	case 0x01:
		Read_CDS();
 10e:	ce d0       	rcall	.+412    	; 0x2ac <Read_CDS>
		//current_channel = 0x01;
		//다음 ADC Mux 선택 Fire
		idx++;
 110:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 114:	8f 5f       	subi	r24, 0xFF	; 255
 116:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
		
	case 0x02:
		Read_Thermister();
 11a:	20 c0       	rjmp	.+64     	; 0x15c <__vector_16+0x94>
 11c:	1b d1       	rcall	.+566    	; 0x354 <Read_Thermister>
		
		//current_channel = 0x06;
		//Is_Fire_Interrupt(); //Fire Interrupt를 걸까말까
		//다음 ADC Mux 선택 Pressure
		
		idx++;
 11e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 122:	8f 5f       	subi	r24, 0xFF	; 255
 124:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
		
	case 0x03:
		Read_Pressure();
 128:	19 c0       	rjmp	.+50     	; 0x15c <__vector_16+0x94>
 12a:	ff d0       	rcall	.+510    	; 0x32a <Read_Pressure>
		//current_channel = 0x04;
		//다음 ADC Mux 선택 PSD
		
		idx++;
 12c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 130:	8f 5f       	subi	r24, 0xFF	; 255
 132:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
		
	case 0x04:
		Read_Shock();
 136:	12 c0       	rjmp	.+36     	; 0x15c <__vector_16+0x94>
 138:	22 d1       	rcall	.+580    	; 0x37e <Read_Shock>
		
		//current_channel = 0x07;
		//Is_PSD_Interrupt(); //PSD Interrupt를 걸까말까
		//다음 ADC Mux 선택 진동
		
		idx++;
 13a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 13e:	8f 5f       	subi	r24, 0xFF	; 255
 140:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
		
	case 0x05:
		Read_Fire();
 144:	0b c0       	rjmp	.+22     	; 0x15c <__vector_16+0x94>
 146:	c7 d0       	rcall	.+398    	; 0x2d6 <Read_Fire>
		//current_channel = 0x05;
		//다음 ADC Mux 선택 써미스터
		
		idx++;
 148:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 14c:	8f 5f       	subi	r24, 0xFF	; 255
 14e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
		
	case 0x06:
		Read_PSD();
 152:	04 c0       	rjmp	.+8      	; 0x15c <__vector_16+0x94>
 154:	d5 d0       	rcall	.+426    	; 0x300 <Read_PSD>
		//current_channel = 0x03;
		//다음 ADC Mux 선택 CDS
		
		idx = 0x01;
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
	}

	//ADC Mux 선택, ADC 시작 시키고 ISR 종료
	ADMUX = (ADMUX & 0xF0) | (idx & 0x0F); //다음 센서 선택
 15c:	87 b1       	in	r24, 0x07	; 7
 15e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 162:	9f 70       	andi	r25, 0x0F	; 15
 164:	80 7f       	andi	r24, 0xF0	; 240
 166:	89 2b       	or	r24, r25
 168:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC); // ADC 변환 시작
 16a:	86 b1       	in	r24, 0x06	; 6
 16c:	80 64       	ori	r24, 0x40	; 64
 16e:	86 b9       	out	0x06, r24	; 6
}
 170:	ff 91       	pop	r31
 172:	ef 91       	pop	r30
 174:	bf 91       	pop	r27
 176:	af 91       	pop	r26
 178:	9f 91       	pop	r25
 17a:	8f 91       	pop	r24
 17c:	7f 91       	pop	r23
 17e:	6f 91       	pop	r22
 180:	5f 91       	pop	r21
 182:	4f 91       	pop	r20
 184:	3f 91       	pop	r19
 186:	2f 91       	pop	r18
 188:	0f 90       	pop	r0
 18a:	0b be       	out	0x3b, r0	; 59
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <adc_init>:

//ADC 입력
//ADC 초기화
void adc_init(void){
	ADMUX=(1<<REFS0); //외부 레퍼런스 접압을 기준 전압으로 선택, 우측정렬, 초기 입력핀은 0번
 196:	80 e4       	ldi	r24, 0x40	; 64
 198:	87 b9       	out	0x07, r24	; 7
	ADCSRA=(1<<ADEN)|(0<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //ADC enable, ADC interrupt enable 분주비 128
 19a:	87 e8       	ldi	r24, 0x87	; 135
 19c:	86 b9       	out	0x06, r24	; 6
 19e:	08 95       	ret

000001a0 <timer0_init>:
	ADCSRA |=(1<<ADSC); //ADC 변화 시작
}*/


void timer0_init(void) {
	TCCR0 = (1 << CS02) | (1 << CS00); // 분주비 1024
 1a0:	85 e0       	ldi	r24, 0x05	; 5
 1a2:	83 bf       	out	0x33, r24	; 51
	TIMSK = (1 << TOIE0); // 타이머0 오버플로우 인터럽트 허용
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	87 bf       	out	0x37, r24	; 55
	TCNT0 = 0; // 타이머 카운터 초기화
 1a8:	12 be       	out	0x32, r1	; 50
 1aa:	08 95       	ret

000001ac <main>:

//**** Debug **************************************************************************************************************************************************//

#if DEBUG_ == 0
//현준이 일하는 곳 맨 위에 #define DEBUG_ 부분을 0으로 바꾸기
int main(void){
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	1f 92       	push	r1
 1b2:	cd b7       	in	r28, 0x3d	; 61
 1b4:	de b7       	in	r29, 0x3e	; 62
	
	volatile unsigned char LED=0xFF;
 1b6:	1f ef       	ldi	r17, 0xFF	; 255
 1b8:	19 83       	std	Y+1, r17	; 0x01
	
	adc_init(); // ADC 초기화
 1ba:	ed df       	rcall	.-38     	; 0x196 <adc_init>
	timer0_init(); // 타이머0 초기화
 1bc:	f1 df       	rcall	.-30     	; 0x1a0 <timer0_init>
	
	Reset_sensor_val(); //센서 변수 초기화
 1be:	f4 d0       	rcall	.+488    	; 0x3a8 <Reset_sensor_val>
 1c0:	78 94       	sei
	
	sei(); // 전역 인터럽트 허용
 1c2:	1a bb       	out	0x1a, r17	; 26

	DDRA=0xFF;
 1c4:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRF=0x00;
 1c8:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <psd_sensor_val>
		}
		else {
			LED |= ~0xEF;
		}
		*/
		if ( psd_sensor_val> 100) {
 1cc:	85 36       	cpi	r24, 0x65	; 101
 1ce:	18 f0       	brcs	.+6      	; 0x1d6 <main+0x2a>
 1d0:	8f eb       	ldi	r24, 0xBF	; 191
			LED = 0xBF;
 1d2:	89 83       	std	Y+1, r24	; 0x01
 1d4:	03 c0       	rjmp	.+6      	; 0x1dc <main+0x30>
 1d6:	89 81       	ldd	r24, Y+1	; 0x01
		}
		else {
			LED |= ~0xBF;
 1d8:	80 64       	ori	r24, 0x40	; 64
 1da:	89 83       	std	Y+1, r24	; 0x01
 1dc:	89 81       	ldd	r24, Y+1	; 0x01
		}
		
		PORTA=LED;
 1de:	8b bb       	out	0x1b, r24	; 27
 1e0:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e2:	80 e7       	ldi	r24, 0x70	; 112
 1e4:	92 e0       	ldi	r25, 0x02	; 2
 1e6:	21 50       	subi	r18, 0x01	; 1
 1e8:	80 40       	sbci	r24, 0x00	; 0
 1ea:	90 40       	sbci	r25, 0x00	; 0
 1ec:	e1 f7       	brne	.-8      	; 0x1e6 <main+0x3a>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <main+0x44>
 1f0:	00 00       	nop
 1f2:	ea cf       	rjmp	.-44     	; 0x1c8 <main+0x1c>

000001f4 <lpf>:
 1f4:	8f 92       	push	r8
﻿#include "Sensors.h"
#include <avr/io.h>

//Read_{센서} 부분에서 필터링 실행

uint16_t lpf(uint16_t current_value, uint16_t new_value, float alpha) {
 1f6:	9f 92       	push	r9
 1f8:	af 92       	push	r10
 1fa:	bf 92       	push	r11
 1fc:	cf 92       	push	r12
 1fe:	df 92       	push	r13
 200:	ef 92       	push	r14
 202:	ff 92       	push	r15
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	ec 01       	movw	r28, r24
 20a:	69 01       	movw	r12, r18
 20c:	7a 01       	movw	r14, r20
	return (uint16_t)(alpha * new_value + (1 - alpha) * current_value);
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	6c d1       	rcall	.+728    	; 0x4ec <__floatunsisf>
 214:	a7 01       	movw	r20, r14
 216:	96 01       	movw	r18, r12
 218:	f7 d1       	rcall	.+1006   	; 0x608 <__mulsf3>
 21a:	4b 01       	movw	r8, r22
 21c:	5c 01       	movw	r10, r24
 21e:	a7 01       	movw	r20, r14
 220:	96 01       	movw	r18, r12
 222:	60 e0       	ldi	r22, 0x00	; 0
 224:	70 e0       	ldi	r23, 0x00	; 0
 226:	80 e8       	ldi	r24, 0x80	; 128
 228:	9f e3       	ldi	r25, 0x3F	; 63
 22a:	cf d0       	rcall	.+414    	; 0x3ca <__subsf3>
 22c:	6b 01       	movw	r12, r22
 22e:	7c 01       	movw	r14, r24
 230:	be 01       	movw	r22, r28
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	5a d1       	rcall	.+692    	; 0x4ec <__floatunsisf>
 238:	a7 01       	movw	r20, r14
 23a:	96 01       	movw	r18, r12
 23c:	e5 d1       	rcall	.+970    	; 0x608 <__mulsf3>
 23e:	9b 01       	movw	r18, r22
 240:	ac 01       	movw	r20, r24
 242:	c5 01       	movw	r24, r10
 244:	b4 01       	movw	r22, r8
 246:	c2 d0       	rcall	.+388    	; 0x3cc <__addsf3>
 248:	25 d1       	rcall	.+586    	; 0x494 <__fixunssfsi>
}
 24a:	cb 01       	movw	r24, r22
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	ff 90       	pop	r15
 252:	ef 90       	pop	r14
 254:	df 90       	pop	r13
 256:	cf 90       	pop	r12
 258:	bf 90       	pop	r11
 25a:	af 90       	pop	r10
 25c:	9f 90       	pop	r9
 25e:	8f 90       	pop	r8
 260:	08 95       	ret

00000262 <hpf>:

uint16_t hpf(uint16_t previous_value, uint16_t new_value, float alpha) {
 262:	cf 92       	push	r12
 264:	df 92       	push	r13
 266:	ef 92       	push	r14
 268:	ff 92       	push	r15
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	ec 01       	movw	r28, r24
 270:	69 01       	movw	r12, r18
 272:	7a 01       	movw	r14, r20
	return (uint16_t)(alpha * (previous_value + new_value) - previous_value);
 274:	68 0f       	add	r22, r24
 276:	79 1f       	adc	r23, r25
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	37 d1       	rcall	.+622    	; 0x4ec <__floatunsisf>
 27e:	a7 01       	movw	r20, r14
 280:	96 01       	movw	r18, r12
 282:	c2 d1       	rcall	.+900    	; 0x608 <__mulsf3>
 284:	6b 01       	movw	r12, r22
 286:	7c 01       	movw	r14, r24
 288:	be 01       	movw	r22, r28
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	2e d1       	rcall	.+604    	; 0x4ec <__floatunsisf>
 290:	9b 01       	movw	r18, r22
 292:	ac 01       	movw	r20, r24
 294:	c7 01       	movw	r24, r14
 296:	b6 01       	movw	r22, r12
 298:	98 d0       	rcall	.+304    	; 0x3ca <__subsf3>
 29a:	fc d0       	rcall	.+504    	; 0x494 <__fixunssfsi>
}
 29c:	cb 01       	movw	r24, r22
 29e:	df 91       	pop	r29
 2a0:	cf 91       	pop	r28
 2a2:	ff 90       	pop	r15
 2a4:	ef 90       	pop	r14
 2a6:	df 90       	pop	r13
 2a8:	cf 90       	pop	r12
 2aa:	08 95       	ret

000002ac <Read_CDS>:

inline void Read_CDS(){
	static uint16_t previous_value = 0;
	cds_sensor_val = lpf(previous_value, ADC, 0.1);
 2ac:	64 b1       	in	r22, 0x04	; 4
 2ae:	75 b1       	in	r23, 0x05	; 5
 2b0:	2d ec       	ldi	r18, 0xCD	; 205
 2b2:	3c ec       	ldi	r19, 0xCC	; 204
 2b4:	4c ec       	ldi	r20, 0xCC	; 204
 2b6:	5d e3       	ldi	r21, 0x3D	; 61
 2b8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <previous_value.1628>
 2bc:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <previous_value.1628+0x1>
 2c0:	99 df       	rcall	.-206    	; 0x1f4 <lpf>
 2c2:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <cds_sensor_val>
	previous_value = cds_sensor_val;
 2c6:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <cds_sensor_val>
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <previous_value.1628+0x1>
 2d0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <previous_value.1628>
 2d4:	08 95       	ret

000002d6 <Read_Fire>:
	//필터링 해야됨
}

inline void Read_Fire(){
	static uint16_t previous_value = 0;
	fire_sensor_val = lpf(previous_value, ADC, 0.1);
 2d6:	64 b1       	in	r22, 0x04	; 4
 2d8:	75 b1       	in	r23, 0x05	; 5
 2da:	2d ec       	ldi	r18, 0xCD	; 205
 2dc:	3c ec       	ldi	r19, 0xCC	; 204
 2de:	4c ec       	ldi	r20, 0xCC	; 204
 2e0:	5d e3       	ldi	r21, 0x3D	; 61
 2e2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <previous_value.1631>
 2e6:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <previous_value.1631+0x1>
 2ea:	84 df       	rcall	.-248    	; 0x1f4 <lpf>
 2ec:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <fire_sensor_val>
	previous_value = fire_sensor_val;
 2f0:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <fire_sensor_val>
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <previous_value.1631+0x1>
 2fa:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <previous_value.1631>
 2fe:	08 95       	ret

00000300 <Read_PSD>:
	//필터링 해야됨
}
inline void Read_PSD(){
	static uint16_t previous_value = 0;
	psd_sensor_val = lpf(previous_value, ADC, 0.1);
 300:	64 b1       	in	r22, 0x04	; 4
 302:	75 b1       	in	r23, 0x05	; 5
 304:	2d ec       	ldi	r18, 0xCD	; 205
 306:	3c ec       	ldi	r19, 0xCC	; 204
 308:	4c ec       	ldi	r20, 0xCC	; 204
 30a:	5d e3       	ldi	r21, 0x3D	; 61
 30c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <previous_value.1634>
 310:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <previous_value.1634+0x1>
 314:	6f df       	rcall	.-290    	; 0x1f4 <lpf>
 316:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <psd_sensor_val>
	previous_value = psd_sensor_val;
 31a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <psd_sensor_val>
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <previous_value.1634+0x1>
 324:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <previous_value.1634>
 328:	08 95       	ret

0000032a <Read_Pressure>:
	//필터링 해야됨
}

inline void Read_Pressure(){
	static uint16_t previous_value = 0;
	pressure_sensor_val = hpf(previous_value, ADC, 0.6);
 32a:	64 b1       	in	r22, 0x04	; 4
 32c:	75 b1       	in	r23, 0x05	; 5
 32e:	2a e9       	ldi	r18, 0x9A	; 154
 330:	39 e9       	ldi	r19, 0x99	; 153
 332:	49 e1       	ldi	r20, 0x19	; 25
 334:	5f e3       	ldi	r21, 0x3F	; 63
 336:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <previous_value.1637>
 33a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <previous_value.1637+0x1>
 33e:	91 df       	rcall	.-222    	; 0x262 <hpf>
 340:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <pressure_sensor_val>
	previous_value = pressure_sensor_val;
 344:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <pressure_sensor_val>
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <previous_value.1637+0x1>
 34e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <previous_value.1637>
 352:	08 95       	ret

00000354 <Read_Thermister>:
	//필터링 해야됨
}

inline void Read_Thermister(){
	static uint16_t previous_value = 0;
	temp_sensor_val = hpf(previous_value, ADC, 0.5);
 354:	64 b1       	in	r22, 0x04	; 4
 356:	75 b1       	in	r23, 0x05	; 5
 358:	20 e0       	ldi	r18, 0x00	; 0
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	40 e0       	ldi	r20, 0x00	; 0
 35e:	5f e3       	ldi	r21, 0x3F	; 63
 360:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <previous_value.1640>
 364:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <previous_value.1640+0x1>
 368:	7c df       	rcall	.-264    	; 0x262 <hpf>
 36a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <temp_sensor_val>
	previous_value = temp_sensor_val;
 36e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <temp_sensor_val>
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <previous_value.1640+0x1>
 378:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <previous_value.1640>
 37c:	08 95       	ret

0000037e <Read_Shock>:
	//필터링 해야됨
}

inline void Read_Shock(){
	static uint16_t previous_value = 0;
	shk_sensor_val = lpf(previous_value, ADC, 0.1);
 37e:	64 b1       	in	r22, 0x04	; 4
 380:	75 b1       	in	r23, 0x05	; 5
 382:	2d ec       	ldi	r18, 0xCD	; 205
 384:	3c ec       	ldi	r19, 0xCC	; 204
 386:	4c ec       	ldi	r20, 0xCC	; 204
 388:	5d e3       	ldi	r21, 0x3D	; 61
 38a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 38e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 392:	30 df       	rcall	.-416    	; 0x1f4 <lpf>
 394:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <shk_sensor_val>
	previous_value = shk_sensor_val;
 398:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <shk_sensor_val>
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 3a2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 3a6:	08 95       	ret

000003a8 <Reset_sensor_val>:
	//필터링 해야됨
}

inline void Reset_sensor_val(){
	pressure_sensor_val = 0;
 3a8:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <pressure_sensor_val>
	cds_sensor_val	= 0;
 3ac:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <cds_sensor_val>
	temp_sensor_val = 0;	temp_en = 0;
 3b0:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <temp_sensor_val>
 3b4:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <temp_en>
	shk_sensor_val	= 0;	shk_detected = 0;
 3b8:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <shk_sensor_val>
 3bc:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <shk_detected>
	psd_sensor_val	= 0;
 3c0:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <psd_sensor_val>
	fire_sensor_val	= 0;
 3c4:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <fire_sensor_val>
 3c8:	08 95       	ret

000003ca <__subsf3>:
 3ca:	50 58       	subi	r21, 0x80	; 128

000003cc <__addsf3>:
 3cc:	bb 27       	eor	r27, r27
 3ce:	aa 27       	eor	r26, r26
 3d0:	0e d0       	rcall	.+28     	; 0x3ee <__addsf3x>
 3d2:	e0 c0       	rjmp	.+448    	; 0x594 <__fp_round>
 3d4:	d1 d0       	rcall	.+418    	; 0x578 <__fp_pscA>
 3d6:	30 f0       	brcs	.+12     	; 0x3e4 <__addsf3+0x18>
 3d8:	d6 d0       	rcall	.+428    	; 0x586 <__fp_pscB>
 3da:	20 f0       	brcs	.+8      	; 0x3e4 <__addsf3+0x18>
 3dc:	31 f4       	brne	.+12     	; 0x3ea <__addsf3+0x1e>
 3de:	9f 3f       	cpi	r25, 0xFF	; 255
 3e0:	11 f4       	brne	.+4      	; 0x3e6 <__addsf3+0x1a>
 3e2:	1e f4       	brtc	.+6      	; 0x3ea <__addsf3+0x1e>
 3e4:	c6 c0       	rjmp	.+396    	; 0x572 <__fp_nan>
 3e6:	0e f4       	brtc	.+2      	; 0x3ea <__addsf3+0x1e>
 3e8:	e0 95       	com	r30
 3ea:	e7 fb       	bst	r30, 7
 3ec:	bc c0       	rjmp	.+376    	; 0x566 <__fp_inf>

000003ee <__addsf3x>:
 3ee:	e9 2f       	mov	r30, r25
 3f0:	e2 d0       	rcall	.+452    	; 0x5b6 <__fp_split3>
 3f2:	80 f3       	brcs	.-32     	; 0x3d4 <__addsf3+0x8>
 3f4:	ba 17       	cp	r27, r26
 3f6:	62 07       	cpc	r22, r18
 3f8:	73 07       	cpc	r23, r19
 3fa:	84 07       	cpc	r24, r20
 3fc:	95 07       	cpc	r25, r21
 3fe:	18 f0       	brcs	.+6      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 400:	71 f4       	brne	.+28     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 402:	9e f5       	brtc	.+102    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 404:	fa c0       	rjmp	.+500    	; 0x5fa <__fp_zero>
 406:	0e f4       	brtc	.+2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 408:	e0 95       	com	r30
 40a:	0b 2e       	mov	r0, r27
 40c:	ba 2f       	mov	r27, r26
 40e:	a0 2d       	mov	r26, r0
 410:	0b 01       	movw	r0, r22
 412:	b9 01       	movw	r22, r18
 414:	90 01       	movw	r18, r0
 416:	0c 01       	movw	r0, r24
 418:	ca 01       	movw	r24, r20
 41a:	a0 01       	movw	r20, r0
 41c:	11 24       	eor	r1, r1
 41e:	ff 27       	eor	r31, r31
 420:	59 1b       	sub	r21, r25
 422:	99 f0       	breq	.+38     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 424:	59 3f       	cpi	r21, 0xF9	; 249
 426:	50 f4       	brcc	.+20     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 428:	50 3e       	cpi	r21, 0xE0	; 224
 42a:	68 f1       	brcs	.+90     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 42c:	1a 16       	cp	r1, r26
 42e:	f0 40       	sbci	r31, 0x00	; 0
 430:	a2 2f       	mov	r26, r18
 432:	23 2f       	mov	r18, r19
 434:	34 2f       	mov	r19, r20
 436:	44 27       	eor	r20, r20
 438:	58 5f       	subi	r21, 0xF8	; 248
 43a:	f3 cf       	rjmp	.-26     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 43c:	46 95       	lsr	r20
 43e:	37 95       	ror	r19
 440:	27 95       	ror	r18
 442:	a7 95       	ror	r26
 444:	f0 40       	sbci	r31, 0x00	; 0
 446:	53 95       	inc	r21
 448:	c9 f7       	brne	.-14     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 44a:	7e f4       	brtc	.+30     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 44c:	1f 16       	cp	r1, r31
 44e:	ba 0b       	sbc	r27, r26
 450:	62 0b       	sbc	r22, r18
 452:	73 0b       	sbc	r23, r19
 454:	84 0b       	sbc	r24, r20
 456:	ba f0       	brmi	.+46     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 458:	91 50       	subi	r25, 0x01	; 1
 45a:	a1 f0       	breq	.+40     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 45c:	ff 0f       	add	r31, r31
 45e:	bb 1f       	adc	r27, r27
 460:	66 1f       	adc	r22, r22
 462:	77 1f       	adc	r23, r23
 464:	88 1f       	adc	r24, r24
 466:	c2 f7       	brpl	.-16     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 468:	0e c0       	rjmp	.+28     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 46a:	ba 0f       	add	r27, r26
 46c:	62 1f       	adc	r22, r18
 46e:	73 1f       	adc	r23, r19
 470:	84 1f       	adc	r24, r20
 472:	48 f4       	brcc	.+18     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 474:	87 95       	ror	r24
 476:	77 95       	ror	r23
 478:	67 95       	ror	r22
 47a:	b7 95       	ror	r27
 47c:	f7 95       	ror	r31
 47e:	9e 3f       	cpi	r25, 0xFE	; 254
 480:	08 f0       	brcs	.+2      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 482:	b3 cf       	rjmp	.-154    	; 0x3ea <__addsf3+0x1e>
 484:	93 95       	inc	r25
 486:	88 0f       	add	r24, r24
 488:	08 f0       	brcs	.+2      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 48a:	99 27       	eor	r25, r25
 48c:	ee 0f       	add	r30, r30
 48e:	97 95       	ror	r25
 490:	87 95       	ror	r24
 492:	08 95       	ret

00000494 <__fixunssfsi>:
 494:	98 d0       	rcall	.+304    	; 0x5c6 <__fp_splitA>
 496:	88 f0       	brcs	.+34     	; 0x4ba <__fixunssfsi+0x26>
 498:	9f 57       	subi	r25, 0x7F	; 127
 49a:	90 f0       	brcs	.+36     	; 0x4c0 <__fixunssfsi+0x2c>
 49c:	b9 2f       	mov	r27, r25
 49e:	99 27       	eor	r25, r25
 4a0:	b7 51       	subi	r27, 0x17	; 23
 4a2:	a0 f0       	brcs	.+40     	; 0x4cc <__fixunssfsi+0x38>
 4a4:	d1 f0       	breq	.+52     	; 0x4da <__fixunssfsi+0x46>
 4a6:	66 0f       	add	r22, r22
 4a8:	77 1f       	adc	r23, r23
 4aa:	88 1f       	adc	r24, r24
 4ac:	99 1f       	adc	r25, r25
 4ae:	1a f0       	brmi	.+6      	; 0x4b6 <__fixunssfsi+0x22>
 4b0:	ba 95       	dec	r27
 4b2:	c9 f7       	brne	.-14     	; 0x4a6 <__fixunssfsi+0x12>
 4b4:	12 c0       	rjmp	.+36     	; 0x4da <__fixunssfsi+0x46>
 4b6:	b1 30       	cpi	r27, 0x01	; 1
 4b8:	81 f0       	breq	.+32     	; 0x4da <__fixunssfsi+0x46>
 4ba:	9f d0       	rcall	.+318    	; 0x5fa <__fp_zero>
 4bc:	b1 e0       	ldi	r27, 0x01	; 1
 4be:	08 95       	ret
 4c0:	9c c0       	rjmp	.+312    	; 0x5fa <__fp_zero>
 4c2:	67 2f       	mov	r22, r23
 4c4:	78 2f       	mov	r23, r24
 4c6:	88 27       	eor	r24, r24
 4c8:	b8 5f       	subi	r27, 0xF8	; 248
 4ca:	39 f0       	breq	.+14     	; 0x4da <__fixunssfsi+0x46>
 4cc:	b9 3f       	cpi	r27, 0xF9	; 249
 4ce:	cc f3       	brlt	.-14     	; 0x4c2 <__fixunssfsi+0x2e>
 4d0:	86 95       	lsr	r24
 4d2:	77 95       	ror	r23
 4d4:	67 95       	ror	r22
 4d6:	b3 95       	inc	r27
 4d8:	d9 f7       	brne	.-10     	; 0x4d0 <__fixunssfsi+0x3c>
 4da:	3e f4       	brtc	.+14     	; 0x4ea <__fixunssfsi+0x56>
 4dc:	90 95       	com	r25
 4de:	80 95       	com	r24
 4e0:	70 95       	com	r23
 4e2:	61 95       	neg	r22
 4e4:	7f 4f       	sbci	r23, 0xFF	; 255
 4e6:	8f 4f       	sbci	r24, 0xFF	; 255
 4e8:	9f 4f       	sbci	r25, 0xFF	; 255
 4ea:	08 95       	ret

000004ec <__floatunsisf>:
 4ec:	e8 94       	clt
 4ee:	09 c0       	rjmp	.+18     	; 0x502 <__floatsisf+0x12>

000004f0 <__floatsisf>:
 4f0:	97 fb       	bst	r25, 7
 4f2:	3e f4       	brtc	.+14     	; 0x502 <__floatsisf+0x12>
 4f4:	90 95       	com	r25
 4f6:	80 95       	com	r24
 4f8:	70 95       	com	r23
 4fa:	61 95       	neg	r22
 4fc:	7f 4f       	sbci	r23, 0xFF	; 255
 4fe:	8f 4f       	sbci	r24, 0xFF	; 255
 500:	9f 4f       	sbci	r25, 0xFF	; 255
 502:	99 23       	and	r25, r25
 504:	a9 f0       	breq	.+42     	; 0x530 <__floatsisf+0x40>
 506:	f9 2f       	mov	r31, r25
 508:	96 e9       	ldi	r25, 0x96	; 150
 50a:	bb 27       	eor	r27, r27
 50c:	93 95       	inc	r25
 50e:	f6 95       	lsr	r31
 510:	87 95       	ror	r24
 512:	77 95       	ror	r23
 514:	67 95       	ror	r22
 516:	b7 95       	ror	r27
 518:	f1 11       	cpse	r31, r1
 51a:	f8 cf       	rjmp	.-16     	; 0x50c <__floatsisf+0x1c>
 51c:	fa f4       	brpl	.+62     	; 0x55c <__floatsisf+0x6c>
 51e:	bb 0f       	add	r27, r27
 520:	11 f4       	brne	.+4      	; 0x526 <__floatsisf+0x36>
 522:	60 ff       	sbrs	r22, 0
 524:	1b c0       	rjmp	.+54     	; 0x55c <__floatsisf+0x6c>
 526:	6f 5f       	subi	r22, 0xFF	; 255
 528:	7f 4f       	sbci	r23, 0xFF	; 255
 52a:	8f 4f       	sbci	r24, 0xFF	; 255
 52c:	9f 4f       	sbci	r25, 0xFF	; 255
 52e:	16 c0       	rjmp	.+44     	; 0x55c <__floatsisf+0x6c>
 530:	88 23       	and	r24, r24
 532:	11 f0       	breq	.+4      	; 0x538 <__floatsisf+0x48>
 534:	96 e9       	ldi	r25, 0x96	; 150
 536:	11 c0       	rjmp	.+34     	; 0x55a <__floatsisf+0x6a>
 538:	77 23       	and	r23, r23
 53a:	21 f0       	breq	.+8      	; 0x544 <__floatsisf+0x54>
 53c:	9e e8       	ldi	r25, 0x8E	; 142
 53e:	87 2f       	mov	r24, r23
 540:	76 2f       	mov	r23, r22
 542:	05 c0       	rjmp	.+10     	; 0x54e <__floatsisf+0x5e>
 544:	66 23       	and	r22, r22
 546:	71 f0       	breq	.+28     	; 0x564 <__floatsisf+0x74>
 548:	96 e8       	ldi	r25, 0x86	; 134
 54a:	86 2f       	mov	r24, r22
 54c:	70 e0       	ldi	r23, 0x00	; 0
 54e:	60 e0       	ldi	r22, 0x00	; 0
 550:	2a f0       	brmi	.+10     	; 0x55c <__floatsisf+0x6c>
 552:	9a 95       	dec	r25
 554:	66 0f       	add	r22, r22
 556:	77 1f       	adc	r23, r23
 558:	88 1f       	adc	r24, r24
 55a:	da f7       	brpl	.-10     	; 0x552 <__floatsisf+0x62>
 55c:	88 0f       	add	r24, r24
 55e:	96 95       	lsr	r25
 560:	87 95       	ror	r24
 562:	97 f9       	bld	r25, 7
 564:	08 95       	ret

00000566 <__fp_inf>:
 566:	97 f9       	bld	r25, 7
 568:	9f 67       	ori	r25, 0x7F	; 127
 56a:	80 e8       	ldi	r24, 0x80	; 128
 56c:	70 e0       	ldi	r23, 0x00	; 0
 56e:	60 e0       	ldi	r22, 0x00	; 0
 570:	08 95       	ret

00000572 <__fp_nan>:
 572:	9f ef       	ldi	r25, 0xFF	; 255
 574:	80 ec       	ldi	r24, 0xC0	; 192
 576:	08 95       	ret

00000578 <__fp_pscA>:
 578:	00 24       	eor	r0, r0
 57a:	0a 94       	dec	r0
 57c:	16 16       	cp	r1, r22
 57e:	17 06       	cpc	r1, r23
 580:	18 06       	cpc	r1, r24
 582:	09 06       	cpc	r0, r25
 584:	08 95       	ret

00000586 <__fp_pscB>:
 586:	00 24       	eor	r0, r0
 588:	0a 94       	dec	r0
 58a:	12 16       	cp	r1, r18
 58c:	13 06       	cpc	r1, r19
 58e:	14 06       	cpc	r1, r20
 590:	05 06       	cpc	r0, r21
 592:	08 95       	ret

00000594 <__fp_round>:
 594:	09 2e       	mov	r0, r25
 596:	03 94       	inc	r0
 598:	00 0c       	add	r0, r0
 59a:	11 f4       	brne	.+4      	; 0x5a0 <__fp_round+0xc>
 59c:	88 23       	and	r24, r24
 59e:	52 f0       	brmi	.+20     	; 0x5b4 <__fp_round+0x20>
 5a0:	bb 0f       	add	r27, r27
 5a2:	40 f4       	brcc	.+16     	; 0x5b4 <__fp_round+0x20>
 5a4:	bf 2b       	or	r27, r31
 5a6:	11 f4       	brne	.+4      	; 0x5ac <__fp_round+0x18>
 5a8:	60 ff       	sbrs	r22, 0
 5aa:	04 c0       	rjmp	.+8      	; 0x5b4 <__fp_round+0x20>
 5ac:	6f 5f       	subi	r22, 0xFF	; 255
 5ae:	7f 4f       	sbci	r23, 0xFF	; 255
 5b0:	8f 4f       	sbci	r24, 0xFF	; 255
 5b2:	9f 4f       	sbci	r25, 0xFF	; 255
 5b4:	08 95       	ret

000005b6 <__fp_split3>:
 5b6:	57 fd       	sbrc	r21, 7
 5b8:	90 58       	subi	r25, 0x80	; 128
 5ba:	44 0f       	add	r20, r20
 5bc:	55 1f       	adc	r21, r21
 5be:	59 f0       	breq	.+22     	; 0x5d6 <__fp_splitA+0x10>
 5c0:	5f 3f       	cpi	r21, 0xFF	; 255
 5c2:	71 f0       	breq	.+28     	; 0x5e0 <__fp_splitA+0x1a>
 5c4:	47 95       	ror	r20

000005c6 <__fp_splitA>:
 5c6:	88 0f       	add	r24, r24
 5c8:	97 fb       	bst	r25, 7
 5ca:	99 1f       	adc	r25, r25
 5cc:	61 f0       	breq	.+24     	; 0x5e6 <__fp_splitA+0x20>
 5ce:	9f 3f       	cpi	r25, 0xFF	; 255
 5d0:	79 f0       	breq	.+30     	; 0x5f0 <__fp_splitA+0x2a>
 5d2:	87 95       	ror	r24
 5d4:	08 95       	ret
 5d6:	12 16       	cp	r1, r18
 5d8:	13 06       	cpc	r1, r19
 5da:	14 06       	cpc	r1, r20
 5dc:	55 1f       	adc	r21, r21
 5de:	f2 cf       	rjmp	.-28     	; 0x5c4 <__fp_split3+0xe>
 5e0:	46 95       	lsr	r20
 5e2:	f1 df       	rcall	.-30     	; 0x5c6 <__fp_splitA>
 5e4:	08 c0       	rjmp	.+16     	; 0x5f6 <__fp_splitA+0x30>
 5e6:	16 16       	cp	r1, r22
 5e8:	17 06       	cpc	r1, r23
 5ea:	18 06       	cpc	r1, r24
 5ec:	99 1f       	adc	r25, r25
 5ee:	f1 cf       	rjmp	.-30     	; 0x5d2 <__fp_splitA+0xc>
 5f0:	86 95       	lsr	r24
 5f2:	71 05       	cpc	r23, r1
 5f4:	61 05       	cpc	r22, r1
 5f6:	08 94       	sec
 5f8:	08 95       	ret

000005fa <__fp_zero>:
 5fa:	e8 94       	clt

000005fc <__fp_szero>:
 5fc:	bb 27       	eor	r27, r27
 5fe:	66 27       	eor	r22, r22
 600:	77 27       	eor	r23, r23
 602:	cb 01       	movw	r24, r22
 604:	97 f9       	bld	r25, 7
 606:	08 95       	ret

00000608 <__mulsf3>:
 608:	0b d0       	rcall	.+22     	; 0x620 <__mulsf3x>
 60a:	c4 cf       	rjmp	.-120    	; 0x594 <__fp_round>
 60c:	b5 df       	rcall	.-150    	; 0x578 <__fp_pscA>
 60e:	28 f0       	brcs	.+10     	; 0x61a <__mulsf3+0x12>
 610:	ba df       	rcall	.-140    	; 0x586 <__fp_pscB>
 612:	18 f0       	brcs	.+6      	; 0x61a <__mulsf3+0x12>
 614:	95 23       	and	r25, r21
 616:	09 f0       	breq	.+2      	; 0x61a <__mulsf3+0x12>
 618:	a6 cf       	rjmp	.-180    	; 0x566 <__fp_inf>
 61a:	ab cf       	rjmp	.-170    	; 0x572 <__fp_nan>
 61c:	11 24       	eor	r1, r1
 61e:	ee cf       	rjmp	.-36     	; 0x5fc <__fp_szero>

00000620 <__mulsf3x>:
 620:	ca df       	rcall	.-108    	; 0x5b6 <__fp_split3>
 622:	a0 f3       	brcs	.-24     	; 0x60c <__mulsf3+0x4>

00000624 <__mulsf3_pse>:
 624:	95 9f       	mul	r25, r21
 626:	d1 f3       	breq	.-12     	; 0x61c <__mulsf3+0x14>
 628:	95 0f       	add	r25, r21
 62a:	50 e0       	ldi	r21, 0x00	; 0
 62c:	55 1f       	adc	r21, r21
 62e:	62 9f       	mul	r22, r18
 630:	f0 01       	movw	r30, r0
 632:	72 9f       	mul	r23, r18
 634:	bb 27       	eor	r27, r27
 636:	f0 0d       	add	r31, r0
 638:	b1 1d       	adc	r27, r1
 63a:	63 9f       	mul	r22, r19
 63c:	aa 27       	eor	r26, r26
 63e:	f0 0d       	add	r31, r0
 640:	b1 1d       	adc	r27, r1
 642:	aa 1f       	adc	r26, r26
 644:	64 9f       	mul	r22, r20
 646:	66 27       	eor	r22, r22
 648:	b0 0d       	add	r27, r0
 64a:	a1 1d       	adc	r26, r1
 64c:	66 1f       	adc	r22, r22
 64e:	82 9f       	mul	r24, r18
 650:	22 27       	eor	r18, r18
 652:	b0 0d       	add	r27, r0
 654:	a1 1d       	adc	r26, r1
 656:	62 1f       	adc	r22, r18
 658:	73 9f       	mul	r23, r19
 65a:	b0 0d       	add	r27, r0
 65c:	a1 1d       	adc	r26, r1
 65e:	62 1f       	adc	r22, r18
 660:	83 9f       	mul	r24, r19
 662:	a0 0d       	add	r26, r0
 664:	61 1d       	adc	r22, r1
 666:	22 1f       	adc	r18, r18
 668:	74 9f       	mul	r23, r20
 66a:	33 27       	eor	r19, r19
 66c:	a0 0d       	add	r26, r0
 66e:	61 1d       	adc	r22, r1
 670:	23 1f       	adc	r18, r19
 672:	84 9f       	mul	r24, r20
 674:	60 0d       	add	r22, r0
 676:	21 1d       	adc	r18, r1
 678:	82 2f       	mov	r24, r18
 67a:	76 2f       	mov	r23, r22
 67c:	6a 2f       	mov	r22, r26
 67e:	11 24       	eor	r1, r1
 680:	9f 57       	subi	r25, 0x7F	; 127
 682:	50 40       	sbci	r21, 0x00	; 0
 684:	8a f0       	brmi	.+34     	; 0x6a8 <__mulsf3_pse+0x84>
 686:	e1 f0       	breq	.+56     	; 0x6c0 <__mulsf3_pse+0x9c>
 688:	88 23       	and	r24, r24
 68a:	4a f0       	brmi	.+18     	; 0x69e <__mulsf3_pse+0x7a>
 68c:	ee 0f       	add	r30, r30
 68e:	ff 1f       	adc	r31, r31
 690:	bb 1f       	adc	r27, r27
 692:	66 1f       	adc	r22, r22
 694:	77 1f       	adc	r23, r23
 696:	88 1f       	adc	r24, r24
 698:	91 50       	subi	r25, 0x01	; 1
 69a:	50 40       	sbci	r21, 0x00	; 0
 69c:	a9 f7       	brne	.-22     	; 0x688 <__mulsf3_pse+0x64>
 69e:	9e 3f       	cpi	r25, 0xFE	; 254
 6a0:	51 05       	cpc	r21, r1
 6a2:	70 f0       	brcs	.+28     	; 0x6c0 <__mulsf3_pse+0x9c>
 6a4:	60 cf       	rjmp	.-320    	; 0x566 <__fp_inf>
 6a6:	aa cf       	rjmp	.-172    	; 0x5fc <__fp_szero>
 6a8:	5f 3f       	cpi	r21, 0xFF	; 255
 6aa:	ec f3       	brlt	.-6      	; 0x6a6 <__mulsf3_pse+0x82>
 6ac:	98 3e       	cpi	r25, 0xE8	; 232
 6ae:	dc f3       	brlt	.-10     	; 0x6a6 <__mulsf3_pse+0x82>
 6b0:	86 95       	lsr	r24
 6b2:	77 95       	ror	r23
 6b4:	67 95       	ror	r22
 6b6:	b7 95       	ror	r27
 6b8:	f7 95       	ror	r31
 6ba:	e7 95       	ror	r30
 6bc:	9f 5f       	subi	r25, 0xFF	; 255
 6be:	c1 f7       	brne	.-16     	; 0x6b0 <__mulsf3_pse+0x8c>
 6c0:	fe 2b       	or	r31, r30
 6c2:	88 0f       	add	r24, r24
 6c4:	91 1d       	adc	r25, r1
 6c6:	96 95       	lsr	r25
 6c8:	87 95       	ror	r24
 6ca:	97 f9       	bld	r25, 7
 6cc:	08 95       	ret

000006ce <_exit>:
 6ce:	f8 94       	cli

000006d0 <__stop_program>:
 6d0:	ff cf       	rjmp	.-2      	; 0x6d0 <__stop_program>
