
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000282  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  00800100  00800100  00000282  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000282  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dcc  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ad  00000000  00000000  00001144  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000513  00000000  00000000  00001af1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  00002004  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ad  00000000  00000000  0000213c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ff  00000000  00000000  000027e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000029e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	57 c0       	rjmp	.+174    	; 0xf0 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	39 c0       	rjmp	.+114    	; 0xc8 <__vector_21>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e0       	ldi	r30, 0x0E	; 14
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 31       	cpi	r26, 0x1B	; 27
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	69 d0       	rcall	.+210    	; 0x196 <main>
  c4:	a2 c0       	rjmp	.+324    	; 0x20a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_21>:
		
		// ADC 채널 6 (불꽃 감지 센서) 값 읽기
		fire_sensor_value = read_adc_channel(6);
		
		// ADC 채널 7 (PSD 센서) 값 읽기
		psd_sensor_value = read_adc_channel(7);
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
  d6:	84 b1       	in	r24, 0x04	; 4
  d8:	95 b1       	in	r25, 0x05	; 5
  da:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <adc_value+0x1>
  de:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <adc_value>
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <__vector_16>:
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	0b b6       	in	r0, 0x3b	; 59
  fc:	0f 92       	push	r0
  fe:	8f 93       	push	r24
 100:	9f 93       	push	r25
 102:	ef 93       	push	r30
 104:	ff 93       	push	r31
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	00 d0       	rcall	.+0      	; 0x10c <__vector_16+0x1c>
 10c:	00 d0       	rcall	.+0      	; 0x10e <__vector_16+0x1e>
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
 112:	84 e0       	ldi	r24, 0x04	; 4
 114:	89 83       	std	Y+1, r24	; 0x01
 116:	85 e0       	ldi	r24, 0x05	; 5
 118:	8a 83       	std	Y+2, r24	; 0x02
 11a:	86 e0       	ldi	r24, 0x06	; 6
 11c:	8b 83       	std	Y+3, r24	; 0x03
 11e:	87 e0       	ldi	r24, 0x07	; 7
 120:	8c 83       	std	Y+4, r24	; 0x04
 122:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 126:	e1 e0       	ldi	r30, 0x01	; 1
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	ec 0f       	add	r30, r28
 12c:	fd 1f       	adc	r31, r29
 12e:	e8 0f       	add	r30, r24
 130:	f1 1d       	adc	r31, r1
 132:	80 81       	ld	r24, Z
 134:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <current_channel>
 138:	97 b1       	in	r25, 0x07	; 7
 13a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <current_channel>
 13e:	98 7f       	andi	r25, 0xF8	; 248
 140:	87 70       	andi	r24, 0x07	; 7
 142:	89 2b       	or	r24, r25
 144:	87 b9       	out	0x07, r24	; 7
 146:	86 b1       	in	r24, 0x06	; 6
 148:	80 64       	ori	r24, 0x40	; 64
 14a:	86 b9       	out	0x06, r24	; 6
 14c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 150:	8f 5f       	subi	r24, 0xFF	; 255
 152:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 156:	84 30       	cpi	r24, 0x04	; 4
 158:	10 f0       	brcs	.+4      	; 0x15e <__vector_16+0x6e>
 15a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 15e:	0f 90       	pop	r0
 160:	0f 90       	pop	r0
 162:	0f 90       	pop	r0
 164:	0f 90       	pop	r0
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	ff 91       	pop	r31
 16c:	ef 91       	pop	r30
 16e:	9f 91       	pop	r25
 170:	8f 91       	pop	r24
 172:	0f 90       	pop	r0
 174:	0b be       	out	0x3b, r0	; 59
 176:	0f 90       	pop	r0
 178:	0f be       	out	0x3f, r0	; 63
 17a:	0f 90       	pop	r0
 17c:	1f 90       	pop	r1
 17e:	18 95       	reti

00000180 <adc_init>:
 180:	80 e4       	ldi	r24, 0x40	; 64
 182:	87 b9       	out	0x07, r24	; 7
 184:	8f e8       	ldi	r24, 0x8F	; 143
 186:	86 b9       	out	0x06, r24	; 6
 188:	08 95       	ret

0000018a <timer0_init>:
		
	}
}

void timer0_init(void) {
	TCCR0 = (1 << CS02) | (1 << CS00); // 분주비 1024
 18a:	85 e0       	ldi	r24, 0x05	; 5
 18c:	83 bf       	out	0x33, r24	; 51
	TIMSK = (1 << TOIE0); // 타이머0 오버플로우 인터럽트 허용
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	87 bf       	out	0x37, r24	; 55
	TCNT0 = 0; // 타이머 카운터 초기화
 192:	12 be       	out	0x32, r1	; 50
 194:	08 95       	ret

00000196 <main>:

#if DEBUG_ == 0
//현준이 일하는 곳 맨 위에 #define DEBUG_ 부분을 0으로 바꾸기
int main(void){
	
	adc_init(); // ADC 초기화
 196:	f4 df       	rcall	.-24     	; 0x180 <adc_init>
	timer0_init(); // 타이머0 초기화
 198:	f8 df       	rcall	.-16     	; 0x18a <timer0_init>
 19a:	78 94       	sei
	sei(); // 전역 인터럽트 허용
 19c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <current_channel>

	while (1) {
		// ADC 채널 값을 읽고 필요한 변수에 저장
		switch (current_channel) {
 1a0:	85 30       	cpi	r24, 0x05	; 5
 1a2:	c1 f0       	breq	.+48     	; 0x1d4 <main+0x3e>
 1a4:	28 f4       	brcc	.+10     	; 0x1b0 <main+0x1a>
 1a6:	83 30       	cpi	r24, 0x03	; 3
 1a8:	41 f0       	breq	.+16     	; 0x1ba <main+0x24>
 1aa:	84 30       	cpi	r24, 0x04	; 4
 1ac:	61 f0       	breq	.+24     	; 0x1c6 <main+0x30>
 1ae:	26 c0       	rjmp	.+76     	; 0x1fc <main+0x66>
 1b0:	86 30       	cpi	r24, 0x06	; 6
 1b2:	b9 f0       	breq	.+46     	; 0x1e2 <main+0x4c>
 1b4:	87 30       	cpi	r24, 0x07	; 7
 1b6:	e1 f0       	breq	.+56     	; 0x1f0 <main+0x5a>
 1b8:	21 c0       	rjmp	.+66     	; 0x1fc <main+0x66>
 1ba:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <adc_value>
			case 0x03:
			temp_sensor_val = adc_value;
 1be:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <adc_value+0x1>
 1c2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <temp_sensor_val>
 1c6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <adc_value>
			case 0x04:
			pressure_sensor_val = adc_value;
 1ca:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <adc_value+0x1>
 1ce:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <pressure_sensor_val>
 1d2:	14 c0       	rjmp	.+40     	; 0x1fc <main+0x66>
			break;
 1d4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <adc_value>
			case 0x05:
			shk_sensor_val = adc_value;
 1d8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <adc_value+0x1>
 1dc:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <shk_sensor_val>
 1e0:	0d c0       	rjmp	.+26     	; 0x1fc <main+0x66>
			break;
 1e2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <adc_value>
			case 0x06:
			fire_sensor_val = adc_value;
 1e6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <adc_value+0x1>
 1ea:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <fire_sensor_val>
 1ee:	06 c0       	rjmp	.+12     	; 0x1fc <main+0x66>
			break;
 1f0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <adc_value>
			case 0x07:
			psd_sensor_val = adc_value;
 1f4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <adc_value+0x1>
 1f8:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <psd_sensor_val>
 1fc:	8f e3       	ldi	r24, 0x3F	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fe:	9c e9       	ldi	r25, 0x9C	; 156
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <main+0x6a>
 204:	00 c0       	rjmp	.+0      	; 0x206 <main+0x70>
 206:	00 00       	nop
 208:	c9 cf       	rjmp	.-110    	; 0x19c <main+0x6>

0000020a <_exit>:
 20a:	f8 94       	cli

0000020c <__stop_program>:
 20c:	ff cf       	rjmp	.-2      	; 0x20c <__stop_program>
