
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000003cc  00000460  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800102  00800102  00000462  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000462  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000494  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f03  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009c9  00000000  00000000  0000147b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000067c  00000000  00000000  00001e44  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  000024c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000065c  00000000  00000000  00002604  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ea  00000000  00000000  00002c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002e4a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	43 c0       	rjmp	.+134    	; 0xc8 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ec       	ldi	r30, 0xCC	; 204
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 32       	cpi	r26, 0x2A	; 42
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	40 d1       	rcall	.+640    	; 0x344 <main>
  c4:	81 c1       	rjmp	.+770    	; 0x3c8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_16>:

inline void Servo_Set_Target(unsigned short val){
	Servo_target = val;
	
	if(Servo_pos >= Servo_target) Servo_step = -1;
	else Servo_step = 1;
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <key.1791>
  d8:	81 11       	cpse	r24, r1
  da:	03 c0       	rjmp	.+6      	; 0xe2 <__vector_16+0x1a>
  dc:	85 b3       	in	r24, 0x15	; 21
  de:	15 ba       	out	0x15, r1	; 21
  e0:	03 c0       	rjmp	.+6      	; 0xe8 <__vector_16+0x20>
  e2:	85 b3       	in	r24, 0x15	; 21
  e4:	80 68       	ori	r24, 0x80	; 128
  e6:	85 bb       	out	0x15, r24	; 21
  e8:	8f 91       	pop	r24
  ea:	0f 90       	pop	r0
  ec:	0f be       	out	0x3f, r0	; 63
  ee:	0f 90       	pop	r0
  f0:	1f 90       	pop	r1
  f2:	18 95       	reti

000000f4 <bt_init>:
  f4:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
  f8:	88 e1       	ldi	r24, 0x18	; 24
  fa:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
  fe:	86 e0       	ldi	r24, 0x06	; 6
 100:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
 104:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 108:	87 e6       	ldi	r24, 0x67	; 103
 10a:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 10e:	08 95       	ret

00000110 <timer_setup>:
 110:	82 e8       	ldi	r24, 0x82	; 130
 112:	8f bd       	out	0x2f, r24	; 47
 114:	8b e1       	ldi	r24, 0x1B	; 27
 116:	8e bd       	out	0x2e, r24	; 46
 118:	87 e8       	ldi	r24, 0x87	; 135
 11a:	93 e1       	ldi	r25, 0x13	; 19
 11c:	97 bd       	out	0x27, r25	; 39
 11e:	86 bd       	out	0x26, r24	; 38
 120:	08 95       	ret

00000122 <port_setup>:
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	8a bb       	out	0x1a, r24	; 26
 126:	11 ba       	out	0x11, r1	; 17
 128:	87 bb       	out	0x17, r24	; 23
 12a:	80 e8       	ldi	r24, 0x80	; 128
 12c:	84 bb       	out	0x14, r24	; 20
 12e:	08 95       	ret

00000130 <BT_send>:
 130:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 134:	95 ff       	sbrs	r25, 5
 136:	fc cf       	rjmp	.-8      	; 0x130 <BT_send>
 138:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 13c:	08 95       	ret

0000013e <BT_Receive>:
 13e:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 142:	88 23       	and	r24, r24
 144:	0c f0       	brlt	.+2      	; 0x148 <BT_Receive+0xa>
 146:	86 c0       	rjmp	.+268    	; 0x254 <BT_Receive+0x116>
 148:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 14c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <rdata>
 150:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 154:	82 30       	cpi	r24, 0x02	; 2
 156:	a9 f0       	breq	.+42     	; 0x182 <BT_Receive+0x44>
 158:	83 30       	cpi	r24, 0x03	; 3
 15a:	a9 f1       	breq	.+106    	; 0x1c6 <BT_Receive+0x88>
 15c:	81 30       	cpi	r24, 0x01	; 1
 15e:	09 f0       	breq	.+2      	; 0x162 <BT_Receive+0x24>
 160:	53 c0       	rjmp	.+166    	; 0x208 <BT_Receive+0xca>
 162:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <rdata>
 166:	8e 32       	cpi	r24, 0x2E	; 46
 168:	39 f4       	brne	.+14     	; 0x178 <BT_Receive+0x3a>
 16a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
 16e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <rdata>
 172:	de df       	rcall	.-68     	; 0x130 <BT_send>
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	08 95       	ret
 178:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <rdata>
 17c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <marble>
 180:	43 c0       	rjmp	.+134    	; 0x208 <BT_Receive+0xca>
 182:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <rdata>
 186:	8e 32       	cpi	r24, 0x2E	; 46
 188:	39 f4       	brne	.+14     	; 0x198 <BT_Receive+0x5a>
 18a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
 18e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <rdata>
 192:	ce df       	rcall	.-100    	; 0x130 <BT_send>
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	08 95       	ret
 198:	ea e0       	ldi	r30, 0x0A	; 10
 19a:	f1 e0       	ldi	r31, 0x01	; 1
 19c:	81 81       	ldd	r24, Z+1	; 0x01
 19e:	92 81       	ldd	r25, Z+2	; 0x02
 1a0:	9c 01       	movw	r18, r24
 1a2:	22 0f       	add	r18, r18
 1a4:	33 1f       	adc	r19, r19
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	82 0f       	add	r24, r18
 1b4:	93 1f       	adc	r25, r19
 1b6:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <rdata>
 1ba:	82 0f       	add	r24, r18
 1bc:	91 1d       	adc	r25, r1
 1be:	c0 97       	sbiw	r24, 0x30	; 48
 1c0:	92 83       	std	Z+2, r25	; 0x02
 1c2:	81 83       	std	Z+1, r24	; 0x01
 1c4:	21 c0       	rjmp	.+66     	; 0x208 <BT_Receive+0xca>
 1c6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <rdata>
 1ca:	8e 32       	cpi	r24, 0x2E	; 46
 1cc:	39 f4       	brne	.+14     	; 0x1dc <BT_Receive+0x9e>
 1ce:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
 1d2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <rdata>
 1d6:	ac df       	rcall	.-168    	; 0x130 <BT_send>
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	08 95       	ret
 1dc:	ea e0       	ldi	r30, 0x0A	; 10
 1de:	f1 e0       	ldi	r31, 0x01	; 1
 1e0:	83 81       	ldd	r24, Z+3	; 0x03
 1e2:	94 81       	ldd	r25, Z+4	; 0x04
 1e4:	9c 01       	movw	r18, r24
 1e6:	22 0f       	add	r18, r18
 1e8:	33 1f       	adc	r19, r19
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	82 0f       	add	r24, r18
 1f8:	93 1f       	adc	r25, r19
 1fa:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <rdata>
 1fe:	82 0f       	add	r24, r18
 200:	91 1d       	adc	r25, r1
 202:	c0 97       	sbiw	r24, 0x30	; 48
 204:	94 83       	std	Z+4, r25	; 0x04
 206:	83 83       	std	Z+3, r24	; 0x03
 208:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <rdata>
 20c:	83 32       	cpi	r24, 0x23	; 35
 20e:	31 f4       	brne	.+12     	; 0x21c <BT_Receive+0xde>
 210:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <marble>
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 21a:	17 c0       	rjmp	.+46     	; 0x24a <BT_Receive+0x10c>
 21c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <rdata>
 220:	81 32       	cpi	r24, 0x21	; 33
 222:	41 f4       	brne	.+16     	; 0x234 <BT_Receive+0xf6>
 224:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <marble+0x2>
 228:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <marble+0x1>
 22c:	82 e0       	ldi	r24, 0x02	; 2
 22e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 232:	0b c0       	rjmp	.+22     	; 0x24a <BT_Receive+0x10c>
 234:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <rdata>
 238:	8a 32       	cpi	r24, 0x2A	; 42
 23a:	39 f4       	brne	.+14     	; 0x24a <BT_Receive+0x10c>
 23c:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <marble+0x4>
 240:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <marble+0x3>
 244:	83 e0       	ldi	r24, 0x03	; 3
 246:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 24a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <rdata>
 24e:	70 df       	rcall	.-288    	; 0x130 <BT_send>
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	08 95       	ret
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	08 95       	ret

00000258 <Servo_Quick_Move>:
 258:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <Servo_pos+0x1>
 25c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <Servo_pos>
 260:	9b bd       	out	0x2b, r25	; 43
 262:	8a bd       	out	0x2a, r24	; 42
 264:	08 95       	ret

00000266 <Servo_Act>:
}

void Servo_Act(){
	//static unsigned short tmp = 0;
	
	unsigned short tmp = 0;
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	90 e0       	ldi	r25, 0x00	; 0
	
	while((Servo_pos != Servo_target) && Action_Allowed){
 26a:	1c c0       	rjmp	.+56     	; 0x2a4 <Servo_Act+0x3e>
		if(++tmp == Servo_increment_threshold){
 26c:	01 96       	adiw	r24, 0x01	; 1
 26e:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <Servo_increment_threshold>
 272:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <Servo_increment_threshold+0x1>
 276:	84 17       	cp	r24, r20
 278:	95 07       	cpc	r25, r21
 27a:	71 f4       	brne	.+28     	; 0x298 <Servo_Act+0x32>
			Servo_pos += Servo_step;
 27c:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <Servo_step>
 280:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <Servo_step+0x1>
 284:	28 0f       	add	r18, r24
 286:	39 1f       	adc	r19, r25
 288:	30 93 14 01 	sts	0x0114, r19	; 0x800114 <Servo_pos+0x1>
 28c:	20 93 13 01 	sts	0x0113, r18	; 0x800113 <Servo_pos>
			OCR1A = Servo_pos;
 290:	3b bd       	out	0x2b, r19	; 43
 292:	2a bd       	out	0x2a, r18	; 42
			tmp = 0;
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 298:	ef e8       	ldi	r30, 0x8F	; 143
 29a:	f1 e0       	ldi	r31, 0x01	; 1
 29c:	31 97       	sbiw	r30, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <Servo_Act+0x36>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <Servo_Act+0x3c>
 2a2:	00 00       	nop
void Servo_Act(){
	//static unsigned short tmp = 0;
	
	unsigned short tmp = 0;
	
	while((Servo_pos != Servo_target) && Action_Allowed){
 2a4:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <Servo_pos>
 2a8:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <Servo_pos+0x1>
 2ac:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <Servo_target>
 2b0:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <Servo_target+0x1>
 2b4:	24 17       	cp	r18, r20
 2b6:	35 07       	cpc	r19, r21
 2b8:	21 f0       	breq	.+8      	; 0x2c2 <Servo_Act+0x5c>
 2ba:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2be:	41 11       	cpse	r20, r1
 2c0:	d5 cf       	rjmp	.-86     	; 0x26c <Servo_Act+0x6>
 2c2:	08 95       	ret

000002c4 <Servo_Go_Home>:
	Servo_pos = val;
	OCR1A = Servo_pos;
}

inline void Servo_Set_Target(unsigned short val){
	Servo_target = val;
 2c4:	8c e6       	ldi	r24, 0x6C	; 108
 2c6:	92 e0       	ldi	r25, 0x02	; 2
 2c8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <Servo_target+0x1>
 2cc:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <Servo_target>
	
	if(Servo_pos >= Servo_target) Servo_step = -1;
 2d0:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <Servo_pos>
 2d4:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <Servo_pos+0x1>
 2d8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <Servo_target>
 2dc:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <Servo_target+0x1>
 2e0:	28 17       	cp	r18, r24
 2e2:	39 07       	cpc	r19, r25
 2e4:	38 f0       	brcs	.+14     	; 0x2f4 <Servo_Go_Home+0x30>
 2e6:	8f ef       	ldi	r24, 0xFF	; 255
 2e8:	9f ef       	ldi	r25, 0xFF	; 255
 2ea:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <Servo_step+0x1>
 2ee:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <Servo_step>
 2f2:	06 c0       	rjmp	.+12     	; 0x300 <Servo_Go_Home+0x3c>
	else Servo_step = 1;
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <Servo_step+0x1>
 2fc:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <Servo_step>
}

void Servo_Go_Home(){
	Servo_Set_Target(SERVO_HOME);
	Servo_Act();
 300:	b2 cf       	rjmp	.-156    	; 0x266 <Servo_Act>
 302:	08 95       	ret

00000304 <Servo_Go_Box>:
	Servo_pos = val;
	OCR1A = Servo_pos;
}

inline void Servo_Set_Target(unsigned short val){
	Servo_target = val;
 304:	82 e8       	ldi	r24, 0x82	; 130
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <Servo_target+0x1>
 30c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <Servo_target>
	
	if(Servo_pos >= Servo_target) Servo_step = -1;
 310:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <Servo_pos>
 314:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <Servo_pos+0x1>
 318:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <Servo_target>
 31c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <Servo_target+0x1>
 320:	28 17       	cp	r18, r24
 322:	39 07       	cpc	r19, r25
 324:	38 f0       	brcs	.+14     	; 0x334 <Servo_Go_Box+0x30>
 326:	8f ef       	ldi	r24, 0xFF	; 255
 328:	9f ef       	ldi	r25, 0xFF	; 255
 32a:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <Servo_step+0x1>
 32e:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <Servo_step>
 332:	06 c0       	rjmp	.+12     	; 0x340 <Servo_Go_Box+0x3c>
	else Servo_step = 1;
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <Servo_step+0x1>
 33c:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <Servo_step>
	Servo_Set_Target(SERVO_HOME);
	Servo_Act();
}
void Servo_Go_Box(){
	Servo_Set_Target(SERVO_BOX);
	Servo_Act();
 340:	92 cf       	rjmp	.-220    	; 0x266 <Servo_Act>
 342:	08 95       	ret

00000344 <main>:
#ifdef DEBUG_

int main(void){
	//debug
	
	cli();
 344:	f8 94       	cli
	port_setup();
 346:	ed de       	rcall	.-550    	; 0x122 <port_setup>
	timer_setup();
 348:	e3 de       	rcall	.-570    	; 0x110 <timer_setup>
	bt_init();
 34a:	d4 de       	rcall	.-600    	; 0xf4 <bt_init>
 34c:	78 94       	sei
	sei();
 34e:	85 b3       	in	r24, 0x15	; 21
	PORTC &= (0 << ElectroMagnet);
	//PORTC = 0x7F;
}

inline void ElectroMagnet_Off(){
	PORTC |=  (1 << ElectroMagnet);
 350:	80 68       	ori	r24, 0x80	; 128
 352:	85 bb       	out	0x15, r24	; 21
 354:	84 e1       	ldi	r24, 0x14	; 20
	bt_init();
	sei();
	
	ElectroMagnet_Off();
	
	Servo_increment_threshold = 20;
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <Servo_increment_threshold+0x1>
 35c:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <Servo_increment_threshold>
 360:	81 e0       	ldi	r24, 0x01	; 1
	Action_Allowed = 0x01;
 362:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	Servo_Quick_Move(375);
 366:	87 e7       	ldi	r24, 0x77	; 119
 368:	91 e0       	ldi	r25, 0x01	; 1
 36a:	76 df       	rcall	.-276    	; 0x258 <Servo_Quick_Move>
 36c:	8f e3       	ldi	r24, 0x3F	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 36e:	9c e9       	ldi	r25, 0x9C	; 156
 370:	01 97       	sbiw	r24, 0x01	; 1
 372:	f1 f7       	brne	.-4      	; 0x370 <main+0x2c>
 374:	00 c0       	rjmp	.+0      	; 0x376 <main+0x32>
 376:	00 00       	nop
	
	while(1){
		_delay_ms(10);
		
#ifndef USE_BLUETOOTH_INTERRUPT
		if(BT_Receive()){
 378:	e2 de       	rcall	.-572    	; 0x13e <BT_Receive>
 37a:	88 23       	and	r24, r24
 37c:	a9 f0       	breq	.+42     	; 0x3a8 <main+0x64>
 37e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <marble+0x1>
			if(marble.posX == 123) Servo_Quick_Move(200);
 382:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <marble+0x2>
 386:	8b 37       	cpi	r24, 0x7B	; 123
 388:	91 05       	cpc	r25, r1
 38a:	21 f4       	brne	.+8      	; 0x394 <main+0x50>
 38c:	88 ec       	ldi	r24, 0xC8	; 200
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	63 df       	rcall	.-314    	; 0x258 <Servo_Quick_Move>
 392:	0a c0       	rjmp	.+20     	; 0x3a8 <main+0x64>
			else if(marble.posX == 321) Servo_Quick_Move(500);
 394:	81 34       	cpi	r24, 0x41	; 65
 396:	91 40       	sbci	r25, 0x01	; 1
 398:	21 f4       	brne	.+8      	; 0x3a2 <main+0x5e>
 39a:	84 ef       	ldi	r24, 0xF4	; 244
 39c:	91 e0       	ldi	r25, 0x01	; 1
 39e:	5c df       	rcall	.-328    	; 0x258 <Servo_Quick_Move>
 3a0:	03 c0       	rjmp	.+6      	; 0x3a8 <main+0x64>
			else Servo_Quick_Move(375);
 3a2:	87 e7       	ldi	r24, 0x77	; 119
 3a4:	91 e0       	ldi	r25, 0x01	; 1
 3a6:	58 df       	rcall	.-336    	; 0x258 <Servo_Quick_Move>
 3a8:	80 b3       	in	r24, 0x10	; 16
		}
#endif
		
		switch(PIND & 0x03){
 3aa:	83 70       	andi	r24, 0x03	; 3
 3ac:	81 30       	cpi	r24, 0x01	; 1
 3ae:	19 f0       	breq	.+6      	; 0x3b6 <main+0x72>
 3b0:	82 30       	cpi	r24, 0x02	; 2
 3b2:	29 f0       	breq	.+10     	; 0x3be <main+0x7a>
 3b4:	db cf       	rjmp	.-74     	; 0x36c <main+0x28>
	DDRC = (1<<ElectroMagnet);
	//DDRC = 0xFF;
}

inline void ElectroMagnet_On(){
	PORTC &= (0 << ElectroMagnet);
 3b6:	85 b3       	in	r24, 0x15	; 21
 3b8:	15 ba       	out	0x15, r1	; 21
#endif
		
		switch(PIND & 0x03){
			case 0x01:
				ElectroMagnet_On();
				Servo_Go_Home();
 3ba:	84 df       	rcall	.-248    	; 0x2c4 <Servo_Go_Home>
 3bc:	d7 cf       	rjmp	.-82     	; 0x36c <main+0x28>
			break;
 3be:	85 b3       	in	r24, 0x15	; 21
	PORTC &= (0 << ElectroMagnet);
	//PORTC = 0x7F;
}

inline void ElectroMagnet_Off(){
	PORTC |=  (1 << ElectroMagnet);
 3c0:	80 68       	ori	r24, 0x80	; 128
 3c2:	85 bb       	out	0x15, r24	; 21
 3c4:	9f df       	rcall	.-194    	; 0x304 <Servo_Go_Box>
				Servo_Go_Home();
			break;
			
			case 0x02:
				ElectroMagnet_Off();
				Servo_Go_Box();
 3c6:	d2 cf       	rjmp	.-92     	; 0x36c <main+0x28>

000003c8 <_exit>:
 3c8:	f8 94       	cli

000003ca <__stop_program>:
			break;
 3ca:	ff cf       	rjmp	.-2      	; 0x3ca <__stop_program>
