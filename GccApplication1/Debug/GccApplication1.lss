
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000df0  00000e84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000df0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  00800102  00800102  00000e86  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e86  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000eb8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00000ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000191b  00000000  00000000  000010a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cfd  00000000  00000000  000029bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dfd  00000000  00000000  000036bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000454  00000000  00000000  000044bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000809  00000000  00000000  00004910  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000907  00000000  00000000  00005119  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00005a20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	86 c0       	rjmp	.+268    	; 0x10e <__ctors_end>
   2:	00 00       	nop
   4:	a0 c1       	rjmp	.+832    	; 0x346 <__vector_1>
   6:	00 00       	nop
   8:	94 c1       	rjmp	.+808    	; 0x332 <__vector_2>
   a:	00 00       	nop
   c:	9d c0       	rjmp	.+314    	; 0x148 <__bad_interrupt>
   e:	00 00       	nop
  10:	9b c0       	rjmp	.+310    	; 0x148 <__bad_interrupt>
  12:	00 00       	nop
  14:	99 c0       	rjmp	.+306    	; 0x148 <__bad_interrupt>
  16:	00 00       	nop
  18:	97 c0       	rjmp	.+302    	; 0x148 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	95 c0       	rjmp	.+298    	; 0x148 <__bad_interrupt>
  1e:	00 00       	nop
  20:	93 c0       	rjmp	.+294    	; 0x148 <__bad_interrupt>
  22:	00 00       	nop
  24:	91 c0       	rjmp	.+290    	; 0x148 <__bad_interrupt>
  26:	00 00       	nop
  28:	8f c0       	rjmp	.+286    	; 0x148 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	8d c0       	rjmp	.+282    	; 0x148 <__bad_interrupt>
  2e:	00 00       	nop
  30:	8b c0       	rjmp	.+278    	; 0x148 <__bad_interrupt>
  32:	00 00       	nop
  34:	89 c0       	rjmp	.+274    	; 0x148 <__bad_interrupt>
  36:	00 00       	nop
  38:	87 c0       	rjmp	.+270    	; 0x148 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	85 c0       	rjmp	.+266    	; 0x148 <__bad_interrupt>
  3e:	00 00       	nop
  40:	2f c2       	rjmp	.+1118   	; 0x4a0 <__vector_16>
  42:	00 00       	nop
  44:	81 c0       	rjmp	.+258    	; 0x148 <__bad_interrupt>
  46:	00 00       	nop
  48:	7f c0       	rjmp	.+254    	; 0x148 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	7d c0       	rjmp	.+250    	; 0x148 <__bad_interrupt>
  4e:	00 00       	nop
  50:	7b c0       	rjmp	.+246    	; 0x148 <__bad_interrupt>
  52:	00 00       	nop
  54:	79 c0       	rjmp	.+242    	; 0x148 <__bad_interrupt>
  56:	00 00       	nop
  58:	77 c0       	rjmp	.+238    	; 0x148 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	75 c0       	rjmp	.+234    	; 0x148 <__bad_interrupt>
  5e:	00 00       	nop
  60:	73 c0       	rjmp	.+230    	; 0x148 <__bad_interrupt>
  62:	00 00       	nop
  64:	71 c0       	rjmp	.+226    	; 0x148 <__bad_interrupt>
  66:	00 00       	nop
  68:	6f c0       	rjmp	.+222    	; 0x148 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	6d c0       	rjmp	.+218    	; 0x148 <__bad_interrupt>
  6e:	00 00       	nop
  70:	6b c0       	rjmp	.+214    	; 0x148 <__bad_interrupt>
  72:	00 00       	nop
  74:	69 c0       	rjmp	.+210    	; 0x148 <__bad_interrupt>
  76:	00 00       	nop
  78:	67 c0       	rjmp	.+206    	; 0x148 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	65 c0       	rjmp	.+202    	; 0x148 <__bad_interrupt>
  7e:	00 00       	nop
  80:	63 c0       	rjmp	.+198    	; 0x148 <__bad_interrupt>
  82:	00 00       	nop
  84:	61 c0       	rjmp	.+194    	; 0x148 <__bad_interrupt>
  86:	00 00       	nop
  88:	5f c0       	rjmp	.+190    	; 0x148 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	08 00       	.word	0x0008	; ????
  8e:	00 00       	nop
  90:	be 92       	st	-X, r11
  92:	24 49       	sbci	r18, 0x94	; 148
  94:	12 3e       	cpi	r17, 0xE2	; 226
  96:	ab aa       	std	Y+51, r10	; 0x33
  98:	aa 2a       	or	r10, r26
  9a:	be cd       	rjmp	.-1156   	; 0xfffffc18 <__eeprom_end+0xff7efc18>
  9c:	cc cc       	rjmp	.-1640   	; 0xfffffa36 <__eeprom_end+0xff7efa36>
  9e:	4c 3e       	cpi	r20, 0xEC	; 236
  a0:	00 00       	nop
  a2:	00 80       	ld	r0, Z
  a4:	be ab       	std	Y+54, r27	; 0x36
  a6:	aa aa       	std	Y+50, r10	; 0x32
  a8:	aa 3e       	cpi	r26, 0xEA	; 234
  aa:	00 00       	nop
  ac:	00 00       	nop
  ae:	bf 00       	.word	0x00bf	; ????
  b0:	00 00       	nop
  b2:	80 3f       	cpi	r24, 0xF0	; 240
  b4:	00 00       	nop
  b6:	00 00       	nop
  b8:	00 08       	sbc	r0, r0
  ba:	41 78       	andi	r20, 0x81	; 129
  bc:	d3 bb       	out	0x13, r29	; 19
  be:	43 87       	std	Z+11, r20	; 0x0b
  c0:	d1 13       	cpse	r29, r17
  c2:	3d 19       	sub	r19, r13
  c4:	0e 3c       	cpi	r16, 0xCE	; 206
  c6:	c3 bd       	out	0x23, r28	; 35
  c8:	42 82       	std	Z+2, r4	; 0x02
  ca:	ad 2b       	or	r26, r29
  cc:	3e 68       	ori	r19, 0x8E	; 142
  ce:	ec 82       	std	Y+4, r14	; 0x04
  d0:	76 be       	out	0x36, r7	; 54
  d2:	d9 8f       	std	Y+25, r29	; 0x19
  d4:	e1 a9       	ldd	r30, Z+49	; 0x31
  d6:	3e 4c       	sbci	r19, 0xCE	; 206
  d8:	80 ef       	ldi	r24, 0xF0	; 240
  da:	ff be       	out	0x3f, r15	; 63
  dc:	01 c4       	rjmp	.+2050   	; 0x8e0 <__fixunssfsi+0x48>
  de:	ff 7f       	andi	r31, 0xFF	; 255
  e0:	3f 00       	.word	0x003f	; ????
  e2:	00 00       	nop
  e4:	00 00       	nop
  e6:	07 63       	ori	r16, 0x37	; 55
  e8:	42 36       	cpi	r20, 0x62	; 98
  ea:	b7 9b       	sbis	0x16, 7	; 22
  ec:	d8 a7       	std	Y+40, r29	; 0x28
  ee:	1a 39       	cpi	r17, 0x9A	; 154
  f0:	68 56       	subi	r22, 0x68	; 104
  f2:	18 ae       	std	Y+56, r1	; 0x38
  f4:	ba ab       	std	Y+50, r27	; 0x32
  f6:	55 8c       	ldd	r5, Z+29	; 0x1d
  f8:	1d 3c       	cpi	r17, 0xCD	; 205
  fa:	b7 cc       	rjmp	.-1682   	; 0xfffffa6a <__eeprom_end+0xff7efa6a>
  fc:	57 63       	ori	r21, 0x37	; 55
  fe:	bd 6d       	ori	r27, 0xDD	; 221
 100:	ed fd       	.word	0xfded	; ????
 102:	75 3e       	cpi	r23, 0xE5	; 229
 104:	f6 17       	cp	r31, r22
 106:	72 31       	cpi	r23, 0x12	; 18
 108:	bf 00       	.word	0x00bf	; ????
 10a:	00 00       	nop
 10c:	80 3f       	cpi	r24, 0xF0	; 240

0000010e <__ctors_end>:
 10e:	11 24       	eor	r1, r1
 110:	1f be       	out	0x3f, r1	; 63
 112:	cf ef       	ldi	r28, 0xFF	; 255
 114:	d0 e1       	ldi	r29, 0x10	; 16
 116:	de bf       	out	0x3e, r29	; 62
 118:	cd bf       	out	0x3d, r28	; 61

0000011a <__do_copy_data>:
 11a:	11 e0       	ldi	r17, 0x01	; 1
 11c:	a0 e0       	ldi	r26, 0x00	; 0
 11e:	b1 e0       	ldi	r27, 0x01	; 1
 120:	e0 ef       	ldi	r30, 0xF0	; 240
 122:	fd e0       	ldi	r31, 0x0D	; 13
 124:	00 e0       	ldi	r16, 0x00	; 0
 126:	0b bf       	out	0x3b, r16	; 59
 128:	02 c0       	rjmp	.+4      	; 0x12e <__do_copy_data+0x14>
 12a:	07 90       	elpm	r0, Z+
 12c:	0d 92       	st	X+, r0
 12e:	a2 30       	cpi	r26, 0x02	; 2
 130:	b1 07       	cpc	r27, r17
 132:	d9 f7       	brne	.-10     	; 0x12a <__do_copy_data+0x10>

00000134 <__do_clear_bss>:
 134:	21 e0       	ldi	r18, 0x01	; 1
 136:	a2 e0       	ldi	r26, 0x02	; 2
 138:	b1 e0       	ldi	r27, 0x01	; 1
 13a:	01 c0       	rjmp	.+2      	; 0x13e <.do_clear_bss_start>

0000013c <.do_clear_bss_loop>:
 13c:	1d 92       	st	X+, r1

0000013e <.do_clear_bss_start>:
 13e:	af 31       	cpi	r26, 0x1F	; 31
 140:	b2 07       	cpc	r27, r18
 142:	e1 f7       	brne	.-8      	; 0x13c <.do_clear_bss_loop>
 144:	3e d1       	rcall	.+636    	; 0x3c2 <main>
 146:	52 c6       	rjmp	.+3236   	; 0xdec <_exit>

00000148 <__bad_interrupt>:
 148:	5b cf       	rjmp	.-330    	; 0x0 <__vectors>

0000014a <init_BT>:
 14a:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 14e:	88 e1       	ldi	r24, 0x18	; 24
 150:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
 154:	86 e0       	ldi	r24, 0x06	; 6
 156:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
 15a:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 15e:	87 e6       	ldi	r24, 0x67	; 103
 160:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 164:	08 95       	ret

00000166 <BT_send>:
 166:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 16a:	95 ff       	sbrs	r25, 5
 16c:	fc cf       	rjmp	.-8      	; 0x166 <BT_send>
 16e:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 172:	08 95       	ret

00000174 <Select_Item>:
void BLUE_LED_On(unsigned int p){
	Select_Item(ITEM_NONE);
	ICR1 = 4999;
	OCR1A = p;
	Select_Item(ITEM_LED_BLUE);
}
 174:	95 b3       	in	r25, 0x15	; 21
 176:	90 7f       	andi	r25, 0xF0	; 240
 178:	89 2b       	or	r24, r25
 17a:	85 bb       	out	0x15, r24	; 21
 17c:	2f ef       	ldi	r18, 0xFF	; 255
 17e:	81 ee       	ldi	r24, 0xE1	; 225
 180:	94 e0       	ldi	r25, 0x04	; 4
 182:	21 50       	subi	r18, 0x01	; 1
 184:	80 40       	sbci	r24, 0x00	; 0
 186:	90 40       	sbci	r25, 0x00	; 0
 188:	e1 f7       	brne	.-8      	; 0x182 <Select_Item+0xe>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <Select_Item+0x18>
 18c:	00 00       	nop
 18e:	08 95       	ret

00000190 <Servo_Act>:
 190:	40 e0       	ldi	r20, 0x00	; 0
 192:	50 e0       	ldi	r21, 0x00	; 0
 194:	21 c0       	rjmp	.+66     	; 0x1d8 <Servo_Act+0x48>
 196:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <Servo_Allowed>
 19a:	22 23       	and	r18, r18
 19c:	b9 f0       	breq	.+46     	; 0x1cc <Servo_Act+0x3c>
 19e:	4f 5f       	subi	r20, 0xFF	; 255
 1a0:	5f 4f       	sbci	r21, 0xFF	; 255
 1a2:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <Servo_increment_threshold>
 1a6:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <Servo_increment_threshold+0x1>
 1aa:	42 17       	cp	r20, r18
 1ac:	53 07       	cpc	r21, r19
 1ae:	71 f4       	brne	.+28     	; 0x1cc <Servo_Act+0x3c>
 1b0:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <Servo_step>
 1b4:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <Servo_step+0x1>
 1b8:	82 0f       	add	r24, r18
 1ba:	93 1f       	adc	r25, r19
 1bc:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <Servo_pos+0x1>
 1c0:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <Servo_pos>
 1c4:	9b bd       	out	0x2b, r25	; 43
 1c6:	8a bd       	out	0x2a, r24	; 42
 1c8:	40 e0       	ldi	r20, 0x00	; 0
 1ca:	50 e0       	ldi	r21, 0x00	; 0
 1cc:	8f e8       	ldi	r24, 0x8F	; 143
 1ce:	91 e0       	ldi	r25, 0x01	; 1
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <Servo_Act+0x40>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <Servo_Act+0x46>
 1d6:	00 00       	nop
 1d8:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <Servo_pos>
 1dc:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <Servo_pos+0x1>
 1e0:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <Servo_target>
 1e4:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <Servo_target+0x1>
 1e8:	82 17       	cp	r24, r18
 1ea:	93 07       	cpc	r25, r19
 1ec:	a1 f6       	brne	.-88     	; 0x196 <Servo_Act+0x6>
 1ee:	08 95       	ret

000001f0 <Servo_Goto>:
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	ec 01       	movw	r28, r24
 1f6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <Servo_pos>
 1fa:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <Servo_pos+0x1>
 1fe:	9b bd       	out	0x2b, r25	; 43
 200:	8a bd       	out	0x2a, r24	; 42
 202:	82 e0       	ldi	r24, 0x02	; 2
 204:	b7 df       	rcall	.-146    	; 0x174 <Select_Item>
 206:	82 e0       	ldi	r24, 0x02	; 2
 208:	b5 df       	rcall	.-150    	; 0x174 <Select_Item>
 20a:	d0 93 09 01 	sts	0x0109, r29	; 0x800109 <Servo_target+0x1>
 20e:	c0 93 08 01 	sts	0x0108, r28	; 0x800108 <Servo_target>
 212:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <Servo_pos>
 216:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <Servo_pos+0x1>
 21a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <Servo_target>
 21e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <Servo_target+0x1>
 222:	28 17       	cp	r18, r24
 224:	39 07       	cpc	r19, r25
 226:	38 f0       	brcs	.+14     	; 0x236 <Servo_Goto+0x46>
 228:	8f ef       	ldi	r24, 0xFF	; 255
 22a:	9f ef       	ldi	r25, 0xFF	; 255
 22c:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <Servo_step+0x1>
 230:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <Servo_step>
 234:	06 c0       	rjmp	.+12     	; 0x242 <Servo_Goto+0x52>
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <Servo_step+0x1>
 23e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <Servo_step>
 242:	a6 df       	rcall	.-180    	; 0x190 <Servo_Act>
 244:	df 91       	pop	r29
 246:	cf 91       	pop	r28
 248:	08 95       	ret

0000024a <RED_LED_On>:
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
 24e:	ec 01       	movw	r28, r24
 250:	83 e0       	ldi	r24, 0x03	; 3
 252:	90 df       	rcall	.-224    	; 0x174 <Select_Item>
 254:	87 e8       	ldi	r24, 0x87	; 135
 256:	93 e1       	ldi	r25, 0x13	; 19
 258:	97 bd       	out	0x27, r25	; 39
 25a:	86 bd       	out	0x26, r24	; 38
 25c:	db bd       	out	0x2b, r29	; 43
 25e:	ca bd       	out	0x2a, r28	; 42
 260:	89 e0       	ldi	r24, 0x09	; 9
 262:	88 df       	rcall	.-240    	; 0x174 <Select_Item>
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	08 95       	ret

0000026a <GREEN_LED_On>:
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	ec 01       	movw	r28, r24
 270:	83 e0       	ldi	r24, 0x03	; 3
 272:	80 df       	rcall	.-256    	; 0x174 <Select_Item>
 274:	87 e8       	ldi	r24, 0x87	; 135
 276:	93 e1       	ldi	r25, 0x13	; 19
 278:	97 bd       	out	0x27, r25	; 39
 27a:	86 bd       	out	0x26, r24	; 38
 27c:	db bd       	out	0x2b, r29	; 43
 27e:	ca bd       	out	0x2a, r28	; 42
 280:	8d e0       	ldi	r24, 0x0D	; 13
 282:	78 df       	rcall	.-272    	; 0x174 <Select_Item>
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	08 95       	ret

0000028a <calc_led>:

int calc_led(){
 28a:	cf 92       	push	r12
 28c:	df 92       	push	r13
 28e:	ef 92       	push	r14
 290:	ff 92       	push	r15
	double cds=(4700.0 * 1023)/cds_sensor_val-4700.0;
 292:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <cds_sensor_val>
 296:	70 91 0e 01 	lds	r23, 0x010E	; 0x80010e <cds_sensor_val+0x1>
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	28 d3       	rcall	.+1616   	; 0x8f0 <__floatunsisf>
 2a0:	9b 01       	movw	r18, r22
 2a2:	ac 01       	movw	r20, r24
 2a4:	68 e4       	ldi	r22, 0x48	; 72
 2a6:	7b eb       	ldi	r23, 0xBB	; 187
 2a8:	82 e9       	ldi	r24, 0x92	; 146
 2aa:	9a e4       	ldi	r25, 0x4A	; 74
 2ac:	88 d2       	rcall	.+1296   	; 0x7be <__divsf3>
 2ae:	20 e0       	ldi	r18, 0x00	; 0
 2b0:	30 ee       	ldi	r19, 0xE0	; 224
 2b2:	42 e9       	ldi	r20, 0x92	; 146
 2b4:	55 e4       	ldi	r21, 0x45	; 69
 2b6:	1a d2       	rcall	.+1076   	; 0x6ec <__subsf3>
	double LUX = pow(10, 1-(log(cds)-log(40000))/0.8);
 2b8:	d6 d3       	rcall	.+1964   	; 0xa66 <log>
 2ba:	21 ed       	ldi	r18, 0xD1	; 209
 2bc:	3b e8       	ldi	r19, 0x8B	; 139
 2be:	49 e2       	ldi	r20, 0x29	; 41
 2c0:	51 e4       	ldi	r21, 0x41	; 65
 2c2:	14 d2       	rcall	.+1064   	; 0x6ec <__subsf3>
 2c4:	2d ec       	ldi	r18, 0xCD	; 205
 2c6:	3c ec       	ldi	r19, 0xCC	; 204
 2c8:	4c e4       	ldi	r20, 0x4C	; 76
 2ca:	5f e3       	ldi	r21, 0x3F	; 63
 2cc:	78 d2       	rcall	.+1264   	; 0x7be <__divsf3>
 2ce:	9b 01       	movw	r18, r22
 2d0:	ac 01       	movw	r20, r24
 2d2:	60 e0       	ldi	r22, 0x00	; 0
 2d4:	70 e0       	ldi	r23, 0x00	; 0
 2d6:	80 e8       	ldi	r24, 0x80	; 128
 2d8:	9f e3       	ldi	r25, 0x3F	; 63
 2da:	08 d2       	rcall	.+1040   	; 0x6ec <__subsf3>
 2dc:	9b 01       	movw	r18, r22
 2de:	ac 01       	movw	r20, r24
 2e0:	60 e0       	ldi	r22, 0x00	; 0
 2e2:	70 e0       	ldi	r23, 0x00	; 0
 2e4:	80 e2       	ldi	r24, 0x20	; 32
 2e6:	91 e4       	ldi	r25, 0x41	; 65
 2e8:	61 d4       	rcall	.+2242   	; 0xbac <pow>
 2ea:	6b 01       	movw	r12, r22
 2ec:	7c 01       	movw	r14, r24
 2ee:	20 e0       	ldi	r18, 0x00	; 0
	
	return (LUX > CDS_MAX)?LED_MAX:(LUX<CDS_MIN)?LED_MIN:(LED_MAX-LED_MIN)/(CDS_MAX-CDS_MIN)*LUX;
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	48 ec       	ldi	r20, 0xC8	; 200
 2f4:	53 e4       	ldi	r21, 0x43	; 67
 2f6:	ae d3       	rcall	.+1884   	; 0xa54 <__gesf2>
 2f8:	18 16       	cp	r1, r24
 2fa:	8c f0       	brlt	.+34     	; 0x31e <calc_led+0x94>
 2fc:	20 e0       	ldi	r18, 0x00	; 0
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	48 ec       	ldi	r20, 0xC8	; 200
 302:	52 e4       	ldi	r21, 0x42	; 66
 304:	c7 01       	movw	r24, r14
 306:	b6 01       	movw	r22, r12
 308:	56 d2       	rcall	.+1196   	; 0x7b6 <__cmpsf2>
 30a:	88 23       	and	r24, r24
 30c:	5c f0       	brlt	.+22     	; 0x324 <calc_led+0x9a>
 30e:	a7 01       	movw	r20, r14
 310:	96 01       	movw	r18, r12
 312:	c7 01       	movw	r24, r14
 314:	b6 01       	movw	r22, r12
 316:	eb d1       	rcall	.+982    	; 0x6ee <__addsf3>
 318:	ba d2       	rcall	.+1396   	; 0x88e <__fixsfsi>
 31a:	cb 01       	movw	r24, r22
 31c:	05 c0       	rjmp	.+10     	; 0x328 <calc_led+0x9e>
 31e:	80 e2       	ldi	r24, 0x20	; 32
 320:	93 e0       	ldi	r25, 0x03	; 3
 322:	02 c0       	rjmp	.+4      	; 0x328 <calc_led+0x9e>
 324:	88 ec       	ldi	r24, 0xC8	; 200
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	ff 90       	pop	r15
 32a:	ef 90       	pop	r14
}
 32c:	df 90       	pop	r13
 32e:	cf 90       	pop	r12
 330:	08 95       	ret

00000332 <__vector_2>:
 332:	1f 92       	push	r1
 334:	0f 92       	push	r0
	Sensor_show(); //LED A
}

void ElectroMagnet_On(){
	//PORTC &= (0 << ElectroMagnet);
	PORTC = (PORTC & ~(1<<ElectroMagnet)) | (1<<ElectroMagnet);
 336:	0f b6       	in	r0, 0x3f	; 63
 338:	0f 92       	push	r0
 33a:	11 24       	eor	r1, r1
 33c:	0f 90       	pop	r0
 33e:	0f be       	out	0x3f, r0	; 63
 340:	0f 90       	pop	r0
 342:	1f 90       	pop	r1
 344:	18 95       	reti

00000346 <__vector_1>:
 346:	1f 92       	push	r1
 348:	0f 92       	push	r0
 34a:	0f b6       	in	r0, 0x3f	; 63
 34c:	0f 92       	push	r0
 34e:	11 24       	eor	r1, r1
 350:	0b b6       	in	r0, 0x3b	; 59
 352:	0f 92       	push	r0
 354:	2f 93       	push	r18
 356:	3f 93       	push	r19
 358:	4f 93       	push	r20
 35a:	5f 93       	push	r21
 35c:	6f 93       	push	r22
 35e:	7f 93       	push	r23
 360:	8f 93       	push	r24
 362:	9f 93       	push	r25
 364:	af 93       	push	r26
 366:	bf 93       	push	r27
 368:	ef 93       	push	r30
 36a:	ff 93       	push	r31
 36c:	80 e3       	ldi	r24, 0x30	; 48
 36e:	fb de       	rcall	.-522    	; 0x166 <BT_send>
 370:	ff 91       	pop	r31
 372:	ef 91       	pop	r30
 374:	bf 91       	pop	r27
 376:	af 91       	pop	r26
 378:	9f 91       	pop	r25
 37a:	8f 91       	pop	r24
 37c:	7f 91       	pop	r23
 37e:	6f 91       	pop	r22
 380:	5f 91       	pop	r21
 382:	4f 91       	pop	r20
 384:	3f 91       	pop	r19
 386:	2f 91       	pop	r18
 388:	0f 90       	pop	r0
 38a:	0b be       	out	0x3b, r0	; 59
 38c:	0f 90       	pop	r0
 38e:	0f be       	out	0x3f, r0	; 63
 390:	0f 90       	pop	r0
 392:	1f 90       	pop	r1
 394:	18 95       	reti

00000396 <timer1_init>:
 396:	82 e8       	ldi	r24, 0x82	; 130
 398:	8f bd       	out	0x2f, r24	; 47
 39a:	8b e1       	ldi	r24, 0x1B	; 27
 39c:	8e bd       	out	0x2e, r24	; 46
 39e:	87 e8       	ldi	r24, 0x87	; 135
 3a0:	93 e1       	ldi	r25, 0x13	; 19
 3a2:	97 bd       	out	0x27, r25	; 39
 3a4:	86 bd       	out	0x26, r24	; 38
 3a6:	08 95       	ret

000003a8 <port_setup>:
 3a8:	8f ef       	ldi	r24, 0xFF	; 255
 3aa:	8a bb       	out	0x1a, r24	; 26
 3ac:	11 ba       	out	0x11, r1	; 17
 3ae:	87 bb       	out	0x17, r24	; 23
 3b0:	84 bb       	out	0x14, r24	; 20
 3b2:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 3b6:	12 b8       	out	0x02, r1	; 2
 3b8:	08 95       	ret

000003ba <ElectroMagnet_Off>:
	//PORTC = 0x7F;
}

void ElectroMagnet_Off(){
	//PORTC |=  (1 << ElectroMagnet);
	PORTC = (PORTC & ~(1<<ElectroMagnet)) | (0<<ElectroMagnet);
 3ba:	85 b3       	in	r24, 0x15	; 21
 3bc:	8f 77       	andi	r24, 0x7F	; 127
 3be:	85 bb       	out	0x15, r24	; 21
 3c0:	08 95       	ret

000003c2 <main>:
//기정이 일하는 곳
int main(void){
	//debug
	char iter = 0;
	
	cli();
 3c2:	f8 94       	cli
	port_setup();
 3c4:	f1 df       	rcall	.-30     	; 0x3a8 <port_setup>
	timer1_init();
 3c6:	e7 df       	rcall	.-50     	; 0x396 <timer1_init>
	//timer0_init();
	init_BT();
 3c8:	c0 de       	rcall	.-640    	; 0x14a <init_BT>
 3ca:	71 d1       	rcall	.+738    	; 0x6ae <Reset_sensor_val>
	
	Reset_sensor_val(); //센서 변수 초기화
 3cc:	19 be       	out	0x39, r1	; 57
 3ce:	8f e0       	ldi	r24, 0x0F	; 15
	
	//EIMSK = 0x03; //External Interrupt Enable Mask
	EIMSK = 0x00;
 3d0:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EICRA = 0x0F; //External Interrupt Control Register(Edge)
 3d4:	78 94       	sei
 3d6:	8f ef       	ldi	r24, 0xFF	; 255

	sei();
 3d8:	84 bb       	out	0x14, r24	; 20
	
	DDRC = 0xFF;
 3da:	15 ba       	out	0x15, r1	; 21
	PORTC = 0x00;
 3dc:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <shk_detected>
	
	shk_detected = 0x00;
 3e0:	ec df       	rcall	.-40     	; 0x3ba <ElectroMagnet_Off>
	
	ElectroMagnet_Off();
 3e2:	84 e1       	ldi	r24, 0x14	; 20
 3e4:	90 e0       	ldi	r25, 0x00	; 0
	
	Servo_increment_threshold = 20;
 3e6:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <Servo_increment_threshold+0x1>
 3ea:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <Servo_increment_threshold>
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <Servo_Allowed>
	Servo_Allowed = 0x01;
 3f4:	87 e7       	ldi	r24, 0x77	; 119
	
	//Servo_Quick_Move(375);
	Servo_Goto(375);
 3f6:	91 e0       	ldi	r25, 0x01	; 1
 3f8:	fb de       	rcall	.-522    	; 0x1f0 <Servo_Goto>
 3fa:	8f e3       	ldi	r24, 0x3F	; 63
 3fc:	9c e9       	ldi	r25, 0x9C	; 156
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3fe:	01 97       	sbiw	r24, 0x01	; 1
 400:	f1 f7       	brne	.-4      	; 0x3fe <main+0x3c>
 402:	00 c0       	rjmp	.+0      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 404:	00 00       	nop
	//0x1111 0011: mask, 
	
	while(1){
		_delay_ms(10);
		
		GREEN_LED_On(calc_led());
 406:	41 df       	rcall	.-382    	; 0x28a <calc_led>
 408:	30 df       	rcall	.-416    	; 0x26a <GREEN_LED_On>
 40a:	80 b3       	in	r24, 0x10	; 16
 40c:	83 70       	andi	r24, 0x03	; 3
		
		switch(PIND & 0x03){
 40e:	81 30       	cpi	r24, 0x01	; 1
 410:	31 f0       	breq	.+12     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 412:	82 30       	cpi	r24, 0x02	; 2
 414:	91 f7       	brne	.-28     	; 0x3fa <main+0x38>
 416:	80 e2       	ldi	r24, 0x20	; 32
			case 0x02: //Select Red LED

				//Servo_Quick_Move(SERVO_HOME);
				//RED_LED_On((cds_sensor_val > CDS_MAX)?LED_MAX:(cds_sensor_val<CDS_MIN)?LED_MIN:(int)((LED_MAX-LED_MIN)/(CDS_MAX-CDS_MIN)*cds_sensor_val));
				RED_LED_On(800);
 418:	93 e0       	ldi	r25, 0x03	; 3
 41a:	17 df       	rcall	.-466    	; 0x24a <RED_LED_On>
 41c:	ee cf       	rjmp	.-36     	; 0x3fa <main+0x38>
				//ElectroMagnet_On();
				//BT_send('1');
			break;
 41e:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <cds_sensor_val>
			case 0x01: //Select Green LED

				//Servo_Quick_Move(SERVO_BOX);
				//Select_Item(ITEM_LED_GREEN);
				
				GREEN_LED_On((cds_sensor_val > CDS_MAX)?LED_MAX:(cds_sensor_val<CDS_MIN)?LED_MIN:(int)((LED_MAX-LED_MIN)/(CDS_MAX-CDS_MIN)*cds_sensor_val));
 422:	70 91 0e 01 	lds	r23, 0x010E	; 0x80010e <cds_sensor_val+0x1>
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	62 d2       	rcall	.+1220   	; 0x8f0 <__floatunsisf>
 42c:	6b 01       	movw	r12, r22
 42e:	7c 01       	movw	r14, r24
 430:	20 e0       	ldi	r18, 0x00	; 0
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	48 ec       	ldi	r20, 0xC8	; 200
 436:	53 e4       	ldi	r21, 0x43	; 67
 438:	0d d3       	rcall	.+1562   	; 0xa54 <__gesf2>
 43a:	18 16       	cp	r1, r24
 43c:	8c f0       	brlt	.+34     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 43e:	20 e0       	ldi	r18, 0x00	; 0
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	48 ec       	ldi	r20, 0xC8	; 200
 444:	52 e4       	ldi	r21, 0x42	; 66
 446:	c7 01       	movw	r24, r14
 448:	b6 01       	movw	r22, r12
 44a:	b5 d1       	rcall	.+874    	; 0x7b6 <__cmpsf2>
 44c:	88 23       	and	r24, r24
 44e:	5c f0       	brlt	.+22     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 450:	a7 01       	movw	r20, r14
 452:	96 01       	movw	r18, r12
 454:	c7 01       	movw	r24, r14
 456:	b6 01       	movw	r22, r12
 458:	4a d1       	rcall	.+660    	; 0x6ee <__addsf3>
 45a:	19 d2       	rcall	.+1074   	; 0x88e <__fixsfsi>
 45c:	cb 01       	movw	r24, r22
 45e:	05 c0       	rjmp	.+10     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 460:	80 e2       	ldi	r24, 0x20	; 32
 462:	93 e0       	ldi	r25, 0x03	; 3
 464:	02 c0       	rjmp	.+4      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 466:	88 ec       	ldi	r24, 0xC8	; 200
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	ff de       	rcall	.-514    	; 0x26a <GREEN_LED_On>
 46c:	c6 cf       	rjmp	.-116    	; 0x3fa <main+0x38>

0000046e <If_Shock_Detected>:
 46e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <shk_sensor_val>
	PORTC = (PORTC & ~(1<<ElectroMagnet)) | (0<<ElectroMagnet);
	//PORTC = 0xFF;
}

void If_Shock_Detected(){
	if(shk_sensor_val <= 900)
 472:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <shk_sensor_val+0x1>
 476:	85 38       	cpi	r24, 0x85	; 133
 478:	93 40       	sbci	r25, 0x03	; 3
 47a:	18 f4       	brcc	.+6      	; 0x482 <If_Shock_Detected+0x14>
		shk_detected = 0x01;
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <shk_detected>
 482:	08 95       	ret

00000484 <If_PSD_Detected>:

}

void If_PSD_Detected(){
	if ( (psd_sensor_val> 520)) {
 484:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <psd_sensor_val>
 488:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <psd_sensor_val+0x1>
 48c:	89 30       	cpi	r24, 0x09	; 9
 48e:	92 40       	sbci	r25, 0x02	; 2
 490:	18 f0       	brcs	.+6      	; 0x498 <If_PSD_Detected+0x14>
		//PORTC |= 0x20; //0010 0000
		//PORTA &= 0xBF;
		Servo_Allowed = 0x00;
 492:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <Servo_Allowed>
 496:	08 95       	ret
	}
	else {
		//PORTC &= ~(0x20); //0100 0000
		//PORTA |= ~0xBF;
		Servo_Allowed = 0x01;
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <Servo_Allowed>
 49e:	08 95       	ret

000004a0 <__vector_16>:
	else {
		PORTA |= ~0xBF;
	}
}

ISR(TIMER0_OVF_vect){ //Use Timer0 for collecting sensor value
 4a0:	1f 92       	push	r1
 4a2:	0f 92       	push	r0
 4a4:	0f b6       	in	r0, 0x3f	; 63
 4a6:	0f 92       	push	r0
 4a8:	11 24       	eor	r1, r1
 4aa:	0b b6       	in	r0, 0x3b	; 59
 4ac:	0f 92       	push	r0
 4ae:	2f 93       	push	r18
 4b0:	3f 93       	push	r19
 4b2:	4f 93       	push	r20
 4b4:	5f 93       	push	r21
 4b6:	6f 93       	push	r22
 4b8:	7f 93       	push	r23
 4ba:	8f 93       	push	r24
 4bc:	9f 93       	push	r25
 4be:	af 93       	push	r26
 4c0:	bf 93       	push	r27
 4c2:	ef 93       	push	r30
 4c4:	ff 93       	push	r31
	static char idx = 0x01;
	
	switch(idx){
 4c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4ca:	84 30       	cpi	r24, 0x04	; 4
 4cc:	b1 f0       	breq	.+44     	; 0x4fa <__vector_16+0x5a>
 4ce:	28 f4       	brcc	.+10     	; 0x4da <__vector_16+0x3a>
 4d0:	81 30       	cpi	r24, 0x01	; 1
 4d2:	49 f0       	breq	.+18     	; 0x4e6 <__vector_16+0x46>
 4d4:	82 30       	cpi	r24, 0x02	; 2
 4d6:	61 f0       	breq	.+24     	; 0x4f0 <__vector_16+0x50>
 4d8:	25 c0       	rjmp	.+74     	; 0x524 <__vector_16+0x84>
 4da:	86 30       	cpi	r24, 0x06	; 6
 4dc:	c9 f0       	breq	.+50     	; 0x510 <__vector_16+0x70>
 4de:	90 f0       	brcs	.+36     	; 0x504 <__vector_16+0x64>
 4e0:	87 30       	cpi	r24, 0x07	; 7
 4e2:	d9 f0       	breq	.+54     	; 0x51a <__vector_16+0x7a>
 4e4:	1f c0       	rjmp	.+62     	; 0x524 <__vector_16+0x84>
		case 0x01:
			Read_CDS();
 4e6:	89 d0       	rcall	.+274    	; 0x5fa <Read_CDS>
			
			idx=0x02;
 4e8:	82 e0       	ldi	r24, 0x02	; 2
 4ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
		
		case 0x02:
			Read_Thermister();
 4ee:	1a c0       	rjmp	.+52     	; 0x524 <__vector_16+0x84>
 4f0:	c0 d0       	rcall	.+384    	; 0x672 <Read_Thermister>
			//Servo_Set_Speed();
			idx=0x04;
 4f2:	84 e0       	ldi	r24, 0x04	; 4
 4f4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
		
		case 0x04:
			Read_Pressure();
 4f8:	15 c0       	rjmp	.+42     	; 0x524 <__vector_16+0x84>
 4fa:	ac d0       	rcall	.+344    	; 0x654 <Read_Pressure>
			idx=0x05;
 4fc:	85 e0       	ldi	r24, 0x05	; 5
 4fe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
		
		case 0x05:
		
			Read_Shock();
 502:	10 c0       	rjmp	.+32     	; 0x524 <__vector_16+0x84>
 504:	c5 d0       	rcall	.+394    	; 0x690 <Read_Shock>
			If_Shock_Detected();
 506:	b3 df       	rcall	.-154    	; 0x46e <If_Shock_Detected>
			idx=0x06;
 508:	86 e0       	ldi	r24, 0x06	; 6
 50a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		break;
 50e:	0a c0       	rjmp	.+20     	; 0x524 <__vector_16+0x84>
		
		case 0x06:
		
			Read_Fire();
 510:	83 d0       	rcall	.+262    	; 0x618 <Read_Fire>
			//If_Fire_Detected();
			idx = 0x07;
 512:	87 e0       	ldi	r24, 0x07	; 7
 514:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
 518:	05 c0       	rjmp	.+10     	; 0x524 <__vector_16+0x84>
		
		case 0x07:
		
			Read_PSD();
 51a:	8d d0       	rcall	.+282    	; 0x636 <Read_PSD>
 51c:	b3 df       	rcall	.-154    	; 0x484 <If_PSD_Detected>
			If_PSD_Detected();
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			idx = 0x01;
 524:	87 b1       	in	r24, 0x07	; 7
 526:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
	}
	
	//ADC Mux 선택, ADC 시작 시키고 ISR 종료
	ADMUX = (ADMUX & 0x40) | (idx & 0x0F); //다음 센서 선택
 52a:	9f 70       	andi	r25, 0x0F	; 15
 52c:	80 74       	andi	r24, 0x40	; 64
 52e:	89 2b       	or	r24, r25
 530:	87 b9       	out	0x07, r24	; 7
 532:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <cds_sensor_val>
	ADMUX=(1<<REFS0); //외부 레퍼런스 접압을 기준 전압으로 선택, 우측정렬, 초기 입력핀은 0번
	ADCSRA=(1<<ADEN)|(0<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //ADC enable, ADC interrupt enable 분주비 128
}

inline void Sensor_show(){
	if (cds_sensor_val > 100) { //CDS
 536:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <cds_sensor_val+0x1>
 53a:	85 36       	cpi	r24, 0x65	; 101
 53c:	91 05       	cpc	r25, r1
 53e:	20 f0       	brcs	.+8      	; 0x548 <__vector_16+0xa8>
 540:	8b b3       	in	r24, 0x1b	; 27
 542:	8e 7f       	andi	r24, 0xFE	; 254
		PORTA &= 0xFE; //CDS에 해당하는 LED만 켜기 //1111 1110
 544:	8b bb       	out	0x1b, r24	; 27
 546:	03 c0       	rjmp	.+6      	; 0x54e <__vector_16+0xae>
 548:	8b b3       	in	r24, 0x1b	; 27
 54a:	81 60       	ori	r24, 0x01	; 1
	}
	else {
		PORTA |= ~0xFE; //CDS에 해단하는 LED만 끄기
 54c:	8b bb       	out	0x1b, r24	; 27
 54e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <temp_sensor_val>
	}
	
	if (temp_sensor_val > 200) {
 552:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <temp_sensor_val+0x1>
 556:	89 3c       	cpi	r24, 0xC9	; 201
 558:	91 05       	cpc	r25, r1
 55a:	20 f0       	brcs	.+8      	; 0x564 <__vector_16+0xc4>
 55c:	8b b3       	in	r24, 0x1b	; 27
 55e:	8d 7f       	andi	r24, 0xFD	; 253
		PORTA &= 0xFD; // 1111 1101
 560:	8b bb       	out	0x1b, r24	; 27
 562:	03 c0       	rjmp	.+6      	; 0x56a <__vector_16+0xca>
 564:	8b b3       	in	r24, 0x1b	; 27
 566:	82 60       	ori	r24, 0x02	; 2
	}
	else {
		PORTA |= ~0xFD;
 568:	8b bb       	out	0x1b, r24	; 27
 56a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <pressure_sensor_val>
	}
	
	
	
	if (pressure_sensor_val > 900) {//보류 -
 56e:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <pressure_sensor_val+0x1>
 572:	85 38       	cpi	r24, 0x85	; 133
 574:	93 40       	sbci	r25, 0x03	; 3
 576:	20 f0       	brcs	.+8      	; 0x580 <__vector_16+0xe0>
 578:	8b b3       	in	r24, 0x1b	; 27
 57a:	8b 7f       	andi	r24, 0xFB	; 251
		PORTA &= 0xFB; //1111 1011
 57c:	8b bb       	out	0x1b, r24	; 27
 57e:	03 c0       	rjmp	.+6      	; 0x586 <__vector_16+0xe6>
 580:	8b b3       	in	r24, 0x1b	; 27
 582:	84 60       	ori	r24, 0x04	; 4
	}
	else {
		PORTA |= ~0xFB;
 584:	8b bb       	out	0x1b, r24	; 27
 586:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <shk_detected>
	}
	
	if ( shk_detected) {
 58a:	88 23       	and	r24, r24
 58c:	21 f0       	breq	.+8      	; 0x596 <__vector_16+0xf6>
 58e:	8b b3       	in	r24, 0x1b	; 27
 590:	87 7f       	andi	r24, 0xF7	; 247
		PORTA &= 0xF7;
 592:	8b bb       	out	0x1b, r24	; 27
 594:	03 c0       	rjmp	.+6      	; 0x59c <__vector_16+0xfc>
 596:	8b b3       	in	r24, 0x1b	; 27
 598:	88 60       	ori	r24, 0x08	; 8
		//shk_detected = 0x00;
	}
	else {
		PORTA |= ~0xF7;
 59a:	8b bb       	out	0x1b, r24	; 27
 59c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <fire_sensor_val>
	}
	
	if (fire_sensor_val > 100) {//-
 5a0:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <fire_sensor_val+0x1>
 5a4:	85 36       	cpi	r24, 0x65	; 101
 5a6:	91 05       	cpc	r25, r1
 5a8:	20 f0       	brcs	.+8      	; 0x5b2 <__vector_16+0x112>
 5aa:	8b b3       	in	r24, 0x1b	; 27
 5ac:	8f 7e       	andi	r24, 0xEF	; 239
		PORTA &= 0xEF;
 5ae:	8b bb       	out	0x1b, r24	; 27
 5b0:	03 c0       	rjmp	.+6      	; 0x5b8 <__vector_16+0x118>
 5b2:	8b b3       	in	r24, 0x1b	; 27
 5b4:	80 61       	ori	r24, 0x10	; 16
	}
	else {
		PORTA |= ~0xEF;
 5b6:	8b bb       	out	0x1b, r24	; 27
 5b8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <psd_sensor_val>
	}
	
	
	if ( (psd_sensor_val> 520)) {
 5bc:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <psd_sensor_val+0x1>
 5c0:	89 30       	cpi	r24, 0x09	; 9
 5c2:	92 40       	sbci	r25, 0x02	; 2
 5c4:	20 f0       	brcs	.+8      	; 0x5ce <__vector_16+0x12e>
 5c6:	8b b3       	in	r24, 0x1b	; 27
 5c8:	8f 7b       	andi	r24, 0xBF	; 191
		
		PORTA &= 0xBF;
 5ca:	8b bb       	out	0x1b, r24	; 27
 5cc:	03 c0       	rjmp	.+6      	; 0x5d4 <__vector_16+0x134>
 5ce:	8b b3       	in	r24, 0x1b	; 27
 5d0:	80 64       	ori	r24, 0x40	; 64
	}
	else {
		PORTA |= ~0xBF;
 5d2:	8b bb       	out	0x1b, r24	; 27
 5d4:	ff 91       	pop	r31
 5d6:	ef 91       	pop	r30
	//ADC Mux 선택, ADC 시작 시키고 ISR 종료
	ADMUX = (ADMUX & 0x40) | (idx & 0x0F); //다음 센서 선택
	//ADCSRA |= (1 << ADSC); // ADC 변환 시작
	
	Sensor_show(); //LED A
}
 5d8:	bf 91       	pop	r27
 5da:	af 91       	pop	r26
 5dc:	9f 91       	pop	r25
 5de:	8f 91       	pop	r24
 5e0:	7f 91       	pop	r23
 5e2:	6f 91       	pop	r22
 5e4:	5f 91       	pop	r21
 5e6:	4f 91       	pop	r20
 5e8:	3f 91       	pop	r19
 5ea:	2f 91       	pop	r18
 5ec:	0f 90       	pop	r0
 5ee:	0b be       	out	0x3b, r0	; 59
 5f0:	0f 90       	pop	r0
 5f2:	0f be       	out	0x3f, r0	; 63
 5f4:	0f 90       	pop	r0
 5f6:	1f 90       	pop	r1
 5f8:	18 95       	reti

000005fa <Read_CDS>:
 5fa:	86 b1       	in	r24, 0x06	; 6
 5fc:	80 64       	ori	r24, 0x40	; 64
unsigned short hpf(unsigned short previous_value, unsigned short new_value, float alpha) {
	return (unsigned short)(alpha * (previous_value + new_value) - previous_value);
}

inline void Read_CDS(){
	ADCSRA |= (1 << ADSC); // ADC 변환 시작
 5fe:	86 b9       	out	0x06, r24	; 6
	while(!(ADCSRA & (1 << ADIF))); // ADC 변환 완료 플래그가 설정될 때까지 기다림
 600:	34 9b       	sbis	0x06, 4	; 6
 602:	fe cf       	rjmp	.-4      	; 0x600 <Read_CDS+0x6>
	ADCSRA |= (1<< ADIF); // ADC 변환 완료 플래그 클리어
 604:	86 b1       	in	r24, 0x06	; 6
 606:	80 61       	ori	r24, 0x10	; 16
 608:	86 b9       	out	0x06, r24	; 6
	/*static unsigned short previous_value = 0;
	cds_sensor_val = lpf(previous_value, ADC, 0.1);
	previous_value = cds_sensor_val;*/
	cds_sensor_val=ADC;
 60a:	84 b1       	in	r24, 0x04	; 4
 60c:	95 b1       	in	r25, 0x05	; 5
 60e:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <cds_sensor_val+0x1>
 612:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <cds_sensor_val>
 616:	08 95       	ret

00000618 <Read_Fire>:

	//필터링 해야됨
}

inline void Read_Fire(){
	ADCSRA |= (1 << ADSC); // ADC 변환 시작
 618:	86 b1       	in	r24, 0x06	; 6
 61a:	80 64       	ori	r24, 0x40	; 64
 61c:	86 b9       	out	0x06, r24	; 6
	while(!(ADCSRA & (1 << ADIF))); // ADC 변환 완료 플래그가 설정될 때까지 기다림
 61e:	34 9b       	sbis	0x06, 4	; 6
 620:	fe cf       	rjmp	.-4      	; 0x61e <Read_Fire+0x6>
	ADCSRA |= (1 << ADIF); // ADC 변환 완료 플래그 클리어
 622:	86 b1       	in	r24, 0x06	; 6
 624:	80 61       	ori	r24, 0x10	; 16
 626:	86 b9       	out	0x06, r24	; 6
	//static unsigned short previous_value = 0;
	fire_sensor_val = ADC;//lpf(previous_value, ADC, 0.1);
 628:	84 b1       	in	r24, 0x04	; 4
 62a:	95 b1       	in	r25, 0x05	; 5
 62c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <fire_sensor_val+0x1>
 630:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <fire_sensor_val>
 634:	08 95       	ret

00000636 <Read_PSD>:
	//previous_value = fire_sensor_val;
	//필터링 해야됨
}
inline void Read_PSD(){
	ADCSRA |= (1 << ADSC); // ADC 변환 시작
 636:	86 b1       	in	r24, 0x06	; 6
 638:	80 64       	ori	r24, 0x40	; 64
 63a:	86 b9       	out	0x06, r24	; 6
	while(!(ADCSRA & (1 << ADIF))); // ADC 변환 완료 플래그가 설정될 때까지 기다림
 63c:	34 9b       	sbis	0x06, 4	; 6
 63e:	fe cf       	rjmp	.-4      	; 0x63c <Read_PSD+0x6>
	ADCSRA |= (1 << ADIF); // ADC 변환 완료 플래그 클리어
 640:	86 b1       	in	r24, 0x06	; 6
 642:	80 61       	ori	r24, 0x10	; 16
 644:	86 b9       	out	0x06, r24	; 6
	//static unsigned short previous_value = 0;
	psd_sensor_val = ADC;//lpf(previous_value, ADC, 0.1);
 646:	84 b1       	in	r24, 0x04	; 4
 648:	95 b1       	in	r25, 0x05	; 5
 64a:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <psd_sensor_val+0x1>
 64e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <psd_sensor_val>
 652:	08 95       	ret

00000654 <Read_Pressure>:
	//previous_value = psd_sensor_val;
	//필터링 해야됨
}

inline void Read_Pressure(){
	ADCSRA |= (1 << ADSC); // ADC 변환 시작
 654:	86 b1       	in	r24, 0x06	; 6
 656:	80 64       	ori	r24, 0x40	; 64
 658:	86 b9       	out	0x06, r24	; 6
	while(!(ADCSRA & (1 << ADIF))); // ADC 변환 완료 플래그가 설정될 때까지 기다림
 65a:	34 9b       	sbis	0x06, 4	; 6
 65c:	fe cf       	rjmp	.-4      	; 0x65a <Read_Pressure+0x6>
	ADCSRA |= (1 << ADIF); // ADC 변환 완료 플래그 클리어
 65e:	86 b1       	in	r24, 0x06	; 6
 660:	80 61       	ori	r24, 0x10	; 16
 662:	86 b9       	out	0x06, r24	; 6
	//static uint16_t previous_value = 0;
	pressure_sensor_val = ADC;//lpf(previous_value, ADC, 1);
 664:	84 b1       	in	r24, 0x04	; 4
 666:	95 b1       	in	r25, 0x05	; 5
 668:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <pressure_sensor_val+0x1>
 66c:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <pressure_sensor_val>
 670:	08 95       	ret

00000672 <Read_Thermister>:
	//previous_value = pressure_sensor_val;
	//필터링 해야됨
}

inline void Read_Thermister(){
	ADCSRA |= (1 << ADSC); // ADC 변환 시작
 672:	86 b1       	in	r24, 0x06	; 6
 674:	80 64       	ori	r24, 0x40	; 64
 676:	86 b9       	out	0x06, r24	; 6
	while(!(ADCSRA & (1 << ADIF))); // ADC 변환 완료 플래그가 설정될 때까지 기다림
 678:	34 9b       	sbis	0x06, 4	; 6
 67a:	fe cf       	rjmp	.-4      	; 0x678 <Read_Thermister+0x6>
	ADCSRA |= (1 << ADIF); // ADC 변환 완료 플래그 클리어
 67c:	86 b1       	in	r24, 0x06	; 6
 67e:	80 61       	ori	r24, 0x10	; 16
 680:	86 b9       	out	0x06, r24	; 6
	//static unsigned short previous_value = 0;
	temp_sensor_val = ADC;//lpf(previous_value, ADC, 1);
 682:	84 b1       	in	r24, 0x04	; 4
 684:	95 b1       	in	r25, 0x05	; 5
 686:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <temp_sensor_val+0x1>
 68a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <temp_sensor_val>
 68e:	08 95       	ret

00000690 <Read_Shock>:
	//previous_value = temp_sensor_val;
	//필터링 해야됨
}

inline void Read_Shock(){
	ADCSRA |= (1 << ADSC); // ADC 변환 시작
 690:	86 b1       	in	r24, 0x06	; 6
 692:	80 64       	ori	r24, 0x40	; 64
 694:	86 b9       	out	0x06, r24	; 6
	while(!(ADCSRA & (1 << ADIF))); // ADC 변환 완료 플래그가 설정될 때까지 기다림
 696:	34 9b       	sbis	0x06, 4	; 6
 698:	fe cf       	rjmp	.-4      	; 0x696 <Read_Shock+0x6>
	ADCSRA |= (1 << ADIF); // ADC 변환 완료 플래그 클리어
 69a:	86 b1       	in	r24, 0x06	; 6
 69c:	80 61       	ori	r24, 0x10	; 16
 69e:	86 b9       	out	0x06, r24	; 6
	//static unsigned short previous_value = 0;
	shk_sensor_val = ADC;//hpf(previous_value, ADC, 1);
 6a0:	84 b1       	in	r24, 0x04	; 4
 6a2:	95 b1       	in	r25, 0x05	; 5
 6a4:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <shk_sensor_val+0x1>
 6a8:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <shk_sensor_val>
 6ac:	08 95       	ret

000006ae <Reset_sensor_val>:
	//previous_value = shk_sensor_val;
	//필터링 해야됨
}

inline void Reset_sensor_val(){
	pressure_sensor_val = 0;
 6ae:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <pressure_sensor_val+0x1>
 6b2:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <pressure_sensor_val>
	cds_sensor_val	= 0;
 6b6:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <cds_sensor_val+0x1>
 6ba:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <cds_sensor_val>
	temp_sensor_val = 0;	temp_en = 0;
 6be:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <temp_sensor_val+0x1>
 6c2:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <temp_sensor_val>
 6c6:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <temp_en+0x1>
 6ca:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <temp_en>
	shk_sensor_val	= 0;	shk_detected = 0;
 6ce:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <shk_sensor_val+0x1>
 6d2:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <shk_sensor_val>
 6d6:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <shk_detected>
	psd_sensor_val	= 0;
 6da:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <psd_sensor_val+0x1>
 6de:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <psd_sensor_val>
	fire_sensor_val	= 0;
 6e2:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <fire_sensor_val+0x1>
 6e6:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <fire_sensor_val>
 6ea:	08 95       	ret

000006ec <__subsf3>:
 6ec:	50 58       	subi	r21, 0x80	; 128

000006ee <__addsf3>:
 6ee:	bb 27       	eor	r27, r27
 6f0:	aa 27       	eor	r26, r26
 6f2:	0e d0       	rcall	.+28     	; 0x710 <__addsf3x>
 6f4:	75 c1       	rjmp	.+746    	; 0x9e0 <__fp_round>
 6f6:	66 d1       	rcall	.+716    	; 0x9c4 <__fp_pscA>
 6f8:	30 f0       	brcs	.+12     	; 0x706 <__addsf3+0x18>
 6fa:	6b d1       	rcall	.+726    	; 0x9d2 <__fp_pscB>
 6fc:	20 f0       	brcs	.+8      	; 0x706 <__addsf3+0x18>
 6fe:	31 f4       	brne	.+12     	; 0x70c <__addsf3+0x1e>
 700:	9f 3f       	cpi	r25, 0xFF	; 255
 702:	11 f4       	brne	.+4      	; 0x708 <__addsf3+0x1a>
 704:	1e f4       	brtc	.+6      	; 0x70c <__addsf3+0x1e>
 706:	5b c1       	rjmp	.+694    	; 0x9be <__fp_nan>
 708:	0e f4       	brtc	.+2      	; 0x70c <__addsf3+0x1e>
 70a:	e0 95       	com	r30
 70c:	e7 fb       	bst	r30, 7
 70e:	51 c1       	rjmp	.+674    	; 0x9b2 <__fp_inf>

00000710 <__addsf3x>:
 710:	e9 2f       	mov	r30, r25
 712:	77 d1       	rcall	.+750    	; 0xa02 <__fp_split3>
 714:	80 f3       	brcs	.-32     	; 0x6f6 <__addsf3+0x8>
 716:	ba 17       	cp	r27, r26
 718:	62 07       	cpc	r22, r18
 71a:	73 07       	cpc	r23, r19
 71c:	84 07       	cpc	r24, r20
 71e:	95 07       	cpc	r25, r21
 720:	18 f0       	brcs	.+6      	; 0x728 <__addsf3x+0x18>
 722:	71 f4       	brne	.+28     	; 0x740 <__addsf3x+0x30>
 724:	9e f5       	brtc	.+102    	; 0x78c <__addsf3x+0x7c>
 726:	8f c1       	rjmp	.+798    	; 0xa46 <__fp_zero>
 728:	0e f4       	brtc	.+2      	; 0x72c <__addsf3x+0x1c>
 72a:	e0 95       	com	r30
 72c:	0b 2e       	mov	r0, r27
 72e:	ba 2f       	mov	r27, r26
 730:	a0 2d       	mov	r26, r0
 732:	0b 01       	movw	r0, r22
 734:	b9 01       	movw	r22, r18
 736:	90 01       	movw	r18, r0
 738:	0c 01       	movw	r0, r24
 73a:	ca 01       	movw	r24, r20
 73c:	a0 01       	movw	r20, r0
 73e:	11 24       	eor	r1, r1
 740:	ff 27       	eor	r31, r31
 742:	59 1b       	sub	r21, r25
 744:	99 f0       	breq	.+38     	; 0x76c <__addsf3x+0x5c>
 746:	59 3f       	cpi	r21, 0xF9	; 249
 748:	50 f4       	brcc	.+20     	; 0x75e <__addsf3x+0x4e>
 74a:	50 3e       	cpi	r21, 0xE0	; 224
 74c:	68 f1       	brcs	.+90     	; 0x7a8 <__addsf3x+0x98>
 74e:	1a 16       	cp	r1, r26
 750:	f0 40       	sbci	r31, 0x00	; 0
 752:	a2 2f       	mov	r26, r18
 754:	23 2f       	mov	r18, r19
 756:	34 2f       	mov	r19, r20
 758:	44 27       	eor	r20, r20
 75a:	58 5f       	subi	r21, 0xF8	; 248
 75c:	f3 cf       	rjmp	.-26     	; 0x744 <__addsf3x+0x34>
 75e:	46 95       	lsr	r20
 760:	37 95       	ror	r19
 762:	27 95       	ror	r18
 764:	a7 95       	ror	r26
 766:	f0 40       	sbci	r31, 0x00	; 0
 768:	53 95       	inc	r21
 76a:	c9 f7       	brne	.-14     	; 0x75e <__addsf3x+0x4e>
 76c:	7e f4       	brtc	.+30     	; 0x78c <__addsf3x+0x7c>
 76e:	1f 16       	cp	r1, r31
 770:	ba 0b       	sbc	r27, r26
 772:	62 0b       	sbc	r22, r18
 774:	73 0b       	sbc	r23, r19
 776:	84 0b       	sbc	r24, r20
 778:	ba f0       	brmi	.+46     	; 0x7a8 <__addsf3x+0x98>
 77a:	91 50       	subi	r25, 0x01	; 1
 77c:	a1 f0       	breq	.+40     	; 0x7a6 <__addsf3x+0x96>
 77e:	ff 0f       	add	r31, r31
 780:	bb 1f       	adc	r27, r27
 782:	66 1f       	adc	r22, r22
 784:	77 1f       	adc	r23, r23
 786:	88 1f       	adc	r24, r24
 788:	c2 f7       	brpl	.-16     	; 0x77a <__addsf3x+0x6a>
 78a:	0e c0       	rjmp	.+28     	; 0x7a8 <__addsf3x+0x98>
 78c:	ba 0f       	add	r27, r26
 78e:	62 1f       	adc	r22, r18
 790:	73 1f       	adc	r23, r19
 792:	84 1f       	adc	r24, r20
 794:	48 f4       	brcc	.+18     	; 0x7a8 <__addsf3x+0x98>
 796:	87 95       	ror	r24
 798:	77 95       	ror	r23
 79a:	67 95       	ror	r22
 79c:	b7 95       	ror	r27
 79e:	f7 95       	ror	r31
 7a0:	9e 3f       	cpi	r25, 0xFE	; 254
 7a2:	08 f0       	brcs	.+2      	; 0x7a6 <__addsf3x+0x96>
 7a4:	b3 cf       	rjmp	.-154    	; 0x70c <__addsf3+0x1e>
 7a6:	93 95       	inc	r25
 7a8:	88 0f       	add	r24, r24
 7aa:	08 f0       	brcs	.+2      	; 0x7ae <__addsf3x+0x9e>
 7ac:	99 27       	eor	r25, r25
 7ae:	ee 0f       	add	r30, r30
 7b0:	97 95       	ror	r25
 7b2:	87 95       	ror	r24
 7b4:	08 95       	ret

000007b6 <__cmpsf2>:
 7b6:	d9 d0       	rcall	.+434    	; 0x96a <__fp_cmp>
 7b8:	08 f4       	brcc	.+2      	; 0x7bc <__cmpsf2+0x6>
 7ba:	81 e0       	ldi	r24, 0x01	; 1
 7bc:	08 95       	ret

000007be <__divsf3>:
 7be:	0c d0       	rcall	.+24     	; 0x7d8 <__divsf3x>
 7c0:	0f c1       	rjmp	.+542    	; 0x9e0 <__fp_round>
 7c2:	07 d1       	rcall	.+526    	; 0x9d2 <__fp_pscB>
 7c4:	40 f0       	brcs	.+16     	; 0x7d6 <__divsf3+0x18>
 7c6:	fe d0       	rcall	.+508    	; 0x9c4 <__fp_pscA>
 7c8:	30 f0       	brcs	.+12     	; 0x7d6 <__divsf3+0x18>
 7ca:	21 f4       	brne	.+8      	; 0x7d4 <__divsf3+0x16>
 7cc:	5f 3f       	cpi	r21, 0xFF	; 255
 7ce:	19 f0       	breq	.+6      	; 0x7d6 <__divsf3+0x18>
 7d0:	f0 c0       	rjmp	.+480    	; 0x9b2 <__fp_inf>
 7d2:	51 11       	cpse	r21, r1
 7d4:	39 c1       	rjmp	.+626    	; 0xa48 <__fp_szero>
 7d6:	f3 c0       	rjmp	.+486    	; 0x9be <__fp_nan>

000007d8 <__divsf3x>:
 7d8:	14 d1       	rcall	.+552    	; 0xa02 <__fp_split3>
 7da:	98 f3       	brcs	.-26     	; 0x7c2 <__divsf3+0x4>

000007dc <__divsf3_pse>:
 7dc:	99 23       	and	r25, r25
 7de:	c9 f3       	breq	.-14     	; 0x7d2 <__divsf3+0x14>
 7e0:	55 23       	and	r21, r21
 7e2:	b1 f3       	breq	.-20     	; 0x7d0 <__divsf3+0x12>
 7e4:	95 1b       	sub	r25, r21
 7e6:	55 0b       	sbc	r21, r21
 7e8:	bb 27       	eor	r27, r27
 7ea:	aa 27       	eor	r26, r26
 7ec:	62 17       	cp	r22, r18
 7ee:	73 07       	cpc	r23, r19
 7f0:	84 07       	cpc	r24, r20
 7f2:	38 f0       	brcs	.+14     	; 0x802 <__divsf3_pse+0x26>
 7f4:	9f 5f       	subi	r25, 0xFF	; 255
 7f6:	5f 4f       	sbci	r21, 0xFF	; 255
 7f8:	22 0f       	add	r18, r18
 7fa:	33 1f       	adc	r19, r19
 7fc:	44 1f       	adc	r20, r20
 7fe:	aa 1f       	adc	r26, r26
 800:	a9 f3       	breq	.-22     	; 0x7ec <__divsf3_pse+0x10>
 802:	33 d0       	rcall	.+102    	; 0x86a <__divsf3_pse+0x8e>
 804:	0e 2e       	mov	r0, r30
 806:	3a f0       	brmi	.+14     	; 0x816 <__divsf3_pse+0x3a>
 808:	e0 e8       	ldi	r30, 0x80	; 128
 80a:	30 d0       	rcall	.+96     	; 0x86c <__divsf3_pse+0x90>
 80c:	91 50       	subi	r25, 0x01	; 1
 80e:	50 40       	sbci	r21, 0x00	; 0
 810:	e6 95       	lsr	r30
 812:	00 1c       	adc	r0, r0
 814:	ca f7       	brpl	.-14     	; 0x808 <__divsf3_pse+0x2c>
 816:	29 d0       	rcall	.+82     	; 0x86a <__divsf3_pse+0x8e>
 818:	fe 2f       	mov	r31, r30
 81a:	27 d0       	rcall	.+78     	; 0x86a <__divsf3_pse+0x8e>
 81c:	66 0f       	add	r22, r22
 81e:	77 1f       	adc	r23, r23
 820:	88 1f       	adc	r24, r24
 822:	bb 1f       	adc	r27, r27
 824:	26 17       	cp	r18, r22
 826:	37 07       	cpc	r19, r23
 828:	48 07       	cpc	r20, r24
 82a:	ab 07       	cpc	r26, r27
 82c:	b0 e8       	ldi	r27, 0x80	; 128
 82e:	09 f0       	breq	.+2      	; 0x832 <__divsf3_pse+0x56>
 830:	bb 0b       	sbc	r27, r27
 832:	80 2d       	mov	r24, r0
 834:	bf 01       	movw	r22, r30
 836:	ff 27       	eor	r31, r31
 838:	93 58       	subi	r25, 0x83	; 131
 83a:	5f 4f       	sbci	r21, 0xFF	; 255
 83c:	2a f0       	brmi	.+10     	; 0x848 <__divsf3_pse+0x6c>
 83e:	9e 3f       	cpi	r25, 0xFE	; 254
 840:	51 05       	cpc	r21, r1
 842:	68 f0       	brcs	.+26     	; 0x85e <__divsf3_pse+0x82>
 844:	b6 c0       	rjmp	.+364    	; 0x9b2 <__fp_inf>
 846:	00 c1       	rjmp	.+512    	; 0xa48 <__fp_szero>
 848:	5f 3f       	cpi	r21, 0xFF	; 255
 84a:	ec f3       	brlt	.-6      	; 0x846 <__divsf3_pse+0x6a>
 84c:	98 3e       	cpi	r25, 0xE8	; 232
 84e:	dc f3       	brlt	.-10     	; 0x846 <__divsf3_pse+0x6a>
 850:	86 95       	lsr	r24
 852:	77 95       	ror	r23
 854:	67 95       	ror	r22
 856:	b7 95       	ror	r27
 858:	f7 95       	ror	r31
 85a:	9f 5f       	subi	r25, 0xFF	; 255
 85c:	c9 f7       	brne	.-14     	; 0x850 <__divsf3_pse+0x74>
 85e:	88 0f       	add	r24, r24
 860:	91 1d       	adc	r25, r1
 862:	96 95       	lsr	r25
 864:	87 95       	ror	r24
 866:	97 f9       	bld	r25, 7
 868:	08 95       	ret
 86a:	e1 e0       	ldi	r30, 0x01	; 1
 86c:	66 0f       	add	r22, r22
 86e:	77 1f       	adc	r23, r23
 870:	88 1f       	adc	r24, r24
 872:	bb 1f       	adc	r27, r27
 874:	62 17       	cp	r22, r18
 876:	73 07       	cpc	r23, r19
 878:	84 07       	cpc	r24, r20
 87a:	ba 07       	cpc	r27, r26
 87c:	20 f0       	brcs	.+8      	; 0x886 <__divsf3_pse+0xaa>
 87e:	62 1b       	sub	r22, r18
 880:	73 0b       	sbc	r23, r19
 882:	84 0b       	sbc	r24, r20
 884:	ba 0b       	sbc	r27, r26
 886:	ee 1f       	adc	r30, r30
 888:	88 f7       	brcc	.-30     	; 0x86c <__divsf3_pse+0x90>
 88a:	e0 95       	com	r30
 88c:	08 95       	ret

0000088e <__fixsfsi>:
 88e:	04 d0       	rcall	.+8      	; 0x898 <__fixunssfsi>
 890:	68 94       	set
 892:	b1 11       	cpse	r27, r1
 894:	d9 c0       	rjmp	.+434    	; 0xa48 <__fp_szero>
 896:	08 95       	ret

00000898 <__fixunssfsi>:
 898:	bc d0       	rcall	.+376    	; 0xa12 <__fp_splitA>
 89a:	88 f0       	brcs	.+34     	; 0x8be <__fixunssfsi+0x26>
 89c:	9f 57       	subi	r25, 0x7F	; 127
 89e:	90 f0       	brcs	.+36     	; 0x8c4 <__fixunssfsi+0x2c>
 8a0:	b9 2f       	mov	r27, r25
 8a2:	99 27       	eor	r25, r25
 8a4:	b7 51       	subi	r27, 0x17	; 23
 8a6:	a0 f0       	brcs	.+40     	; 0x8d0 <__fixunssfsi+0x38>
 8a8:	d1 f0       	breq	.+52     	; 0x8de <__fixunssfsi+0x46>
 8aa:	66 0f       	add	r22, r22
 8ac:	77 1f       	adc	r23, r23
 8ae:	88 1f       	adc	r24, r24
 8b0:	99 1f       	adc	r25, r25
 8b2:	1a f0       	brmi	.+6      	; 0x8ba <__fixunssfsi+0x22>
 8b4:	ba 95       	dec	r27
 8b6:	c9 f7       	brne	.-14     	; 0x8aa <__fixunssfsi+0x12>
 8b8:	12 c0       	rjmp	.+36     	; 0x8de <__fixunssfsi+0x46>
 8ba:	b1 30       	cpi	r27, 0x01	; 1
 8bc:	81 f0       	breq	.+32     	; 0x8de <__fixunssfsi+0x46>
 8be:	c3 d0       	rcall	.+390    	; 0xa46 <__fp_zero>
 8c0:	b1 e0       	ldi	r27, 0x01	; 1
 8c2:	08 95       	ret
 8c4:	c0 c0       	rjmp	.+384    	; 0xa46 <__fp_zero>
 8c6:	67 2f       	mov	r22, r23
 8c8:	78 2f       	mov	r23, r24
 8ca:	88 27       	eor	r24, r24
 8cc:	b8 5f       	subi	r27, 0xF8	; 248
 8ce:	39 f0       	breq	.+14     	; 0x8de <__fixunssfsi+0x46>
 8d0:	b9 3f       	cpi	r27, 0xF9	; 249
 8d2:	cc f3       	brlt	.-14     	; 0x8c6 <__fixunssfsi+0x2e>
 8d4:	86 95       	lsr	r24
 8d6:	77 95       	ror	r23
 8d8:	67 95       	ror	r22
 8da:	b3 95       	inc	r27
 8dc:	d9 f7       	brne	.-10     	; 0x8d4 <__fixunssfsi+0x3c>
 8de:	3e f4       	brtc	.+14     	; 0x8ee <__fixunssfsi+0x56>
 8e0:	90 95       	com	r25
 8e2:	80 95       	com	r24
 8e4:	70 95       	com	r23
 8e6:	61 95       	neg	r22
 8e8:	7f 4f       	sbci	r23, 0xFF	; 255
 8ea:	8f 4f       	sbci	r24, 0xFF	; 255
 8ec:	9f 4f       	sbci	r25, 0xFF	; 255
 8ee:	08 95       	ret

000008f0 <__floatunsisf>:
 8f0:	e8 94       	clt
 8f2:	09 c0       	rjmp	.+18     	; 0x906 <__floatsisf+0x12>

000008f4 <__floatsisf>:
 8f4:	97 fb       	bst	r25, 7
 8f6:	3e f4       	brtc	.+14     	; 0x906 <__floatsisf+0x12>
 8f8:	90 95       	com	r25
 8fa:	80 95       	com	r24
 8fc:	70 95       	com	r23
 8fe:	61 95       	neg	r22
 900:	7f 4f       	sbci	r23, 0xFF	; 255
 902:	8f 4f       	sbci	r24, 0xFF	; 255
 904:	9f 4f       	sbci	r25, 0xFF	; 255
 906:	99 23       	and	r25, r25
 908:	a9 f0       	breq	.+42     	; 0x934 <__floatsisf+0x40>
 90a:	f9 2f       	mov	r31, r25
 90c:	96 e9       	ldi	r25, 0x96	; 150
 90e:	bb 27       	eor	r27, r27
 910:	93 95       	inc	r25
 912:	f6 95       	lsr	r31
 914:	87 95       	ror	r24
 916:	77 95       	ror	r23
 918:	67 95       	ror	r22
 91a:	b7 95       	ror	r27
 91c:	f1 11       	cpse	r31, r1
 91e:	f8 cf       	rjmp	.-16     	; 0x910 <__floatsisf+0x1c>
 920:	fa f4       	brpl	.+62     	; 0x960 <__floatsisf+0x6c>
 922:	bb 0f       	add	r27, r27
 924:	11 f4       	brne	.+4      	; 0x92a <__floatsisf+0x36>
 926:	60 ff       	sbrs	r22, 0
 928:	1b c0       	rjmp	.+54     	; 0x960 <__floatsisf+0x6c>
 92a:	6f 5f       	subi	r22, 0xFF	; 255
 92c:	7f 4f       	sbci	r23, 0xFF	; 255
 92e:	8f 4f       	sbci	r24, 0xFF	; 255
 930:	9f 4f       	sbci	r25, 0xFF	; 255
 932:	16 c0       	rjmp	.+44     	; 0x960 <__floatsisf+0x6c>
 934:	88 23       	and	r24, r24
 936:	11 f0       	breq	.+4      	; 0x93c <__floatsisf+0x48>
 938:	96 e9       	ldi	r25, 0x96	; 150
 93a:	11 c0       	rjmp	.+34     	; 0x95e <__floatsisf+0x6a>
 93c:	77 23       	and	r23, r23
 93e:	21 f0       	breq	.+8      	; 0x948 <__floatsisf+0x54>
 940:	9e e8       	ldi	r25, 0x8E	; 142
 942:	87 2f       	mov	r24, r23
 944:	76 2f       	mov	r23, r22
 946:	05 c0       	rjmp	.+10     	; 0x952 <__floatsisf+0x5e>
 948:	66 23       	and	r22, r22
 94a:	71 f0       	breq	.+28     	; 0x968 <__floatsisf+0x74>
 94c:	96 e8       	ldi	r25, 0x86	; 134
 94e:	86 2f       	mov	r24, r22
 950:	70 e0       	ldi	r23, 0x00	; 0
 952:	60 e0       	ldi	r22, 0x00	; 0
 954:	2a f0       	brmi	.+10     	; 0x960 <__floatsisf+0x6c>
 956:	9a 95       	dec	r25
 958:	66 0f       	add	r22, r22
 95a:	77 1f       	adc	r23, r23
 95c:	88 1f       	adc	r24, r24
 95e:	da f7       	brpl	.-10     	; 0x956 <__floatsisf+0x62>
 960:	88 0f       	add	r24, r24
 962:	96 95       	lsr	r25
 964:	87 95       	ror	r24
 966:	97 f9       	bld	r25, 7
 968:	08 95       	ret

0000096a <__fp_cmp>:
 96a:	99 0f       	add	r25, r25
 96c:	00 08       	sbc	r0, r0
 96e:	55 0f       	add	r21, r21
 970:	aa 0b       	sbc	r26, r26
 972:	e0 e8       	ldi	r30, 0x80	; 128
 974:	fe ef       	ldi	r31, 0xFE	; 254
 976:	16 16       	cp	r1, r22
 978:	17 06       	cpc	r1, r23
 97a:	e8 07       	cpc	r30, r24
 97c:	f9 07       	cpc	r31, r25
 97e:	c0 f0       	brcs	.+48     	; 0x9b0 <__fp_cmp+0x46>
 980:	12 16       	cp	r1, r18
 982:	13 06       	cpc	r1, r19
 984:	e4 07       	cpc	r30, r20
 986:	f5 07       	cpc	r31, r21
 988:	98 f0       	brcs	.+38     	; 0x9b0 <__fp_cmp+0x46>
 98a:	62 1b       	sub	r22, r18
 98c:	73 0b       	sbc	r23, r19
 98e:	84 0b       	sbc	r24, r20
 990:	95 0b       	sbc	r25, r21
 992:	39 f4       	brne	.+14     	; 0x9a2 <__fp_cmp+0x38>
 994:	0a 26       	eor	r0, r26
 996:	61 f0       	breq	.+24     	; 0x9b0 <__fp_cmp+0x46>
 998:	23 2b       	or	r18, r19
 99a:	24 2b       	or	r18, r20
 99c:	25 2b       	or	r18, r21
 99e:	21 f4       	brne	.+8      	; 0x9a8 <__fp_cmp+0x3e>
 9a0:	08 95       	ret
 9a2:	0a 26       	eor	r0, r26
 9a4:	09 f4       	brne	.+2      	; 0x9a8 <__fp_cmp+0x3e>
 9a6:	a1 40       	sbci	r26, 0x01	; 1
 9a8:	a6 95       	lsr	r26
 9aa:	8f ef       	ldi	r24, 0xFF	; 255
 9ac:	81 1d       	adc	r24, r1
 9ae:	81 1d       	adc	r24, r1
 9b0:	08 95       	ret

000009b2 <__fp_inf>:
 9b2:	97 f9       	bld	r25, 7
 9b4:	9f 67       	ori	r25, 0x7F	; 127
 9b6:	80 e8       	ldi	r24, 0x80	; 128
 9b8:	70 e0       	ldi	r23, 0x00	; 0
 9ba:	60 e0       	ldi	r22, 0x00	; 0
 9bc:	08 95       	ret

000009be <__fp_nan>:
 9be:	9f ef       	ldi	r25, 0xFF	; 255
 9c0:	80 ec       	ldi	r24, 0xC0	; 192
 9c2:	08 95       	ret

000009c4 <__fp_pscA>:
 9c4:	00 24       	eor	r0, r0
 9c6:	0a 94       	dec	r0
 9c8:	16 16       	cp	r1, r22
 9ca:	17 06       	cpc	r1, r23
 9cc:	18 06       	cpc	r1, r24
 9ce:	09 06       	cpc	r0, r25
 9d0:	08 95       	ret

000009d2 <__fp_pscB>:
 9d2:	00 24       	eor	r0, r0
 9d4:	0a 94       	dec	r0
 9d6:	12 16       	cp	r1, r18
 9d8:	13 06       	cpc	r1, r19
 9da:	14 06       	cpc	r1, r20
 9dc:	05 06       	cpc	r0, r21
 9de:	08 95       	ret

000009e0 <__fp_round>:
 9e0:	09 2e       	mov	r0, r25
 9e2:	03 94       	inc	r0
 9e4:	00 0c       	add	r0, r0
 9e6:	11 f4       	brne	.+4      	; 0x9ec <__fp_round+0xc>
 9e8:	88 23       	and	r24, r24
 9ea:	52 f0       	brmi	.+20     	; 0xa00 <__fp_round+0x20>
 9ec:	bb 0f       	add	r27, r27
 9ee:	40 f4       	brcc	.+16     	; 0xa00 <__fp_round+0x20>
 9f0:	bf 2b       	or	r27, r31
 9f2:	11 f4       	brne	.+4      	; 0x9f8 <__fp_round+0x18>
 9f4:	60 ff       	sbrs	r22, 0
 9f6:	04 c0       	rjmp	.+8      	; 0xa00 <__fp_round+0x20>
 9f8:	6f 5f       	subi	r22, 0xFF	; 255
 9fa:	7f 4f       	sbci	r23, 0xFF	; 255
 9fc:	8f 4f       	sbci	r24, 0xFF	; 255
 9fe:	9f 4f       	sbci	r25, 0xFF	; 255
 a00:	08 95       	ret

00000a02 <__fp_split3>:
 a02:	57 fd       	sbrc	r21, 7
 a04:	90 58       	subi	r25, 0x80	; 128
 a06:	44 0f       	add	r20, r20
 a08:	55 1f       	adc	r21, r21
 a0a:	59 f0       	breq	.+22     	; 0xa22 <__fp_splitA+0x10>
 a0c:	5f 3f       	cpi	r21, 0xFF	; 255
 a0e:	71 f0       	breq	.+28     	; 0xa2c <__fp_splitA+0x1a>
 a10:	47 95       	ror	r20

00000a12 <__fp_splitA>:
 a12:	88 0f       	add	r24, r24
 a14:	97 fb       	bst	r25, 7
 a16:	99 1f       	adc	r25, r25
 a18:	61 f0       	breq	.+24     	; 0xa32 <__fp_splitA+0x20>
 a1a:	9f 3f       	cpi	r25, 0xFF	; 255
 a1c:	79 f0       	breq	.+30     	; 0xa3c <__fp_splitA+0x2a>
 a1e:	87 95       	ror	r24
 a20:	08 95       	ret
 a22:	12 16       	cp	r1, r18
 a24:	13 06       	cpc	r1, r19
 a26:	14 06       	cpc	r1, r20
 a28:	55 1f       	adc	r21, r21
 a2a:	f2 cf       	rjmp	.-28     	; 0xa10 <__fp_split3+0xe>
 a2c:	46 95       	lsr	r20
 a2e:	f1 df       	rcall	.-30     	; 0xa12 <__fp_splitA>
 a30:	08 c0       	rjmp	.+16     	; 0xa42 <__fp_splitA+0x30>
 a32:	16 16       	cp	r1, r22
 a34:	17 06       	cpc	r1, r23
 a36:	18 06       	cpc	r1, r24
 a38:	99 1f       	adc	r25, r25
 a3a:	f1 cf       	rjmp	.-30     	; 0xa1e <__fp_splitA+0xc>
 a3c:	86 95       	lsr	r24
 a3e:	71 05       	cpc	r23, r1
 a40:	61 05       	cpc	r22, r1
 a42:	08 94       	sec
 a44:	08 95       	ret

00000a46 <__fp_zero>:
 a46:	e8 94       	clt

00000a48 <__fp_szero>:
 a48:	bb 27       	eor	r27, r27
 a4a:	66 27       	eor	r22, r22
 a4c:	77 27       	eor	r23, r23
 a4e:	cb 01       	movw	r24, r22
 a50:	97 f9       	bld	r25, 7
 a52:	08 95       	ret

00000a54 <__gesf2>:
 a54:	8a df       	rcall	.-236    	; 0x96a <__fp_cmp>
 a56:	08 f4       	brcc	.+2      	; 0xa5a <__gesf2+0x6>
 a58:	8f ef       	ldi	r24, 0xFF	; 255
 a5a:	08 95       	ret
 a5c:	0e f0       	brts	.+2      	; 0xa60 <__gesf2+0xc>
 a5e:	23 c1       	rjmp	.+582    	; 0xca6 <__fp_mpack>
 a60:	ae cf       	rjmp	.-164    	; 0x9be <__fp_nan>
 a62:	68 94       	set
 a64:	a6 cf       	rjmp	.-180    	; 0x9b2 <__fp_inf>

00000a66 <log>:
 a66:	d5 df       	rcall	.-86     	; 0xa12 <__fp_splitA>
 a68:	c8 f3       	brcs	.-14     	; 0xa5c <__gesf2+0x8>
 a6a:	99 23       	and	r25, r25
 a6c:	d1 f3       	breq	.-12     	; 0xa62 <__gesf2+0xe>
 a6e:	c6 f3       	brts	.-16     	; 0xa60 <__gesf2+0xc>
 a70:	df 93       	push	r29
 a72:	cf 93       	push	r28
 a74:	1f 93       	push	r17
 a76:	0f 93       	push	r16
 a78:	ff 92       	push	r15
 a7a:	c9 2f       	mov	r28, r25
 a7c:	dd 27       	eor	r29, r29
 a7e:	88 23       	and	r24, r24
 a80:	2a f0       	brmi	.+10     	; 0xa8c <log+0x26>
 a82:	21 97       	sbiw	r28, 0x01	; 1
 a84:	66 0f       	add	r22, r22
 a86:	77 1f       	adc	r23, r23
 a88:	88 1f       	adc	r24, r24
 a8a:	da f7       	brpl	.-10     	; 0xa82 <log+0x1c>
 a8c:	20 e0       	ldi	r18, 0x00	; 0
 a8e:	30 e0       	ldi	r19, 0x00	; 0
 a90:	40 e8       	ldi	r20, 0x80	; 128
 a92:	5f eb       	ldi	r21, 0xBF	; 191
 a94:	9f e3       	ldi	r25, 0x3F	; 63
 a96:	88 39       	cpi	r24, 0x98	; 152
 a98:	20 f0       	brcs	.+8      	; 0xaa2 <log+0x3c>
 a9a:	80 3e       	cpi	r24, 0xE0	; 224
 a9c:	30 f0       	brcs	.+12     	; 0xaaa <log+0x44>
 a9e:	21 96       	adiw	r28, 0x01	; 1
 aa0:	8f 77       	andi	r24, 0x7F	; 127
 aa2:	25 de       	rcall	.-950    	; 0x6ee <__addsf3>
 aa4:	ec e8       	ldi	r30, 0x8C	; 140
 aa6:	f0 e0       	ldi	r31, 0x00	; 0
 aa8:	03 c0       	rjmp	.+6      	; 0xab0 <log+0x4a>
 aaa:	21 de       	rcall	.-958    	; 0x6ee <__addsf3>
 aac:	e9 eb       	ldi	r30, 0xB9	; 185
 aae:	f0 e0       	ldi	r31, 0x00	; 0
 ab0:	08 d1       	rcall	.+528    	; 0xcc2 <__fp_powser>
 ab2:	8b 01       	movw	r16, r22
 ab4:	be 01       	movw	r22, r28
 ab6:	ec 01       	movw	r28, r24
 ab8:	fb 2e       	mov	r15, r27
 aba:	6f 57       	subi	r22, 0x7F	; 127
 abc:	71 09       	sbc	r23, r1
 abe:	75 95       	asr	r23
 ac0:	77 1f       	adc	r23, r23
 ac2:	88 0b       	sbc	r24, r24
 ac4:	99 0b       	sbc	r25, r25
 ac6:	16 df       	rcall	.-468    	; 0x8f4 <__floatsisf>
 ac8:	28 e1       	ldi	r18, 0x18	; 24
 aca:	32 e7       	ldi	r19, 0x72	; 114
 acc:	41 e3       	ldi	r20, 0x31	; 49
 ace:	5f e3       	ldi	r21, 0x3F	; 63
 ad0:	16 d0       	rcall	.+44     	; 0xafe <__mulsf3x>
 ad2:	af 2d       	mov	r26, r15
 ad4:	98 01       	movw	r18, r16
 ad6:	ae 01       	movw	r20, r28
 ad8:	ff 90       	pop	r15
 ada:	0f 91       	pop	r16
 adc:	1f 91       	pop	r17
 ade:	cf 91       	pop	r28
 ae0:	df 91       	pop	r29
 ae2:	16 de       	rcall	.-980    	; 0x710 <__addsf3x>
 ae4:	7d cf       	rjmp	.-262    	; 0x9e0 <__fp_round>

00000ae6 <__mulsf3>:
 ae6:	0b d0       	rcall	.+22     	; 0xafe <__mulsf3x>
 ae8:	7b cf       	rjmp	.-266    	; 0x9e0 <__fp_round>
 aea:	6c df       	rcall	.-296    	; 0x9c4 <__fp_pscA>
 aec:	28 f0       	brcs	.+10     	; 0xaf8 <__mulsf3+0x12>
 aee:	71 df       	rcall	.-286    	; 0x9d2 <__fp_pscB>
 af0:	18 f0       	brcs	.+6      	; 0xaf8 <__mulsf3+0x12>
 af2:	95 23       	and	r25, r21
 af4:	09 f0       	breq	.+2      	; 0xaf8 <__mulsf3+0x12>
 af6:	5d cf       	rjmp	.-326    	; 0x9b2 <__fp_inf>
 af8:	62 cf       	rjmp	.-316    	; 0x9be <__fp_nan>
 afa:	11 24       	eor	r1, r1
 afc:	a5 cf       	rjmp	.-182    	; 0xa48 <__fp_szero>

00000afe <__mulsf3x>:
 afe:	81 df       	rcall	.-254    	; 0xa02 <__fp_split3>
 b00:	a0 f3       	brcs	.-24     	; 0xaea <__mulsf3+0x4>

00000b02 <__mulsf3_pse>:
 b02:	95 9f       	mul	r25, r21
 b04:	d1 f3       	breq	.-12     	; 0xafa <__mulsf3+0x14>
 b06:	95 0f       	add	r25, r21
 b08:	50 e0       	ldi	r21, 0x00	; 0
 b0a:	55 1f       	adc	r21, r21
 b0c:	62 9f       	mul	r22, r18
 b0e:	f0 01       	movw	r30, r0
 b10:	72 9f       	mul	r23, r18
 b12:	bb 27       	eor	r27, r27
 b14:	f0 0d       	add	r31, r0
 b16:	b1 1d       	adc	r27, r1
 b18:	63 9f       	mul	r22, r19
 b1a:	aa 27       	eor	r26, r26
 b1c:	f0 0d       	add	r31, r0
 b1e:	b1 1d       	adc	r27, r1
 b20:	aa 1f       	adc	r26, r26
 b22:	64 9f       	mul	r22, r20
 b24:	66 27       	eor	r22, r22
 b26:	b0 0d       	add	r27, r0
 b28:	a1 1d       	adc	r26, r1
 b2a:	66 1f       	adc	r22, r22
 b2c:	82 9f       	mul	r24, r18
 b2e:	22 27       	eor	r18, r18
 b30:	b0 0d       	add	r27, r0
 b32:	a1 1d       	adc	r26, r1
 b34:	62 1f       	adc	r22, r18
 b36:	73 9f       	mul	r23, r19
 b38:	b0 0d       	add	r27, r0
 b3a:	a1 1d       	adc	r26, r1
 b3c:	62 1f       	adc	r22, r18
 b3e:	83 9f       	mul	r24, r19
 b40:	a0 0d       	add	r26, r0
 b42:	61 1d       	adc	r22, r1
 b44:	22 1f       	adc	r18, r18
 b46:	74 9f       	mul	r23, r20
 b48:	33 27       	eor	r19, r19
 b4a:	a0 0d       	add	r26, r0
 b4c:	61 1d       	adc	r22, r1
 b4e:	23 1f       	adc	r18, r19
 b50:	84 9f       	mul	r24, r20
 b52:	60 0d       	add	r22, r0
 b54:	21 1d       	adc	r18, r1
 b56:	82 2f       	mov	r24, r18
 b58:	76 2f       	mov	r23, r22
 b5a:	6a 2f       	mov	r22, r26
 b5c:	11 24       	eor	r1, r1
 b5e:	9f 57       	subi	r25, 0x7F	; 127
 b60:	50 40       	sbci	r21, 0x00	; 0
 b62:	8a f0       	brmi	.+34     	; 0xb86 <__mulsf3_pse+0x84>
 b64:	e1 f0       	breq	.+56     	; 0xb9e <__mulsf3_pse+0x9c>
 b66:	88 23       	and	r24, r24
 b68:	4a f0       	brmi	.+18     	; 0xb7c <__mulsf3_pse+0x7a>
 b6a:	ee 0f       	add	r30, r30
 b6c:	ff 1f       	adc	r31, r31
 b6e:	bb 1f       	adc	r27, r27
 b70:	66 1f       	adc	r22, r22
 b72:	77 1f       	adc	r23, r23
 b74:	88 1f       	adc	r24, r24
 b76:	91 50       	subi	r25, 0x01	; 1
 b78:	50 40       	sbci	r21, 0x00	; 0
 b7a:	a9 f7       	brne	.-22     	; 0xb66 <__mulsf3_pse+0x64>
 b7c:	9e 3f       	cpi	r25, 0xFE	; 254
 b7e:	51 05       	cpc	r21, r1
 b80:	70 f0       	brcs	.+28     	; 0xb9e <__mulsf3_pse+0x9c>
 b82:	17 cf       	rjmp	.-466    	; 0x9b2 <__fp_inf>
 b84:	61 cf       	rjmp	.-318    	; 0xa48 <__fp_szero>
 b86:	5f 3f       	cpi	r21, 0xFF	; 255
 b88:	ec f3       	brlt	.-6      	; 0xb84 <__mulsf3_pse+0x82>
 b8a:	98 3e       	cpi	r25, 0xE8	; 232
 b8c:	dc f3       	brlt	.-10     	; 0xb84 <__mulsf3_pse+0x82>
 b8e:	86 95       	lsr	r24
 b90:	77 95       	ror	r23
 b92:	67 95       	ror	r22
 b94:	b7 95       	ror	r27
 b96:	f7 95       	ror	r31
 b98:	e7 95       	ror	r30
 b9a:	9f 5f       	subi	r25, 0xFF	; 255
 b9c:	c1 f7       	brne	.-16     	; 0xb8e <__mulsf3_pse+0x8c>
 b9e:	fe 2b       	or	r31, r30
 ba0:	88 0f       	add	r24, r24
 ba2:	91 1d       	adc	r25, r1
 ba4:	96 95       	lsr	r25
 ba6:	87 95       	ror	r24
 ba8:	97 f9       	bld	r25, 7
 baa:	08 95       	ret

00000bac <pow>:
 bac:	fa 01       	movw	r30, r20
 bae:	ee 0f       	add	r30, r30
 bb0:	ff 1f       	adc	r31, r31
 bb2:	30 96       	adiw	r30, 0x00	; 0
 bb4:	21 05       	cpc	r18, r1
 bb6:	31 05       	cpc	r19, r1
 bb8:	99 f1       	breq	.+102    	; 0xc20 <pow+0x74>
 bba:	61 15       	cp	r22, r1
 bbc:	71 05       	cpc	r23, r1
 bbe:	61 f4       	brne	.+24     	; 0xbd8 <pow+0x2c>
 bc0:	80 38       	cpi	r24, 0x80	; 128
 bc2:	bf e3       	ldi	r27, 0x3F	; 63
 bc4:	9b 07       	cpc	r25, r27
 bc6:	49 f1       	breq	.+82     	; 0xc1a <pow+0x6e>
 bc8:	68 94       	set
 bca:	90 38       	cpi	r25, 0x80	; 128
 bcc:	81 05       	cpc	r24, r1
 bce:	61 f0       	breq	.+24     	; 0xbe8 <pow+0x3c>
 bd0:	80 38       	cpi	r24, 0x80	; 128
 bd2:	bf ef       	ldi	r27, 0xFF	; 255
 bd4:	9b 07       	cpc	r25, r27
 bd6:	41 f0       	breq	.+16     	; 0xbe8 <pow+0x3c>
 bd8:	99 23       	and	r25, r25
 bda:	42 f5       	brpl	.+80     	; 0xc2c <pow+0x80>
 bdc:	ff 3f       	cpi	r31, 0xFF	; 255
 bde:	e1 05       	cpc	r30, r1
 be0:	31 05       	cpc	r19, r1
 be2:	21 05       	cpc	r18, r1
 be4:	11 f1       	breq	.+68     	; 0xc2a <pow+0x7e>
 be6:	e8 94       	clt
 be8:	08 94       	sec
 bea:	e7 95       	ror	r30
 bec:	d9 01       	movw	r26, r18
 bee:	aa 23       	and	r26, r26
 bf0:	29 f4       	brne	.+10     	; 0xbfc <pow+0x50>
 bf2:	ab 2f       	mov	r26, r27
 bf4:	be 2f       	mov	r27, r30
 bf6:	f8 5f       	subi	r31, 0xF8	; 248
 bf8:	d0 f3       	brcs	.-12     	; 0xbee <pow+0x42>
 bfa:	10 c0       	rjmp	.+32     	; 0xc1c <pow+0x70>
 bfc:	ff 5f       	subi	r31, 0xFF	; 255
 bfe:	70 f4       	brcc	.+28     	; 0xc1c <pow+0x70>
 c00:	a6 95       	lsr	r26
 c02:	e0 f7       	brcc	.-8      	; 0xbfc <pow+0x50>
 c04:	f7 39       	cpi	r31, 0x97	; 151
 c06:	50 f0       	brcs	.+20     	; 0xc1c <pow+0x70>
 c08:	19 f0       	breq	.+6      	; 0xc10 <pow+0x64>
 c0a:	ff 3a       	cpi	r31, 0xAF	; 175
 c0c:	38 f4       	brcc	.+14     	; 0xc1c <pow+0x70>
 c0e:	9f 77       	andi	r25, 0x7F	; 127
 c10:	9f 93       	push	r25
 c12:	0c d0       	rcall	.+24     	; 0xc2c <pow+0x80>
 c14:	0f 90       	pop	r0
 c16:	07 fc       	sbrc	r0, 7
 c18:	90 58       	subi	r25, 0x80	; 128
 c1a:	08 95       	ret
 c1c:	3e f0       	brts	.+14     	; 0xc2c <pow+0x80>
 c1e:	cf ce       	rjmp	.-610    	; 0x9be <__fp_nan>
 c20:	60 e0       	ldi	r22, 0x00	; 0
 c22:	70 e0       	ldi	r23, 0x00	; 0
 c24:	80 e8       	ldi	r24, 0x80	; 128
 c26:	9f e3       	ldi	r25, 0x3F	; 63
 c28:	08 95       	ret
 c2a:	4f e7       	ldi	r20, 0x7F	; 127
 c2c:	9f 77       	andi	r25, 0x7F	; 127
 c2e:	5f 93       	push	r21
 c30:	4f 93       	push	r20
 c32:	3f 93       	push	r19
 c34:	2f 93       	push	r18
 c36:	17 df       	rcall	.-466    	; 0xa66 <log>
 c38:	2f 91       	pop	r18
 c3a:	3f 91       	pop	r19
 c3c:	4f 91       	pop	r20
 c3e:	5f 91       	pop	r21
 c40:	52 df       	rcall	.-348    	; 0xae6 <__mulsf3>
 c42:	05 c0       	rjmp	.+10     	; 0xc4e <exp>
 c44:	19 f4       	brne	.+6      	; 0xc4c <pow+0xa0>
 c46:	0e f0       	brts	.+2      	; 0xc4a <pow+0x9e>
 c48:	b4 ce       	rjmp	.-664    	; 0x9b2 <__fp_inf>
 c4a:	fd ce       	rjmp	.-518    	; 0xa46 <__fp_zero>
 c4c:	b8 ce       	rjmp	.-656    	; 0x9be <__fp_nan>

00000c4e <exp>:
 c4e:	e1 de       	rcall	.-574    	; 0xa12 <__fp_splitA>
 c50:	c8 f3       	brcs	.-14     	; 0xc44 <pow+0x98>
 c52:	96 38       	cpi	r25, 0x86	; 134
 c54:	c0 f7       	brcc	.-16     	; 0xc46 <pow+0x9a>
 c56:	07 f8       	bld	r0, 7
 c58:	0f 92       	push	r0
 c5a:	e8 94       	clt
 c5c:	2b e3       	ldi	r18, 0x3B	; 59
 c5e:	3a ea       	ldi	r19, 0xAA	; 170
 c60:	48 eb       	ldi	r20, 0xB8	; 184
 c62:	5f e7       	ldi	r21, 0x7F	; 127
 c64:	4e df       	rcall	.-356    	; 0xb02 <__mulsf3_pse>
 c66:	0f 92       	push	r0
 c68:	0f 92       	push	r0
 c6a:	0f 92       	push	r0
 c6c:	4d b7       	in	r20, 0x3d	; 61
 c6e:	5e b7       	in	r21, 0x3e	; 62
 c70:	0f 92       	push	r0
 c72:	89 d0       	rcall	.+274    	; 0xd86 <modf>
 c74:	e6 ee       	ldi	r30, 0xE6	; 230
 c76:	f0 e0       	ldi	r31, 0x00	; 0
 c78:	24 d0       	rcall	.+72     	; 0xcc2 <__fp_powser>
 c7a:	4f 91       	pop	r20
 c7c:	5f 91       	pop	r21
 c7e:	ef 91       	pop	r30
 c80:	ff 91       	pop	r31
 c82:	e5 95       	asr	r30
 c84:	ee 1f       	adc	r30, r30
 c86:	ff 1f       	adc	r31, r31
 c88:	49 f0       	breq	.+18     	; 0xc9c <exp+0x4e>
 c8a:	fe 57       	subi	r31, 0x7E	; 126
 c8c:	e0 68       	ori	r30, 0x80	; 128
 c8e:	44 27       	eor	r20, r20
 c90:	ee 0f       	add	r30, r30
 c92:	44 1f       	adc	r20, r20
 c94:	fa 95       	dec	r31
 c96:	e1 f7       	brne	.-8      	; 0xc90 <exp+0x42>
 c98:	41 95       	neg	r20
 c9a:	55 0b       	sbc	r21, r21
 c9c:	40 d0       	rcall	.+128    	; 0xd1e <ldexp>
 c9e:	0f 90       	pop	r0
 ca0:	07 fe       	sbrs	r0, 7
 ca2:	34 c0       	rjmp	.+104    	; 0xd0c <inverse>
 ca4:	08 95       	ret

00000ca6 <__fp_mpack>:
 ca6:	9f 3f       	cpi	r25, 0xFF	; 255
 ca8:	31 f0       	breq	.+12     	; 0xcb6 <__fp_mpack_finite+0xc>

00000caa <__fp_mpack_finite>:
 caa:	91 50       	subi	r25, 0x01	; 1
 cac:	20 f4       	brcc	.+8      	; 0xcb6 <__fp_mpack_finite+0xc>
 cae:	87 95       	ror	r24
 cb0:	77 95       	ror	r23
 cb2:	67 95       	ror	r22
 cb4:	b7 95       	ror	r27
 cb6:	88 0f       	add	r24, r24
 cb8:	91 1d       	adc	r25, r1
 cba:	96 95       	lsr	r25
 cbc:	87 95       	ror	r24
 cbe:	97 f9       	bld	r25, 7
 cc0:	08 95       	ret

00000cc2 <__fp_powser>:
 cc2:	df 93       	push	r29
 cc4:	cf 93       	push	r28
 cc6:	1f 93       	push	r17
 cc8:	0f 93       	push	r16
 cca:	ff 92       	push	r15
 ccc:	ef 92       	push	r14
 cce:	df 92       	push	r13
 cd0:	7b 01       	movw	r14, r22
 cd2:	8c 01       	movw	r16, r24
 cd4:	68 94       	set
 cd6:	05 c0       	rjmp	.+10     	; 0xce2 <__fp_powser+0x20>
 cd8:	da 2e       	mov	r13, r26
 cda:	ef 01       	movw	r28, r30
 cdc:	10 df       	rcall	.-480    	; 0xafe <__mulsf3x>
 cde:	fe 01       	movw	r30, r28
 ce0:	e8 94       	clt
 ce2:	a5 91       	lpm	r26, Z+
 ce4:	25 91       	lpm	r18, Z+
 ce6:	35 91       	lpm	r19, Z+
 ce8:	45 91       	lpm	r20, Z+
 cea:	55 91       	lpm	r21, Z+
 cec:	ae f3       	brts	.-22     	; 0xcd8 <__fp_powser+0x16>
 cee:	ef 01       	movw	r28, r30
 cf0:	0f dd       	rcall	.-1506   	; 0x710 <__addsf3x>
 cf2:	fe 01       	movw	r30, r28
 cf4:	97 01       	movw	r18, r14
 cf6:	a8 01       	movw	r20, r16
 cf8:	da 94       	dec	r13
 cfa:	79 f7       	brne	.-34     	; 0xcda <__fp_powser+0x18>
 cfc:	df 90       	pop	r13
 cfe:	ef 90       	pop	r14
 d00:	ff 90       	pop	r15
 d02:	0f 91       	pop	r16
 d04:	1f 91       	pop	r17
 d06:	cf 91       	pop	r28
 d08:	df 91       	pop	r29
 d0a:	08 95       	ret

00000d0c <inverse>:
 d0c:	9b 01       	movw	r18, r22
 d0e:	ac 01       	movw	r20, r24
 d10:	60 e0       	ldi	r22, 0x00	; 0
 d12:	70 e0       	ldi	r23, 0x00	; 0
 d14:	80 e8       	ldi	r24, 0x80	; 128
 d16:	9f e3       	ldi	r25, 0x3F	; 63
 d18:	52 cd       	rjmp	.-1372   	; 0x7be <__divsf3>
 d1a:	4b ce       	rjmp	.-874    	; 0x9b2 <__fp_inf>
 d1c:	c4 cf       	rjmp	.-120    	; 0xca6 <__fp_mpack>

00000d1e <ldexp>:
 d1e:	79 de       	rcall	.-782    	; 0xa12 <__fp_splitA>
 d20:	e8 f3       	brcs	.-6      	; 0xd1c <inverse+0x10>
 d22:	99 23       	and	r25, r25
 d24:	d9 f3       	breq	.-10     	; 0xd1c <inverse+0x10>
 d26:	94 0f       	add	r25, r20
 d28:	51 1d       	adc	r21, r1
 d2a:	bb f3       	brvs	.-18     	; 0xd1a <inverse+0xe>
 d2c:	91 50       	subi	r25, 0x01	; 1
 d2e:	50 40       	sbci	r21, 0x00	; 0
 d30:	94 f0       	brlt	.+36     	; 0xd56 <ldexp+0x38>
 d32:	59 f0       	breq	.+22     	; 0xd4a <ldexp+0x2c>
 d34:	88 23       	and	r24, r24
 d36:	32 f0       	brmi	.+12     	; 0xd44 <ldexp+0x26>
 d38:	66 0f       	add	r22, r22
 d3a:	77 1f       	adc	r23, r23
 d3c:	88 1f       	adc	r24, r24
 d3e:	91 50       	subi	r25, 0x01	; 1
 d40:	50 40       	sbci	r21, 0x00	; 0
 d42:	c1 f7       	brne	.-16     	; 0xd34 <ldexp+0x16>
 d44:	9e 3f       	cpi	r25, 0xFE	; 254
 d46:	51 05       	cpc	r21, r1
 d48:	44 f7       	brge	.-48     	; 0xd1a <inverse+0xe>
 d4a:	88 0f       	add	r24, r24
 d4c:	91 1d       	adc	r25, r1
 d4e:	96 95       	lsr	r25
 d50:	87 95       	ror	r24
 d52:	97 f9       	bld	r25, 7
 d54:	08 95       	ret
 d56:	5f 3f       	cpi	r21, 0xFF	; 255
 d58:	ac f0       	brlt	.+42     	; 0xd84 <ldexp+0x66>
 d5a:	98 3e       	cpi	r25, 0xE8	; 232
 d5c:	9c f0       	brlt	.+38     	; 0xd84 <ldexp+0x66>
 d5e:	bb 27       	eor	r27, r27
 d60:	86 95       	lsr	r24
 d62:	77 95       	ror	r23
 d64:	67 95       	ror	r22
 d66:	b7 95       	ror	r27
 d68:	08 f4       	brcc	.+2      	; 0xd6c <ldexp+0x4e>
 d6a:	b1 60       	ori	r27, 0x01	; 1
 d6c:	93 95       	inc	r25
 d6e:	c1 f7       	brne	.-16     	; 0xd60 <ldexp+0x42>
 d70:	bb 0f       	add	r27, r27
 d72:	58 f7       	brcc	.-42     	; 0xd4a <ldexp+0x2c>
 d74:	11 f4       	brne	.+4      	; 0xd7a <ldexp+0x5c>
 d76:	60 ff       	sbrs	r22, 0
 d78:	e8 cf       	rjmp	.-48     	; 0xd4a <ldexp+0x2c>
 d7a:	6f 5f       	subi	r22, 0xFF	; 255
 d7c:	7f 4f       	sbci	r23, 0xFF	; 255
 d7e:	8f 4f       	sbci	r24, 0xFF	; 255
 d80:	9f 4f       	sbci	r25, 0xFF	; 255
 d82:	e3 cf       	rjmp	.-58     	; 0xd4a <ldexp+0x2c>
 d84:	61 ce       	rjmp	.-830    	; 0xa48 <__fp_szero>

00000d86 <modf>:
 d86:	fa 01       	movw	r30, r20
 d88:	dc 01       	movw	r26, r24
 d8a:	aa 0f       	add	r26, r26
 d8c:	bb 1f       	adc	r27, r27
 d8e:	9b 01       	movw	r18, r22
 d90:	ac 01       	movw	r20, r24
 d92:	bf 57       	subi	r27, 0x7F	; 127
 d94:	28 f4       	brcc	.+10     	; 0xda0 <modf+0x1a>
 d96:	22 27       	eor	r18, r18
 d98:	33 27       	eor	r19, r19
 d9a:	44 27       	eor	r20, r20
 d9c:	50 78       	andi	r21, 0x80	; 128
 d9e:	1f c0       	rjmp	.+62     	; 0xdde <modf+0x58>
 da0:	b7 51       	subi	r27, 0x17	; 23
 da2:	88 f4       	brcc	.+34     	; 0xdc6 <modf+0x40>
 da4:	ab 2f       	mov	r26, r27
 da6:	00 24       	eor	r0, r0
 da8:	46 95       	lsr	r20
 daa:	37 95       	ror	r19
 dac:	27 95       	ror	r18
 dae:	01 1c       	adc	r0, r1
 db0:	a3 95       	inc	r26
 db2:	d2 f3       	brmi	.-12     	; 0xda8 <modf+0x22>
 db4:	00 20       	and	r0, r0
 db6:	69 f0       	breq	.+26     	; 0xdd2 <modf+0x4c>
 db8:	22 0f       	add	r18, r18
 dba:	33 1f       	adc	r19, r19
 dbc:	44 1f       	adc	r20, r20
 dbe:	b3 95       	inc	r27
 dc0:	da f3       	brmi	.-10     	; 0xdb8 <modf+0x32>
 dc2:	0d d0       	rcall	.+26     	; 0xdde <modf+0x58>
 dc4:	93 cc       	rjmp	.-1754   	; 0x6ec <__subsf3>
 dc6:	61 30       	cpi	r22, 0x01	; 1
 dc8:	71 05       	cpc	r23, r1
 dca:	a0 e8       	ldi	r26, 0x80	; 128
 dcc:	8a 07       	cpc	r24, r26
 dce:	b9 46       	sbci	r27, 0x69	; 105
 dd0:	30 f4       	brcc	.+12     	; 0xdde <modf+0x58>
 dd2:	9b 01       	movw	r18, r22
 dd4:	ac 01       	movw	r20, r24
 dd6:	66 27       	eor	r22, r22
 dd8:	77 27       	eor	r23, r23
 dda:	88 27       	eor	r24, r24
 ddc:	90 78       	andi	r25, 0x80	; 128
 dde:	30 96       	adiw	r30, 0x00	; 0
 de0:	21 f0       	breq	.+8      	; 0xdea <modf+0x64>
 de2:	20 83       	st	Z, r18
 de4:	31 83       	std	Z+1, r19	; 0x01
 de6:	42 83       	std	Z+2, r20	; 0x02
 de8:	53 83       	std	Z+3, r21	; 0x03
 dea:	08 95       	ret

00000dec <_exit>:
 dec:	f8 94       	cli

00000dee <__stop_program>:
 dee:	ff cf       	rjmp	.-2      	; 0xdee <__stop_program>
