
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000992  00000a26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000992  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000030  00800102  00800102  00000a28  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a28  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00000a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b5a  00000000  00000000  00000c44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d1f  00000000  00000000  0000279e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f3a  00000000  00000000  000034bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000418  00000000  00000000  000043f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000803  00000000  00000000  00004810  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000890  00000000  00000000  00005013  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  000058a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	eb c1       	rjmp	.+982    	; 0x3f8 <__vector_8>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	2c c3       	rjmp	.+1624   	; 0x69a <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	ac c2       	rjmp	.+1368   	; 0x5aa <__vector_20>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e9       	ldi	r30, 0x92	; 146
  a0:	f9 e0       	ldi	r31, 0x09	; 9
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 33       	cpi	r26, 0x32	; 50
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	cb d1       	rcall	.+918    	; 0x45a <main>
  c4:	64 c4       	rjmp	.+2248   	; 0x98e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <init_BT>:
#include "Bluetooth.h"
#include "Marble.h"
#include <avr/io.h>

void init_BT(){
	UCSR1A = 0x00;
  c8:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
	UCSR1B = 0x18;
  cc:	88 e1       	ldi	r24, 0x18	; 24
  ce:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	UCSR1C = 0x06;
  d2:	86 e0       	ldi	r24, 0x06	; 6
  d4:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
	
	UBRR1H = 0x00;
  d8:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 103;
  dc:	87 e6       	ldi	r24, 0x67	; 103
  de:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
  e2:	08 95       	ret

000000e4 <BT_send>:
	return 0x00;
}

void BT_send(char msg){
	//send msg
	while(!(UCSR1A & (1<<UDRE))); //Wait for buffer to clear
  e4:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
  e8:	95 ff       	sbrs	r25, 5
  ea:	fc cf       	rjmp	.-8      	; 0xe4 <BT_send>
	UDR1 = msg; //send msg
  ec:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
  f0:	08 95       	ret

000000f2 <BT_Receive>:
char BT_Receive(){
	
	static char step = 0;
	static char tmp = 0;
	
	if(!(UCSR1A&(1<<RXC1))) return 0x00;
  f2:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
  f6:	88 23       	and	r24, r24
  f8:	0c f0       	brlt	.+2      	; 0xfc <BT_Receive+0xa>
  fa:	87 c0       	rjmp	.+270    	; 0x20a <BT_Receive+0x118>
	
	rdata = UDR1;
  fc:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 100:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <rdata>
	
	switch(step){
 104:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 108:	82 30       	cpi	r24, 0x02	; 2
 10a:	b1 f0       	breq	.+44     	; 0x138 <BT_Receive+0x46>
 10c:	83 30       	cpi	r24, 0x03	; 3
 10e:	b1 f1       	breq	.+108    	; 0x17c <BT_Receive+0x8a>
 110:	81 30       	cpi	r24, 0x01	; 1
 112:	09 f0       	breq	.+2      	; 0x116 <BT_Receive+0x24>
 114:	54 c0       	rjmp	.+168    	; 0x1be <BT_Receive+0xcc>
		case 1:
		if(rdata == '.') {
 116:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rdata>
 11a:	8e 32       	cpi	r24, 0x2E	; 46
 11c:	39 f4       	brne	.+14     	; 0x12c <BT_Receive+0x3a>
			step = 0;
 11e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
			BT_send(rdata);
 122:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rdata>
 126:	de df       	rcall	.-68     	; 0xe4 <BT_send>
			//ElectroMagnet_On();
			return 0x00;
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	08 95       	ret
		}
		else marble.color = rdata - '0';
 12c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rdata>
 130:	80 53       	subi	r24, 0x30	; 48
 132:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <marble>
		break;
 136:	43 c0       	rjmp	.+134    	; 0x1be <BT_Receive+0xcc>
		
		case 2:
		if(rdata == '.') {
 138:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rdata>
 13c:	8e 32       	cpi	r24, 0x2E	; 46
 13e:	39 f4       	brne	.+14     	; 0x14e <BT_Receive+0x5c>
			step = 0;
 140:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
			BT_send(rdata);
 144:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rdata>
 148:	cd df       	rcall	.-102    	; 0xe4 <BT_send>
			//ElectroMagnet_On();
			return 0x00;
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	08 95       	ret
		}
		else marble.posX = marble.posX * 10 + rdata - '0';
 14e:	e4 e0       	ldi	r30, 0x04	; 4
 150:	f1 e0       	ldi	r31, 0x01	; 1
 152:	81 81       	ldd	r24, Z+1	; 0x01
 154:	92 81       	ldd	r25, Z+2	; 0x02
 156:	9c 01       	movw	r18, r24
 158:	22 0f       	add	r18, r18
 15a:	33 1f       	adc	r19, r19
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	82 0f       	add	r24, r18
 16a:	93 1f       	adc	r25, r19
 16c:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <rdata>
 170:	82 0f       	add	r24, r18
 172:	91 1d       	adc	r25, r1
 174:	c0 97       	sbiw	r24, 0x30	; 48
 176:	92 83       	std	Z+2, r25	; 0x02
 178:	81 83       	std	Z+1, r24	; 0x01
		break;
 17a:	21 c0       	rjmp	.+66     	; 0x1be <BT_Receive+0xcc>
		
		case 3:
		if(rdata == '.') {
 17c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rdata>
 180:	8e 32       	cpi	r24, 0x2E	; 46
 182:	39 f4       	brne	.+14     	; 0x192 <BT_Receive+0xa0>
			step = 0;
 184:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
			BT_send(rdata);
 188:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rdata>
 18c:	ab df       	rcall	.-170    	; 0xe4 <BT_send>
			//ElectroMagnet_Off();
			return 0x01;
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	08 95       	ret
		}
		else marble.posY = marble.posY * 10 + rdata -'0';
 192:	e4 e0       	ldi	r30, 0x04	; 4
 194:	f1 e0       	ldi	r31, 0x01	; 1
 196:	83 81       	ldd	r24, Z+3	; 0x03
 198:	94 81       	ldd	r25, Z+4	; 0x04
 19a:	9c 01       	movw	r18, r24
 19c:	22 0f       	add	r18, r18
 19e:	33 1f       	adc	r19, r19
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	82 0f       	add	r24, r18
 1ae:	93 1f       	adc	r25, r19
 1b0:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <rdata>
 1b4:	82 0f       	add	r24, r18
 1b6:	91 1d       	adc	r25, r1
 1b8:	c0 97       	sbiw	r24, 0x30	; 48
 1ba:	94 83       	std	Z+4, r25	; 0x04
 1bc:	83 83       	std	Z+3, r24	; 0x03
		break;
	}
	
	if(rdata == '#') {
 1be:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rdata>
 1c2:	83 32       	cpi	r24, 0x23	; 35
 1c4:	31 f4       	brne	.+12     	; 0x1d2 <BT_Receive+0xe0>
		marble.color = 0;
 1c6:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <marble>
		step = 1;
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 1d0:	17 c0       	rjmp	.+46     	; 0x200 <BT_Receive+0x10e>
	}
	else if(rdata == '!'){
 1d2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rdata>
 1d6:	81 32       	cpi	r24, 0x21	; 33
 1d8:	41 f4       	brne	.+16     	; 0x1ea <BT_Receive+0xf8>
		marble.posX = 0;
 1da:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <marble+0x2>
 1de:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <marble+0x1>
		step = 2;
 1e2:	82 e0       	ldi	r24, 0x02	; 2
 1e4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 1e8:	0b c0       	rjmp	.+22     	; 0x200 <BT_Receive+0x10e>
	}
	else if(rdata == '*'){
 1ea:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rdata>
 1ee:	8a 32       	cpi	r24, 0x2A	; 42
 1f0:	39 f4       	brne	.+14     	; 0x200 <BT_Receive+0x10e>
		marble.posY = 0;
 1f2:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <marble+0x4>
 1f6:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <marble+0x3>
		step = 3;
 1fa:	83 e0       	ldi	r24, 0x03	; 3
 1fc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	}
	
	BT_send(rdata);
 200:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rdata>
 204:	6f df       	rcall	.-290    	; 0xe4 <BT_send>

	return 0x00;
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	08 95       	ret
char BT_Receive(){
	
	static char step = 0;
	static char tmp = 0;
	
	if(!(UCSR1A&(1<<RXC1))) return 0x00;
 20a:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	BT_send(rdata);

	return 0x00;
}
 20c:	08 95       	ret

0000020e <Select_Item>:
 20e:	95 b3       	in	r25, 0x15	; 21
 210:	90 7f       	andi	r25, 0xF0	; 240
 212:	89 2b       	or	r24, r25
 214:	85 bb       	out	0x15, r24	; 21
 216:	2f ef       	ldi	r18, 0xFF	; 255
 218:	81 ee       	ldi	r24, 0xE1	; 225
 21a:	94 e0       	ldi	r25, 0x04	; 4
 21c:	21 50       	subi	r18, 0x01	; 1
 21e:	80 40       	sbci	r24, 0x00	; 0
 220:	90 40       	sbci	r25, 0x00	; 0
 222:	e1 f7       	brne	.-8      	; 0x21c <Select_Item+0xe>
 224:	00 c0       	rjmp	.+0      	; 0x226 <Select_Item+0x18>
 226:	00 00       	nop
 228:	08 95       	ret

0000022a <Servo_Act>:
 22a:	40 e0       	ldi	r20, 0x00	; 0
 22c:	50 e0       	ldi	r21, 0x00	; 0
 22e:	21 c0       	rjmp	.+66     	; 0x272 <Servo_Act+0x48>
 230:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <Servo_Allowed>
 234:	22 23       	and	r18, r18
 236:	b9 f0       	breq	.+46     	; 0x266 <Servo_Act+0x3c>
 238:	4f 5f       	subi	r20, 0xFF	; 255
 23a:	5f 4f       	sbci	r21, 0xFF	; 255
 23c:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <Servo_increment_threshold>
 240:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <Servo_increment_threshold+0x1>
 244:	42 17       	cp	r20, r18
 246:	53 07       	cpc	r21, r19
 248:	71 f4       	brne	.+28     	; 0x266 <Servo_Act+0x3c>
 24a:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <Servo_step>
 24e:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <Servo_step+0x1>
 252:	82 0f       	add	r24, r18
 254:	93 1f       	adc	r25, r19
 256:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <Servo_pos+0x1>
 25a:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <Servo_pos>
 25e:	9b bd       	out	0x2b, r25	; 43
 260:	8a bd       	out	0x2a, r24	; 42
 262:	40 e0       	ldi	r20, 0x00	; 0
 264:	50 e0       	ldi	r21, 0x00	; 0
 266:	8f e8       	ldi	r24, 0x8F	; 143
 268:	91 e0       	ldi	r25, 0x01	; 1
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <Servo_Act+0x40>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <Servo_Act+0x46>
 270:	00 00       	nop
 272:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <Servo_pos>
 276:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <Servo_pos+0x1>
 27a:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <Servo_target>
 27e:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <Servo_target+0x1>
 282:	82 17       	cp	r24, r18
 284:	93 07       	cpc	r25, r19
 286:	a1 f6       	brne	.-88     	; 0x230 <Servo_Act+0x6>
 288:	08 95       	ret

0000028a <Servo_Go_Home>:
 28a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <Servo_pos>
 28e:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <Servo_pos+0x1>
 292:	9b bd       	out	0x2b, r25	; 43
 294:	8a bd       	out	0x2a, r24	; 42
 296:	82 e0       	ldi	r24, 0x02	; 2
 298:	ba df       	rcall	.-140    	; 0x20e <Select_Item>
 29a:	82 e0       	ldi	r24, 0x02	; 2
 29c:	b8 df       	rcall	.-144    	; 0x20e <Select_Item>
 29e:	82 e8       	ldi	r24, 0x82	; 130
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <Servo_target+0x1>
 2a6:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <Servo_target>
 2aa:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <Servo_pos>
 2ae:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <Servo_pos+0x1>
 2b2:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <Servo_target>
 2b6:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <Servo_target+0x1>
 2ba:	28 17       	cp	r18, r24
 2bc:	39 07       	cpc	r19, r25
 2be:	38 f0       	brcs	.+14     	; 0x2ce <Servo_Go_Home+0x44>
 2c0:	8f ef       	ldi	r24, 0xFF	; 255
 2c2:	9f ef       	ldi	r25, 0xFF	; 255
 2c4:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <Servo_step+0x1>
 2c8:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <Servo_step>
 2cc:	06 c0       	rjmp	.+12     	; 0x2da <Servo_Go_Home+0x50>
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <Servo_step+0x1>
 2d6:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <Servo_step>
 2da:	a7 cf       	rjmp	.-178    	; 0x22a <Servo_Act>
 2dc:	08 95       	ret

000002de <Servo_Go_Box>:
 2de:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <Servo_pos>
 2e2:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <Servo_pos+0x1>
 2e6:	9b bd       	out	0x2b, r25	; 43
 2e8:	8a bd       	out	0x2a, r24	; 42
 2ea:	82 e0       	ldi	r24, 0x02	; 2
 2ec:	90 df       	rcall	.-224    	; 0x20e <Select_Item>
 2ee:	82 e0       	ldi	r24, 0x02	; 2
 2f0:	8e df       	rcall	.-228    	; 0x20e <Select_Item>
 2f2:	8c e6       	ldi	r24, 0x6C	; 108
 2f4:	92 e0       	ldi	r25, 0x02	; 2
 2f6:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <Servo_target+0x1>
 2fa:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <Servo_target>
 2fe:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <Servo_pos>
 302:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <Servo_pos+0x1>
 306:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <Servo_target>
 30a:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <Servo_target+0x1>
 30e:	28 17       	cp	r18, r24
 310:	39 07       	cpc	r19, r25
 312:	38 f0       	brcs	.+14     	; 0x322 <Servo_Go_Box+0x44>
 314:	8f ef       	ldi	r24, 0xFF	; 255
 316:	9f ef       	ldi	r25, 0xFF	; 255
 318:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <Servo_step+0x1>
 31c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <Servo_step>
 320:	06 c0       	rjmp	.+12     	; 0x32e <Servo_Go_Box+0x50>
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <Servo_step+0x1>
 32a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <Servo_step>
 32e:	7d cf       	rjmp	.-262    	; 0x22a <Servo_Act>
 330:	08 95       	ret

00000332 <Servo_Goto>:
 332:	cf 93       	push	r28
 334:	df 93       	push	r29
 336:	ec 01       	movw	r28, r24
 338:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <Servo_pos>
 33c:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <Servo_pos+0x1>
 340:	9b bd       	out	0x2b, r25	; 43
 342:	8a bd       	out	0x2a, r24	; 42
 344:	82 e0       	ldi	r24, 0x02	; 2
 346:	63 df       	rcall	.-314    	; 0x20e <Select_Item>
 348:	82 e0       	ldi	r24, 0x02	; 2
 34a:	61 df       	rcall	.-318    	; 0x20e <Select_Item>
 34c:	d0 93 18 01 	sts	0x0118, r29	; 0x800118 <Servo_target+0x1>
 350:	c0 93 17 01 	sts	0x0117, r28	; 0x800117 <Servo_target>
 354:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <Servo_pos>
 358:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <Servo_pos+0x1>
 35c:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <Servo_target>
 360:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <Servo_target+0x1>
 364:	28 17       	cp	r18, r24
 366:	39 07       	cpc	r19, r25
 368:	38 f0       	brcs	.+14     	; 0x378 <Servo_Goto+0x46>
 36a:	8f ef       	ldi	r24, 0xFF	; 255
 36c:	9f ef       	ldi	r25, 0xFF	; 255
 36e:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <Servo_step+0x1>
 372:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <Servo_step>
 376:	06 c0       	rjmp	.+12     	; 0x384 <Servo_Goto+0x52>
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <Servo_step+0x1>
 380:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <Servo_step>
 384:	52 df       	rcall	.-348    	; 0x22a <Servo_Act>
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	08 95       	ret

0000038c <Servo_Set_Speed>:
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <Servo_increment_threshold+0x1>
 392:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <Servo_increment_threshold>
 396:	08 95       	ret

00000398 <RED_LED_On>:
 398:	cf 93       	push	r28
 39a:	df 93       	push	r29
 39c:	ec 01       	movw	r28, r24
 39e:	83 e0       	ldi	r24, 0x03	; 3
 3a0:	36 df       	rcall	.-404    	; 0x20e <Select_Item>
 3a2:	87 e8       	ldi	r24, 0x87	; 135
 3a4:	93 e1       	ldi	r25, 0x13	; 19
 3a6:	97 bd       	out	0x27, r25	; 39
 3a8:	86 bd       	out	0x26, r24	; 38
 3aa:	db bd       	out	0x2b, r29	; 43
 3ac:	ca bd       	out	0x2a, r28	; 42
 3ae:	89 e0       	ldi	r24, 0x09	; 9
 3b0:	2e df       	rcall	.-420    	; 0x20e <Select_Item>
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	08 95       	ret

000003b8 <GREEN_LED_On>:
 3b8:	cf 93       	push	r28
 3ba:	df 93       	push	r29
 3bc:	ec 01       	movw	r28, r24
 3be:	83 e0       	ldi	r24, 0x03	; 3
 3c0:	26 df       	rcall	.-436    	; 0x20e <Select_Item>
 3c2:	87 e8       	ldi	r24, 0x87	; 135
 3c4:	93 e1       	ldi	r25, 0x13	; 19
 3c6:	97 bd       	out	0x27, r25	; 39
 3c8:	86 bd       	out	0x26, r24	; 38
 3ca:	db bd       	out	0x2b, r29	; 43
 3cc:	ca bd       	out	0x2a, r28	; 42
 3ce:	8d e0       	ldi	r24, 0x0D	; 13
 3d0:	1e df       	rcall	.-452    	; 0x20e <Select_Item>
 3d2:	df 91       	pop	r29
 3d4:	cf 91       	pop	r28
 3d6:	08 95       	ret

000003d8 <BLUE_LED_On>:
 3d8:	cf 93       	push	r28
 3da:	df 93       	push	r29
 3dc:	ec 01       	movw	r28, r24
 3de:	83 e0       	ldi	r24, 0x03	; 3
 3e0:	16 df       	rcall	.-468    	; 0x20e <Select_Item>
 3e2:	87 e8       	ldi	r24, 0x87	; 135
 3e4:	93 e1       	ldi	r25, 0x13	; 19
 3e6:	97 bd       	out	0x27, r25	; 39
 3e8:	86 bd       	out	0x26, r24	; 38
 3ea:	db bd       	out	0x2b, r29	; 43
 3ec:	ca bd       	out	0x2a, r28	; 42
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	0e df       	rcall	.-484    	; 0x20e <Select_Item>
 3f2:	df 91       	pop	r29
 3f4:	cf 91       	pop	r28
 3f6:	08 95       	ret

000003f8 <__vector_8>:
			}
		}
	}
	else{
		was = 0x00;
		Buzzer_off();
 3f8:	1f 92       	push	r1
 3fa:	0f 92       	push	r0
 3fc:	0f b6       	in	r0, 0x3f	; 63
 3fe:	0f 92       	push	r0
 400:	11 24       	eor	r1, r1
 402:	0f 90       	pop	r0
 404:	0f be       	out	0x3f, r0	; 63
 406:	0f 90       	pop	r0
 408:	1f 90       	pop	r1
 40a:	18 95       	reti

0000040c <timer0_init>:
 40c:	83 b7       	in	r24, 0x33	; 51
 40e:	87 60       	ori	r24, 0x07	; 7
 410:	83 bf       	out	0x33, r24	; 51
 412:	87 b7       	in	r24, 0x37	; 55
 414:	81 60       	ori	r24, 0x01	; 1
 416:	87 bf       	out	0x37, r24	; 55
 418:	12 be       	out	0x32, r1	; 50
 41a:	08 95       	ret

0000041c <timer1_init>:
 41c:	82 e8       	ldi	r24, 0x82	; 130
 41e:	8f bd       	out	0x2f, r24	; 47
 420:	8b e1       	ldi	r24, 0x1B	; 27
 422:	8e bd       	out	0x2e, r24	; 46
 424:	87 e8       	ldi	r24, 0x87	; 135
 426:	93 e1       	ldi	r25, 0x13	; 19
 428:	97 bd       	out	0x27, r25	; 39
 42a:	86 bd       	out	0x26, r24	; 38
 42c:	08 95       	ret

0000042e <port_setup>:
 42e:	8f ef       	ldi	r24, 0xFF	; 255
 430:	8a bb       	out	0x1a, r24	; 26
 432:	11 ba       	out	0x11, r1	; 17
 434:	87 bb       	out	0x17, r24	; 23
 436:	84 bb       	out	0x14, r24	; 20
 438:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 43c:	12 b8       	out	0x02, r1	; 2
 43e:	08 95       	ret

00000440 <adc_init>:
 440:	80 e4       	ldi	r24, 0x40	; 64
 442:	87 b9       	out	0x07, r24	; 7
 444:	87 e8       	ldi	r24, 0x87	; 135
 446:	86 b9       	out	0x06, r24	; 6
 448:	08 95       	ret

0000044a <ElectroMagnet_On>:
 44a:	85 b3       	in	r24, 0x15	; 21
 44c:	8f 77       	andi	r24, 0x7F	; 127
 44e:	85 bb       	out	0x15, r24	; 21
 450:	08 95       	ret

00000452 <ElectroMagnet_Off>:
 452:	85 b3       	in	r24, 0x15	; 21
 454:	80 68       	ori	r24, 0x80	; 128
 456:	85 bb       	out	0x15, r24	; 21
 458:	08 95       	ret

0000045a <main>:
 45a:	e9 df       	rcall	.-46     	; 0x42e <port_setup>
 45c:	f1 df       	rcall	.-30     	; 0x440 <adc_init>
 45e:	d6 df       	rcall	.-84     	; 0x40c <timer0_init>
 460:	dd df       	rcall	.-70     	; 0x41c <timer1_init>
 462:	32 de       	rcall	.-924    	; 0xc8 <init_BT>
 464:	80 ec       	ldi	r24, 0xC0	; 192
 466:	89 bf       	out	0x39, r24	; 57
 468:	80 ef       	ldi	r24, 0xF0	; 240
 46a:	8a bf       	out	0x3a, r24	; 58
 46c:	62 d2       	rcall	.+1220   	; 0x932 <Reset_sensor_val>
 46e:	f1 df       	rcall	.-30     	; 0x452 <ElectroMagnet_Off>
 470:	e4 e0       	ldi	r30, 0x04	; 4
 472:	f1 e0       	ldi	r31, 0x01	; 1
 474:	85 e0       	ldi	r24, 0x05	; 5
 476:	80 83       	st	Z, r24
 478:	8f ef       	ldi	r24, 0xFF	; 255
 47a:	9f ef       	ldi	r25, 0xFF	; 255
 47c:	92 83       	std	Z+2, r25	; 0x02
 47e:	81 83       	std	Z+1, r24	; 0x01
 480:	94 83       	std	Z+4, r25	; 0x04
 482:	83 83       	std	Z+3, r24	; 0x03
 484:	78 94       	sei
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <Servo_Allowed>
 48c:	84 e1       	ldi	r24, 0x14	; 20
 48e:	7e df       	rcall	.-260    	; 0x38c <Servo_Set_Speed>
 490:	87 e7       	ldi	r24, 0x77	; 119
 492:	91 e0       	ldi	r25, 0x01	; 1
 494:	4e df       	rcall	.-356    	; 0x332 <Servo_Goto>
 496:	f9 de       	rcall	.-526    	; 0x28a <Servo_Go_Home>
 498:	c1 e0       	ldi	r28, 0x01	; 1
 49a:	c4 30       	cpi	r28, 0x04	; 4
 49c:	f9 f0       	breq	.+62     	; 0x4dc <main+0x82>
 49e:	28 f4       	brcc	.+10     	; 0x4aa <main+0x50>
 4a0:	c1 30       	cpi	r28, 0x01	; 1
 4a2:	49 f0       	breq	.+18     	; 0x4b6 <main+0x5c>
 4a4:	c2 30       	cpi	r28, 0x02	; 2
 4a6:	a9 f0       	breq	.+42     	; 0x4d2 <main+0x78>
 4a8:	f8 cf       	rjmp	.-16     	; 0x49a <main+0x40>
 4aa:	c8 30       	cpi	r28, 0x08	; 8
 4ac:	51 f1       	breq	.+84     	; 0x502 <main+0xa8>
 4ae:	c0 31       	cpi	r28, 0x10	; 16
 4b0:	09 f4       	brne	.+2      	; 0x4b4 <main+0x5a>
 4b2:	47 c0       	rjmp	.+142    	; 0x542 <main+0xe8>
 4b4:	f2 cf       	rjmp	.-28     	; 0x49a <main+0x40>
 4b6:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <pressure_sensor_val>
 4ba:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <pressure_sensor_val+0x1>
 4be:	85 38       	cpi	r24, 0x85	; 133
 4c0:	93 40       	sbci	r25, 0x03	; 3
 4c2:	58 f3       	brcs	.-42     	; 0x49a <main+0x40>
 4c4:	83 e0       	ldi	r24, 0x03	; 3
 4c6:	a3 de       	rcall	.-698    	; 0x20e <Select_Item>
 4c8:	c0 df       	rcall	.-128    	; 0x44a <ElectroMagnet_On>
 4ca:	80 e3       	ldi	r24, 0x30	; 48
 4cc:	0b de       	rcall	.-1002   	; 0xe4 <BT_send>
 4ce:	cc 0f       	add	r28, r28
 4d0:	e4 cf       	rjmp	.-56     	; 0x49a <main+0x40>
 4d2:	0f de       	rcall	.-994    	; 0xf2 <BT_Receive>
 4d4:	88 23       	and	r24, r24
 4d6:	09 f3       	breq	.-62     	; 0x49a <main+0x40>
 4d8:	cc 0f       	add	r28, r28
 4da:	df cf       	rjmp	.-66     	; 0x49a <main+0x40>
 4dc:	87 e7       	ldi	r24, 0x77	; 119
 4de:	91 e0       	ldi	r25, 0x01	; 1
 4e0:	28 df       	rcall	.-432    	; 0x332 <Servo_Goto>
 4e2:	b3 df       	rcall	.-154    	; 0x44a <ElectroMagnet_On>
 4e4:	fc de       	rcall	.-520    	; 0x2de <Servo_Go_Box>
 4e6:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <shk_detected>
 4ea:	b3 df       	rcall	.-154    	; 0x452 <ElectroMagnet_Off>
 4ec:	8f ef       	ldi	r24, 0xFF	; 255
 4ee:	97 ea       	ldi	r25, 0xA7	; 167
 4f0:	21 e6       	ldi	r18, 0x61	; 97
 4f2:	81 50       	subi	r24, 0x01	; 1
 4f4:	90 40       	sbci	r25, 0x00	; 0
 4f6:	20 40       	sbci	r18, 0x00	; 0
 4f8:	e1 f7       	brne	.-8      	; 0x4f2 <main+0x98>
 4fa:	00 c0       	rjmp	.+0      	; 0x4fc <main+0xa2>
 4fc:	00 00       	nop
 4fe:	cc 0f       	add	r28, r28
 500:	cc cf       	rjmp	.-104    	; 0x49a <main+0x40>
 502:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <shk_detected>
 506:	81 30       	cpi	r24, 0x01	; 1
 508:	29 f4       	brne	.+10     	; 0x514 <main+0xba>
 50a:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <shk_detected>
 50e:	bd de       	rcall	.-646    	; 0x28a <Servo_Go_Home>
 510:	cc 0f       	add	r28, r28
 512:	c3 cf       	rjmp	.-122    	; 0x49a <main+0x40>
 514:	84 e1       	ldi	r24, 0x14	; 20
 516:	3a df       	rcall	.-396    	; 0x38c <Servo_Set_Speed>
 518:	b8 de       	rcall	.-656    	; 0x28a <Servo_Go_Home>
 51a:	97 df       	rcall	.-210    	; 0x44a <ElectroMagnet_On>
 51c:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <temp_en+0x1>
 520:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <temp_en>
 524:	80 e5       	ldi	r24, 0x50	; 80
 526:	32 df       	rcall	.-412    	; 0x38c <Servo_Set_Speed>
 528:	da de       	rcall	.-588    	; 0x2de <Servo_Go_Box>
 52a:	93 df       	rcall	.-218    	; 0x452 <ElectroMagnet_Off>
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <temp_en+0x1>
 534:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <temp_en>
 538:	84 e1       	ldi	r24, 0x14	; 20
 53a:	28 df       	rcall	.-432    	; 0x38c <Servo_Set_Speed>
 53c:	a6 de       	rcall	.-692    	; 0x28a <Servo_Go_Home>
 53e:	cc 0f       	add	r28, r28
 540:	ac cf       	rjmp	.-168    	; 0x49a <main+0x40>
 542:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <marble>
 546:	81 11       	cpse	r24, r1
 548:	05 c0       	rjmp	.+10     	; 0x554 <main+0xfa>
 54a:	84 ef       	ldi	r24, 0xF4	; 244
 54c:	91 e0       	ldi	r25, 0x01	; 1
 54e:	24 df       	rcall	.-440    	; 0x398 <RED_LED_On>
 550:	c1 e0       	ldi	r28, 0x01	; 1
 552:	a3 cf       	rjmp	.-186    	; 0x49a <main+0x40>
 554:	82 30       	cpi	r24, 0x02	; 2
 556:	29 f4       	brne	.+10     	; 0x562 <main+0x108>
 558:	84 ef       	ldi	r24, 0xF4	; 244
 55a:	91 e0       	ldi	r25, 0x01	; 1
 55c:	2d df       	rcall	.-422    	; 0x3b8 <GREEN_LED_On>
 55e:	c1 e0       	ldi	r28, 0x01	; 1
 560:	9c cf       	rjmp	.-200    	; 0x49a <main+0x40>
 562:	81 30       	cpi	r24, 0x01	; 1
 564:	29 f4       	brne	.+10     	; 0x570 <main+0x116>
 566:	84 ef       	ldi	r24, 0xF4	; 244
 568:	91 e0       	ldi	r25, 0x01	; 1
 56a:	36 df       	rcall	.-404    	; 0x3d8 <BLUE_LED_On>
 56c:	c1 e0       	ldi	r28, 0x01	; 1
 56e:	95 cf       	rjmp	.-214    	; 0x49a <main+0x40>
 570:	83 e0       	ldi	r24, 0x03	; 3
 572:	4d de       	rcall	.-870    	; 0x20e <Select_Item>
 574:	c1 e0       	ldi	r28, 0x01	; 1
 576:	91 cf       	rjmp	.-222    	; 0x49a <main+0x40>

00000578 <If_Shock_Detected>:
 578:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <shk_sensor_val>
 57c:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <shk_sensor_val+0x1>
 580:	85 38       	cpi	r24, 0x85	; 133
 582:	93 40       	sbci	r25, 0x03	; 3
 584:	18 f4       	brcc	.+6      	; 0x58c <If_Shock_Detected+0x14>
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <shk_detected>
 58c:	08 95       	ret

0000058e <If_PSD_Detected>:
 58e:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <psd_sensor_val>
 592:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <psd_sensor_val+0x1>
 596:	89 30       	cpi	r24, 0x09	; 9
 598:	92 40       	sbci	r25, 0x02	; 2
 59a:	18 f0       	brcs	.+6      	; 0x5a2 <If_PSD_Detected+0x14>
 59c:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <Servo_Allowed>
 5a0:	08 95       	ret
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <Servo_Allowed>
 5a8:	08 95       	ret

000005aa <__vector_20>:
	}
}


void USART0_TX_vect(unsigned char data){
	while(!(UCSR0A & (1<<UDRE0)));
 5aa:	5d 9b       	sbis	0x0b, 5	; 11
 5ac:	fe cf       	rjmp	.-4      	; 0x5aa <__vector_20>
	UDR0 = data;
 5ae:	8c b9       	out	0x0c, r24	; 12
 5b0:	08 95       	ret

000005b2 <USART0_NUM>:
}

void USART0_NUM(unsigned short num){
 5b2:	ef 92       	push	r14
 5b4:	ff 92       	push	r15
 5b6:	0f 93       	push	r16
 5b8:	1f 93       	push	r17
 5ba:	cf 93       	push	r28
 5bc:	df 93       	push	r29
 5be:	ec 01       	movw	r28, r24

	USART0_TX_vect(num / 1000 + 48);
 5c0:	7c 01       	movw	r14, r24
 5c2:	f6 94       	lsr	r15
 5c4:	e7 94       	ror	r14
 5c6:	f6 94       	lsr	r15
 5c8:	e7 94       	ror	r14
 5ca:	f6 94       	lsr	r15
 5cc:	e7 94       	ror	r14
 5ce:	97 01       	movw	r18, r14
 5d0:	a5 ec       	ldi	r26, 0xC5	; 197
 5d2:	b0 e2       	ldi	r27, 0x20	; 32
 5d4:	cd d1       	rcall	.+922    	; 0x970 <__umulhisi3>
 5d6:	8c 01       	movw	r16, r24
 5d8:	12 95       	swap	r17
 5da:	02 95       	swap	r16
 5dc:	0f 70       	andi	r16, 0x0F	; 15
 5de:	01 27       	eor	r16, r17
 5e0:	1f 70       	andi	r17, 0x0F	; 15
 5e2:	01 27       	eor	r16, r17
 5e4:	80 e3       	ldi	r24, 0x30	; 48
 5e6:	80 0f       	add	r24, r16
 5e8:	e0 df       	rcall	.-64     	; 0x5aa <__vector_20>
	USART0_TX_vect((num%1000) / 100 + 48);
 5ea:	28 ee       	ldi	r18, 0xE8	; 232
 5ec:	33 e0       	ldi	r19, 0x03	; 3
 5ee:	02 9f       	mul	r16, r18
 5f0:	c0 01       	movw	r24, r0
 5f2:	03 9f       	mul	r16, r19
 5f4:	90 0d       	add	r25, r0
 5f6:	12 9f       	mul	r17, r18
 5f8:	90 0d       	add	r25, r0
 5fa:	11 24       	eor	r1, r1
 5fc:	9e 01       	movw	r18, r28
 5fe:	28 1b       	sub	r18, r24
 600:	39 0b       	sbc	r19, r25
 602:	36 95       	lsr	r19
 604:	27 95       	ror	r18
 606:	36 95       	lsr	r19
 608:	27 95       	ror	r18
 60a:	ab e7       	ldi	r26, 0x7B	; 123
 60c:	b4 e1       	ldi	r27, 0x14	; 20
 60e:	b0 d1       	rcall	.+864    	; 0x970 <__umulhisi3>
 610:	96 95       	lsr	r25
 612:	87 95       	ror	r24
 614:	80 5d       	subi	r24, 0xD0	; 208
 616:	c9 df       	rcall	.-110    	; 0x5aa <__vector_20>
	USART0_TX_vect((num%100)/10 + 48);
 618:	9e 01       	movw	r18, r28
 61a:	36 95       	lsr	r19
 61c:	27 95       	ror	r18
 61e:	36 95       	lsr	r19
 620:	27 95       	ror	r18
 622:	ab e7       	ldi	r26, 0x7B	; 123
 624:	b4 e1       	ldi	r27, 0x14	; 20
 626:	a4 d1       	rcall	.+840    	; 0x970 <__umulhisi3>
 628:	9c 01       	movw	r18, r24
 62a:	36 95       	lsr	r19
 62c:	27 95       	ror	r18
 62e:	44 e6       	ldi	r20, 0x64	; 100
 630:	42 9f       	mul	r20, r18
 632:	c0 01       	movw	r24, r0
 634:	43 9f       	mul	r20, r19
 636:	90 0d       	add	r25, r0
 638:	11 24       	eor	r1, r1
 63a:	9e 01       	movw	r18, r28
 63c:	28 1b       	sub	r18, r24
 63e:	39 0b       	sbc	r19, r25
 640:	ad ec       	ldi	r26, 0xCD	; 205
 642:	bc ec       	ldi	r27, 0xCC	; 204
 644:	95 d1       	rcall	.+810    	; 0x970 <__umulhisi3>
 646:	96 95       	lsr	r25
 648:	87 95       	ror	r24
 64a:	96 95       	lsr	r25
 64c:	87 95       	ror	r24
 64e:	96 95       	lsr	r25
 650:	87 95       	ror	r24
 652:	80 5d       	subi	r24, 0xD0	; 208
	USART0_TX_vect((num%10) + 48);
 654:	aa df       	rcall	.-172    	; 0x5aa <__vector_20>
 656:	9e 01       	movw	r18, r28
 658:	ad ec       	ldi	r26, 0xCD	; 205
 65a:	bc ec       	ldi	r27, 0xCC	; 204
 65c:	89 d1       	rcall	.+786    	; 0x970 <__umulhisi3>
 65e:	96 95       	lsr	r25
 660:	87 95       	ror	r24
 662:	96 95       	lsr	r25
 664:	87 95       	ror	r24
 666:	96 95       	lsr	r25
 668:	87 95       	ror	r24
 66a:	9c 01       	movw	r18, r24
 66c:	22 0f       	add	r18, r18
 66e:	33 1f       	adc	r19, r19
 670:	88 0f       	add	r24, r24
 672:	99 1f       	adc	r25, r25
 674:	88 0f       	add	r24, r24
 676:	99 1f       	adc	r25, r25
 678:	88 0f       	add	r24, r24
 67a:	99 1f       	adc	r25, r25
 67c:	82 0f       	add	r24, r18
 67e:	93 1f       	adc	r25, r19
 680:	9e 01       	movw	r18, r28
 682:	28 1b       	sub	r18, r24
 684:	39 0b       	sbc	r19, r25
 686:	c9 01       	movw	r24, r18
 688:	80 5d       	subi	r24, 0xD0	; 208
 68a:	8f df       	rcall	.-226    	; 0x5aa <__vector_20>
 68c:	df 91       	pop	r29
 68e:	cf 91       	pop	r28
 690:	1f 91       	pop	r17
 692:	0f 91       	pop	r16
 694:	ff 90       	pop	r15
 696:	ef 90       	pop	r14
 698:	08 95       	ret

0000069a <__vector_16>:
	else {
		PORTA |= ~0xBF;
	}
}

ISR(TIMER0_OVF_vect){ //Use Timer0 for collecting sensor value
 69a:	1f 92       	push	r1
 69c:	0f 92       	push	r0
 69e:	0f b6       	in	r0, 0x3f	; 63
 6a0:	0f 92       	push	r0
 6a2:	11 24       	eor	r1, r1
 6a4:	0b b6       	in	r0, 0x3b	; 59
 6a6:	0f 92       	push	r0
 6a8:	2f 93       	push	r18
 6aa:	3f 93       	push	r19
 6ac:	4f 93       	push	r20
 6ae:	5f 93       	push	r21
 6b0:	6f 93       	push	r22
 6b2:	7f 93       	push	r23
 6b4:	8f 93       	push	r24
 6b6:	9f 93       	push	r25
 6b8:	af 93       	push	r26
 6ba:	bf 93       	push	r27
 6bc:	ef 93       	push	r30
 6be:	ff 93       	push	r31
	static char idx = 0x01;
	
	switch(idx){
 6c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 6c4:	84 30       	cpi	r24, 0x04	; 4
 6c6:	79 f1       	breq	.+94     	; 0x726 <__vector_16+0x8c>
 6c8:	28 f4       	brcc	.+10     	; 0x6d4 <__vector_16+0x3a>
 6ca:	81 30       	cpi	r24, 0x01	; 1
 6cc:	61 f0       	breq	.+24     	; 0x6e6 <__vector_16+0x4c>
 6ce:	82 30       	cpi	r24, 0x02	; 2
 6d0:	d1 f0       	breq	.+52     	; 0x706 <__vector_16+0x6c>
 6d2:	6a c0       	rjmp	.+212    	; 0x7a8 <__vector_16+0x10e>
 6d4:	86 30       	cpi	r24, 0x06	; 6
 6d6:	09 f4       	brne	.+2      	; 0x6da <__vector_16+0x40>
 6d8:	47 c0       	rjmp	.+142    	; 0x768 <__vector_16+0xce>
 6da:	08 f4       	brcc	.+2      	; 0x6de <__vector_16+0x44>
 6dc:	34 c0       	rjmp	.+104    	; 0x746 <__vector_16+0xac>
 6de:	87 30       	cpi	r24, 0x07	; 7
 6e0:	09 f4       	brne	.+2      	; 0x6e4 <__vector_16+0x4a>
 6e2:	52 c0       	rjmp	.+164    	; 0x788 <__vector_16+0xee>
 6e4:	61 c0       	rjmp	.+194    	; 0x7a8 <__vector_16+0x10e>
		case 0x01:
			Read_CDS();
 6e6:	cb d0       	rcall	.+406    	; 0x87e <Read_CDS>
			USART0_NUM(cds_sensor_val);
 6e8:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <cds_sensor_val>
 6ec:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <cds_sensor_val+0x1>
 6f0:	60 df       	rcall	.-320    	; 0x5b2 <USART0_NUM>
			USART0_TX_vect('\n');
 6f2:	8a e0       	ldi	r24, 0x0A	; 10
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	59 df       	rcall	.-334    	; 0x5aa <__vector_20>
			USART0_TX_vect('\r');
 6f8:	8d e0       	ldi	r24, 0x0D	; 13
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	56 df       	rcall	.-340    	; 0x5aa <__vector_20>
 6fe:	82 e0       	ldi	r24, 0x02	; 2
			
			idx=0x02;
 700:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
 704:	51 c0       	rjmp	.+162    	; 0x7a8 <__vector_16+0x10e>
		
		case 0x02:
			Read_Thermister();
 706:	f7 d0       	rcall	.+494    	; 0x8f6 <Read_Thermister>
			//Servo_Set_Speed();
			USART0_NUM(temp_sensor_val);
 708:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <temp_sensor_val>
 70c:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <temp_sensor_val+0x1>
 710:	50 df       	rcall	.-352    	; 0x5b2 <USART0_NUM>
			USART0_TX_vect('\n');
 712:	8a e0       	ldi	r24, 0x0A	; 10
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	49 df       	rcall	.-366    	; 0x5aa <__vector_20>
 718:	8d e0       	ldi	r24, 0x0D	; 13
			USART0_TX_vect('\r');
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	46 df       	rcall	.-372    	; 0x5aa <__vector_20>
 71e:	84 e0       	ldi	r24, 0x04	; 4
			idx=0x04;
 720:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
 724:	41 c0       	rjmp	.+130    	; 0x7a8 <__vector_16+0x10e>
		
		case 0x04:
			Read_Pressure();
 726:	d8 d0       	rcall	.+432    	; 0x8d8 <Read_Pressure>
			USART0_NUM(pressure_sensor_val);
 728:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <pressure_sensor_val>
 72c:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <pressure_sensor_val+0x1>
 730:	40 df       	rcall	.-384    	; 0x5b2 <USART0_NUM>
			USART0_TX_vect('\n');
 732:	8a e0       	ldi	r24, 0x0A	; 10
 734:	90 e0       	ldi	r25, 0x00	; 0
			USART0_TX_vect('\r');
 736:	39 df       	rcall	.-398    	; 0x5aa <__vector_20>
 738:	8d e0       	ldi	r24, 0x0D	; 13
 73a:	90 e0       	ldi	r25, 0x00	; 0
			idx=0x05;
 73c:	36 df       	rcall	.-404    	; 0x5aa <__vector_20>
 73e:	85 e0       	ldi	r24, 0x05	; 5
		break;
 740:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		case 0x05:
		
			Read_Shock();
			If_Shock_Detected();
 744:	31 c0       	rjmp	.+98     	; 0x7a8 <__vector_16+0x10e>
 746:	e6 d0       	rcall	.+460    	; 0x914 <Read_Shock>
			USART0_NUM(shk_sensor_val);
 748:	17 df       	rcall	.-466    	; 0x578 <If_Shock_Detected>
 74a:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <shk_sensor_val>
 74e:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <shk_sensor_val+0x1>
			USART0_TX_vect('\n');
 752:	2f df       	rcall	.-418    	; 0x5b2 <USART0_NUM>
 754:	8a e0       	ldi	r24, 0x0A	; 10
 756:	90 e0       	ldi	r25, 0x00	; 0
			USART0_TX_vect('\r');
 758:	28 df       	rcall	.-432    	; 0x5aa <__vector_20>
 75a:	8d e0       	ldi	r24, 0x0D	; 13
 75c:	90 e0       	ldi	r25, 0x00	; 0
			idx=0x06;
 75e:	25 df       	rcall	.-438    	; 0x5aa <__vector_20>
 760:	86 e0       	ldi	r24, 0x06	; 6
 762:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		case 0x06:
		
			Read_Fire();
			//If_Fire_Detected();
			USART0_NUM(fire_sensor_val);
 766:	20 c0       	rjmp	.+64     	; 0x7a8 <__vector_16+0x10e>
 768:	99 d0       	rcall	.+306    	; 0x89c <Read_Fire>
 76a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <fire_sensor_val>
 76e:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <fire_sensor_val+0x1>
			USART0_TX_vect('\n');
 772:	1f df       	rcall	.-450    	; 0x5b2 <USART0_NUM>
 774:	8a e0       	ldi	r24, 0x0A	; 10
			USART0_TX_vect('\r');
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	18 df       	rcall	.-464    	; 0x5aa <__vector_20>
 77a:	8d e0       	ldi	r24, 0x0D	; 13
 77c:	90 e0       	ldi	r25, 0x00	; 0
			idx = 0x07;
 77e:	15 df       	rcall	.-470    	; 0x5aa <__vector_20>
 780:	87 e0       	ldi	r24, 0x07	; 7
 782:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
		
		case 0x07:
		
			Read_PSD();
 786:	10 c0       	rjmp	.+32     	; 0x7a8 <__vector_16+0x10e>
 788:	98 d0       	rcall	.+304    	; 0x8ba <Read_PSD>
			If_PSD_Detected();
 78a:	01 df       	rcall	.-510    	; 0x58e <If_PSD_Detected>
 78c:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <psd_sensor_val>
			USART0_NUM(psd_sensor_val);
 790:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <psd_sensor_val+0x1>
 794:	0e df       	rcall	.-484    	; 0x5b2 <USART0_NUM>
 796:	8a e0       	ldi	r24, 0x0A	; 10
 798:	90 e0       	ldi	r25, 0x00	; 0
			USART0_TX_vect('\n');
 79a:	07 df       	rcall	.-498    	; 0x5aa <__vector_20>
 79c:	8d e0       	ldi	r24, 0x0D	; 13
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	04 df       	rcall	.-504    	; 0x5aa <__vector_20>
			USART0_TX_vect('\r');
 7a2:	81 e0       	ldi	r24, 0x01	; 1
 7a4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 7a8:	87 b1       	in	r24, 0x07	; 7
			idx = 0x01;
 7aa:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 7ae:	9f 70       	andi	r25, 0x0F	; 15
		break;
	}
	
	//ADC Mux 선택, ADC 시작 시키고 ISR 종료
	ADMUX = (ADMUX & 0x40) | (idx & 0x0F); //다음 센서 선택
 7b0:	80 74       	andi	r24, 0x40	; 64
 7b2:	89 2b       	or	r24, r25
 7b4:	87 b9       	out	0x07, r24	; 7
 7b6:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <cds_sensor_val>
 7ba:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <cds_sensor_val+0x1>
	ADMUX=(1<<REFS0); //외부 레퍼런스 접압을 기준 전압으로 선택, 우측정렬, 초기 입력핀은 0번
	ADCSRA=(1<<ADEN)|(0<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //ADC enable, ADC interrupt enable 분주비 128
}

inline void Sensor_show(){
	if (cds_sensor_val > 100) { //CDS
 7be:	85 36       	cpi	r24, 0x65	; 101
 7c0:	91 05       	cpc	r25, r1
 7c2:	20 f0       	brcs	.+8      	; 0x7cc <__vector_16+0x132>
 7c4:	8b b3       	in	r24, 0x1b	; 27
 7c6:	8e 7f       	andi	r24, 0xFE	; 254
 7c8:	8b bb       	out	0x1b, r24	; 27
 7ca:	03 c0       	rjmp	.+6      	; 0x7d2 <__vector_16+0x138>
		PORTA &= 0xFE; //CDS에 해당하는 LED만 켜기 //1111 1110
 7cc:	8b b3       	in	r24, 0x1b	; 27
 7ce:	81 60       	ori	r24, 0x01	; 1
 7d0:	8b bb       	out	0x1b, r24	; 27
 7d2:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <temp_sensor_val>
	}
	else {
		PORTA |= ~0xFE; //CDS에 해단하는 LED만 끄기
 7d6:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <temp_sensor_val+0x1>
	}
	
	if (temp_sensor_val > 200) {
 7da:	89 3c       	cpi	r24, 0xC9	; 201
 7dc:	91 05       	cpc	r25, r1
 7de:	20 f0       	brcs	.+8      	; 0x7e8 <__vector_16+0x14e>
 7e0:	8b b3       	in	r24, 0x1b	; 27
 7e2:	8d 7f       	andi	r24, 0xFD	; 253
 7e4:	8b bb       	out	0x1b, r24	; 27
 7e6:	03 c0       	rjmp	.+6      	; 0x7ee <__vector_16+0x154>
		PORTA &= 0xFD; // 1111 1101
 7e8:	8b b3       	in	r24, 0x1b	; 27
 7ea:	82 60       	ori	r24, 0x02	; 2
 7ec:	8b bb       	out	0x1b, r24	; 27
 7ee:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <pressure_sensor_val>
	}
	else {
		PORTA |= ~0xFD;
 7f2:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <pressure_sensor_val+0x1>
	}
	
	
	
	if (pressure_sensor_val > 900) {//보류 -
 7f6:	85 38       	cpi	r24, 0x85	; 133
 7f8:	93 40       	sbci	r25, 0x03	; 3
 7fa:	20 f0       	brcs	.+8      	; 0x804 <__vector_16+0x16a>
 7fc:	8b b3       	in	r24, 0x1b	; 27
 7fe:	8b 7f       	andi	r24, 0xFB	; 251
 800:	8b bb       	out	0x1b, r24	; 27
 802:	03 c0       	rjmp	.+6      	; 0x80a <__vector_16+0x170>
		PORTA &= 0xFB; //1111 1011
 804:	8b b3       	in	r24, 0x1b	; 27
 806:	84 60       	ori	r24, 0x04	; 4
 808:	8b bb       	out	0x1b, r24	; 27
 80a:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <shk_detected>
	}
	else {
		PORTA |= ~0xFB;
 80e:	88 23       	and	r24, r24
 810:	21 f0       	breq	.+8      	; 0x81a <__vector_16+0x180>
	}
	
	if ( shk_detected) {
 812:	8b b3       	in	r24, 0x1b	; 27
 814:	87 7f       	andi	r24, 0xF7	; 247
 816:	8b bb       	out	0x1b, r24	; 27
 818:	03 c0       	rjmp	.+6      	; 0x820 <__vector_16+0x186>
		PORTA &= 0xF7;
 81a:	8b b3       	in	r24, 0x1b	; 27
 81c:	88 60       	ori	r24, 0x08	; 8
 81e:	8b bb       	out	0x1b, r24	; 27
 820:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <fire_sensor_val>
		//shk_detected = 0x00;
	}
	else {
		PORTA |= ~0xF7;
 824:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <fire_sensor_val+0x1>
	}
	
	if (fire_sensor_val > 100) {//-
 828:	85 36       	cpi	r24, 0x65	; 101
 82a:	91 05       	cpc	r25, r1
 82c:	20 f0       	brcs	.+8      	; 0x836 <__vector_16+0x19c>
 82e:	8b b3       	in	r24, 0x1b	; 27
 830:	8f 7e       	andi	r24, 0xEF	; 239
 832:	8b bb       	out	0x1b, r24	; 27
 834:	03 c0       	rjmp	.+6      	; 0x83c <__vector_16+0x1a2>
		PORTA &= 0xEF;
 836:	8b b3       	in	r24, 0x1b	; 27
 838:	80 61       	ori	r24, 0x10	; 16
 83a:	8b bb       	out	0x1b, r24	; 27
 83c:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <psd_sensor_val>
	}
	else {
		PORTA |= ~0xEF;
 840:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <psd_sensor_val+0x1>
	}
	
	
	if ( (psd_sensor_val> 520)) {
 844:	89 30       	cpi	r24, 0x09	; 9
 846:	92 40       	sbci	r25, 0x02	; 2
 848:	20 f0       	brcs	.+8      	; 0x852 <__vector_16+0x1b8>
 84a:	8b b3       	in	r24, 0x1b	; 27
 84c:	8f 7b       	andi	r24, 0xBF	; 191
 84e:	8b bb       	out	0x1b, r24	; 27
 850:	03 c0       	rjmp	.+6      	; 0x858 <__vector_16+0x1be>
		
		PORTA &= 0xBF;
 852:	8b b3       	in	r24, 0x1b	; 27
 854:	80 64       	ori	r24, 0x40	; 64
 856:	8b bb       	out	0x1b, r24	; 27
 858:	ff 91       	pop	r31
	}
	else {
		PORTA |= ~0xBF;
 85a:	ef 91       	pop	r30
 85c:	bf 91       	pop	r27
 85e:	af 91       	pop	r26
	//ADC Mux 선택, ADC 시작 시키고 ISR 종료
	ADMUX = (ADMUX & 0x40) | (idx & 0x0F); //다음 센서 선택
	//ADCSRA |= (1 << ADSC); // ADC 변환 시작
	
	Sensor_show(); //LED A
}
 860:	9f 91       	pop	r25
 862:	8f 91       	pop	r24
 864:	7f 91       	pop	r23
 866:	6f 91       	pop	r22
 868:	5f 91       	pop	r21
 86a:	4f 91       	pop	r20
 86c:	3f 91       	pop	r19
 86e:	2f 91       	pop	r18
 870:	0f 90       	pop	r0
 872:	0b be       	out	0x3b, r0	; 59
 874:	0f 90       	pop	r0
 876:	0f be       	out	0x3f, r0	; 63
 878:	0f 90       	pop	r0
 87a:	1f 90       	pop	r1
 87c:	18 95       	reti

0000087e <Read_CDS>:
 87e:	86 b1       	in	r24, 0x06	; 6
 880:	80 64       	ori	r24, 0x40	; 64
 882:	86 b9       	out	0x06, r24	; 6
 884:	34 9b       	sbis	0x06, 4	; 6
 886:	fe cf       	rjmp	.-4      	; 0x884 <Read_CDS+0x6>
 888:	86 b1       	in	r24, 0x06	; 6
 88a:	80 61       	ori	r24, 0x10	; 16
 88c:	86 b9       	out	0x06, r24	; 6
 88e:	84 b1       	in	r24, 0x04	; 4
 890:	95 b1       	in	r25, 0x05	; 5
 892:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <cds_sensor_val+0x1>
 896:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <cds_sensor_val>
 89a:	08 95       	ret

0000089c <Read_Fire>:
 89c:	86 b1       	in	r24, 0x06	; 6
 89e:	80 64       	ori	r24, 0x40	; 64
 8a0:	86 b9       	out	0x06, r24	; 6
 8a2:	34 9b       	sbis	0x06, 4	; 6
 8a4:	fe cf       	rjmp	.-4      	; 0x8a2 <Read_Fire+0x6>
 8a6:	86 b1       	in	r24, 0x06	; 6
 8a8:	80 61       	ori	r24, 0x10	; 16
 8aa:	86 b9       	out	0x06, r24	; 6
 8ac:	84 b1       	in	r24, 0x04	; 4
 8ae:	95 b1       	in	r25, 0x05	; 5
 8b0:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <fire_sensor_val+0x1>
 8b4:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <fire_sensor_val>
 8b8:	08 95       	ret

000008ba <Read_PSD>:
 8ba:	86 b1       	in	r24, 0x06	; 6
 8bc:	80 64       	ori	r24, 0x40	; 64
 8be:	86 b9       	out	0x06, r24	; 6
 8c0:	34 9b       	sbis	0x06, 4	; 6
 8c2:	fe cf       	rjmp	.-4      	; 0x8c0 <Read_PSD+0x6>
 8c4:	86 b1       	in	r24, 0x06	; 6
 8c6:	80 61       	ori	r24, 0x10	; 16
 8c8:	86 b9       	out	0x06, r24	; 6
 8ca:	84 b1       	in	r24, 0x04	; 4
 8cc:	95 b1       	in	r25, 0x05	; 5
 8ce:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <psd_sensor_val+0x1>
 8d2:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <psd_sensor_val>
 8d6:	08 95       	ret

000008d8 <Read_Pressure>:
 8d8:	86 b1       	in	r24, 0x06	; 6
 8da:	80 64       	ori	r24, 0x40	; 64
 8dc:	86 b9       	out	0x06, r24	; 6
 8de:	34 9b       	sbis	0x06, 4	; 6
 8e0:	fe cf       	rjmp	.-4      	; 0x8de <Read_Pressure+0x6>
 8e2:	86 b1       	in	r24, 0x06	; 6
 8e4:	80 61       	ori	r24, 0x10	; 16
 8e6:	86 b9       	out	0x06, r24	; 6
 8e8:	84 b1       	in	r24, 0x04	; 4
 8ea:	95 b1       	in	r25, 0x05	; 5
 8ec:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <pressure_sensor_val+0x1>
 8f0:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <pressure_sensor_val>
 8f4:	08 95       	ret

000008f6 <Read_Thermister>:
 8f6:	86 b1       	in	r24, 0x06	; 6
 8f8:	80 64       	ori	r24, 0x40	; 64
 8fa:	86 b9       	out	0x06, r24	; 6
 8fc:	34 9b       	sbis	0x06, 4	; 6
 8fe:	fe cf       	rjmp	.-4      	; 0x8fc <Read_Thermister+0x6>
 900:	86 b1       	in	r24, 0x06	; 6
 902:	80 61       	ori	r24, 0x10	; 16
 904:	86 b9       	out	0x06, r24	; 6
 906:	84 b1       	in	r24, 0x04	; 4
 908:	95 b1       	in	r25, 0x05	; 5
 90a:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <temp_sensor_val+0x1>
 90e:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <temp_sensor_val>
 912:	08 95       	ret

00000914 <Read_Shock>:
 914:	86 b1       	in	r24, 0x06	; 6
 916:	80 64       	ori	r24, 0x40	; 64
 918:	86 b9       	out	0x06, r24	; 6
 91a:	34 9b       	sbis	0x06, 4	; 6
 91c:	fe cf       	rjmp	.-4      	; 0x91a <Read_Shock+0x6>
 91e:	86 b1       	in	r24, 0x06	; 6
 920:	80 61       	ori	r24, 0x10	; 16
 922:	86 b9       	out	0x06, r24	; 6
 924:	84 b1       	in	r24, 0x04	; 4
 926:	95 b1       	in	r25, 0x05	; 5
 928:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <shk_sensor_val+0x1>
 92c:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <shk_sensor_val>
 930:	08 95       	ret

00000932 <Reset_sensor_val>:
 932:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <pressure_sensor_val+0x1>
 936:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <pressure_sensor_val>
 93a:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <cds_sensor_val+0x1>
 93e:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <cds_sensor_val>
 942:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <temp_sensor_val+0x1>
 946:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <temp_sensor_val>
 94a:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <temp_en+0x1>
 94e:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <temp_en>
 952:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <shk_sensor_val+0x1>
 956:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <shk_sensor_val>
 95a:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <shk_detected>
 95e:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <psd_sensor_val+0x1>
 962:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <psd_sensor_val>
 966:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <fire_sensor_val+0x1>
 96a:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <fire_sensor_val>
 96e:	08 95       	ret

00000970 <__umulhisi3>:
 970:	a2 9f       	mul	r26, r18
 972:	b0 01       	movw	r22, r0
 974:	b3 9f       	mul	r27, r19
 976:	c0 01       	movw	r24, r0
 978:	a3 9f       	mul	r26, r19
 97a:	70 0d       	add	r23, r0
 97c:	81 1d       	adc	r24, r1
 97e:	11 24       	eor	r1, r1
 980:	91 1d       	adc	r25, r1
 982:	b2 9f       	mul	r27, r18
 984:	70 0d       	add	r23, r0
 986:	81 1d       	adc	r24, r1
 988:	11 24       	eor	r1, r1
 98a:	91 1d       	adc	r25, r1
 98c:	08 95       	ret

0000098e <_exit>:
 98e:	f8 94       	cli

00000990 <__stop_program>:
 990:	ff cf       	rjmp	.-2      	; 0x990 <__stop_program>
